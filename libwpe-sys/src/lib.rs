// automatically generated by rust-bindgen 0.69.4

#![allow(warnings)]

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const WPE_KEY_VoidSymbol: u32 = 16777215;
pub const WPE_KEY_BackSpace: u32 = 65288;
pub const WPE_KEY_Tab: u32 = 65289;
pub const WPE_KEY_Linefeed: u32 = 65290;
pub const WPE_KEY_Clear: u32 = 65291;
pub const WPE_KEY_Return: u32 = 65293;
pub const WPE_KEY_Pause: u32 = 65299;
pub const WPE_KEY_Scroll_Lock: u32 = 65300;
pub const WPE_KEY_Sys_Req: u32 = 65301;
pub const WPE_KEY_Escape: u32 = 65307;
pub const WPE_KEY_Delete: u32 = 65535;
pub const WPE_KEY_Multi_key: u32 = 65312;
pub const WPE_KEY_Codeinput: u32 = 65335;
pub const WPE_KEY_SingleCandidate: u32 = 65340;
pub const WPE_KEY_MultipleCandidate: u32 = 65341;
pub const WPE_KEY_PreviousCandidate: u32 = 65342;
pub const WPE_KEY_Kanji: u32 = 65313;
pub const WPE_KEY_Muhenkan: u32 = 65314;
pub const WPE_KEY_Henkan_Mode: u32 = 65315;
pub const WPE_KEY_Henkan: u32 = 65315;
pub const WPE_KEY_Romaji: u32 = 65316;
pub const WPE_KEY_Hiragana: u32 = 65317;
pub const WPE_KEY_Katakana: u32 = 65318;
pub const WPE_KEY_Hiragana_Katakana: u32 = 65319;
pub const WPE_KEY_Zenkaku: u32 = 65320;
pub const WPE_KEY_Hankaku: u32 = 65321;
pub const WPE_KEY_Zenkaku_Hankaku: u32 = 65322;
pub const WPE_KEY_Touroku: u32 = 65323;
pub const WPE_KEY_Massyo: u32 = 65324;
pub const WPE_KEY_Kana_Lock: u32 = 65325;
pub const WPE_KEY_Kana_Shift: u32 = 65326;
pub const WPE_KEY_Eisu_Shift: u32 = 65327;
pub const WPE_KEY_Eisu_toggle: u32 = 65328;
pub const WPE_KEY_Kanji_Bangou: u32 = 65335;
pub const WPE_KEY_Zen_Koho: u32 = 65341;
pub const WPE_KEY_Mae_Koho: u32 = 65342;
pub const WPE_KEY_Home: u32 = 65360;
pub const WPE_KEY_Left: u32 = 65361;
pub const WPE_KEY_Up: u32 = 65362;
pub const WPE_KEY_Right: u32 = 65363;
pub const WPE_KEY_Down: u32 = 65364;
pub const WPE_KEY_Prior: u32 = 65365;
pub const WPE_KEY_Page_Up: u32 = 65365;
pub const WPE_KEY_Next: u32 = 65366;
pub const WPE_KEY_Page_Down: u32 = 65366;
pub const WPE_KEY_End: u32 = 65367;
pub const WPE_KEY_Begin: u32 = 65368;
pub const WPE_KEY_Select: u32 = 65376;
pub const WPE_KEY_Print: u32 = 65377;
pub const WPE_KEY_Execute: u32 = 65378;
pub const WPE_KEY_Insert: u32 = 65379;
pub const WPE_KEY_Undo: u32 = 65381;
pub const WPE_KEY_Redo: u32 = 65382;
pub const WPE_KEY_Menu: u32 = 65383;
pub const WPE_KEY_Find: u32 = 65384;
pub const WPE_KEY_Cancel: u32 = 65385;
pub const WPE_KEY_Help: u32 = 65386;
pub const WPE_KEY_Break: u32 = 65387;
pub const WPE_KEY_Mode_switch: u32 = 65406;
pub const WPE_KEY_script_switch: u32 = 65406;
pub const WPE_KEY_Num_Lock: u32 = 65407;
pub const WPE_KEY_KP_Space: u32 = 65408;
pub const WPE_KEY_KP_Tab: u32 = 65417;
pub const WPE_KEY_KP_Enter: u32 = 65421;
pub const WPE_KEY_KP_F1: u32 = 65425;
pub const WPE_KEY_KP_F2: u32 = 65426;
pub const WPE_KEY_KP_F3: u32 = 65427;
pub const WPE_KEY_KP_F4: u32 = 65428;
pub const WPE_KEY_KP_Home: u32 = 65429;
pub const WPE_KEY_KP_Left: u32 = 65430;
pub const WPE_KEY_KP_Up: u32 = 65431;
pub const WPE_KEY_KP_Right: u32 = 65432;
pub const WPE_KEY_KP_Down: u32 = 65433;
pub const WPE_KEY_KP_Prior: u32 = 65434;
pub const WPE_KEY_KP_Page_Up: u32 = 65434;
pub const WPE_KEY_KP_Next: u32 = 65435;
pub const WPE_KEY_KP_Page_Down: u32 = 65435;
pub const WPE_KEY_KP_End: u32 = 65436;
pub const WPE_KEY_KP_Begin: u32 = 65437;
pub const WPE_KEY_KP_Insert: u32 = 65438;
pub const WPE_KEY_KP_Delete: u32 = 65439;
pub const WPE_KEY_KP_Equal: u32 = 65469;
pub const WPE_KEY_KP_Multiply: u32 = 65450;
pub const WPE_KEY_KP_Add: u32 = 65451;
pub const WPE_KEY_KP_Separator: u32 = 65452;
pub const WPE_KEY_KP_Subtract: u32 = 65453;
pub const WPE_KEY_KP_Decimal: u32 = 65454;
pub const WPE_KEY_KP_Divide: u32 = 65455;
pub const WPE_KEY_KP_0: u32 = 65456;
pub const WPE_KEY_KP_1: u32 = 65457;
pub const WPE_KEY_KP_2: u32 = 65458;
pub const WPE_KEY_KP_3: u32 = 65459;
pub const WPE_KEY_KP_4: u32 = 65460;
pub const WPE_KEY_KP_5: u32 = 65461;
pub const WPE_KEY_KP_6: u32 = 65462;
pub const WPE_KEY_KP_7: u32 = 65463;
pub const WPE_KEY_KP_8: u32 = 65464;
pub const WPE_KEY_KP_9: u32 = 65465;
pub const WPE_KEY_F1: u32 = 65470;
pub const WPE_KEY_F2: u32 = 65471;
pub const WPE_KEY_F3: u32 = 65472;
pub const WPE_KEY_F4: u32 = 65473;
pub const WPE_KEY_F5: u32 = 65474;
pub const WPE_KEY_F6: u32 = 65475;
pub const WPE_KEY_F7: u32 = 65476;
pub const WPE_KEY_F8: u32 = 65477;
pub const WPE_KEY_F9: u32 = 65478;
pub const WPE_KEY_F10: u32 = 65479;
pub const WPE_KEY_F11: u32 = 65480;
pub const WPE_KEY_L1: u32 = 65480;
pub const WPE_KEY_F12: u32 = 65481;
pub const WPE_KEY_L2: u32 = 65481;
pub const WPE_KEY_F13: u32 = 65482;
pub const WPE_KEY_L3: u32 = 65482;
pub const WPE_KEY_F14: u32 = 65483;
pub const WPE_KEY_L4: u32 = 65483;
pub const WPE_KEY_F15: u32 = 65484;
pub const WPE_KEY_L5: u32 = 65484;
pub const WPE_KEY_F16: u32 = 65485;
pub const WPE_KEY_L6: u32 = 65485;
pub const WPE_KEY_F17: u32 = 65486;
pub const WPE_KEY_L7: u32 = 65486;
pub const WPE_KEY_F18: u32 = 65487;
pub const WPE_KEY_L8: u32 = 65487;
pub const WPE_KEY_F19: u32 = 65488;
pub const WPE_KEY_L9: u32 = 65488;
pub const WPE_KEY_F20: u32 = 65489;
pub const WPE_KEY_L10: u32 = 65489;
pub const WPE_KEY_F21: u32 = 65490;
pub const WPE_KEY_R1: u32 = 65490;
pub const WPE_KEY_F22: u32 = 65491;
pub const WPE_KEY_R2: u32 = 65491;
pub const WPE_KEY_F23: u32 = 65492;
pub const WPE_KEY_R3: u32 = 65492;
pub const WPE_KEY_F24: u32 = 65493;
pub const WPE_KEY_R4: u32 = 65493;
pub const WPE_KEY_F25: u32 = 65494;
pub const WPE_KEY_R5: u32 = 65494;
pub const WPE_KEY_F26: u32 = 65495;
pub const WPE_KEY_R6: u32 = 65495;
pub const WPE_KEY_F27: u32 = 65496;
pub const WPE_KEY_R7: u32 = 65496;
pub const WPE_KEY_F28: u32 = 65497;
pub const WPE_KEY_R8: u32 = 65497;
pub const WPE_KEY_F29: u32 = 65498;
pub const WPE_KEY_R9: u32 = 65498;
pub const WPE_KEY_F30: u32 = 65499;
pub const WPE_KEY_R10: u32 = 65499;
pub const WPE_KEY_F31: u32 = 65500;
pub const WPE_KEY_R11: u32 = 65500;
pub const WPE_KEY_F32: u32 = 65501;
pub const WPE_KEY_R12: u32 = 65501;
pub const WPE_KEY_F33: u32 = 65502;
pub const WPE_KEY_R13: u32 = 65502;
pub const WPE_KEY_F34: u32 = 65503;
pub const WPE_KEY_R14: u32 = 65503;
pub const WPE_KEY_F35: u32 = 65504;
pub const WPE_KEY_R15: u32 = 65504;
pub const WPE_KEY_Shift_L: u32 = 65505;
pub const WPE_KEY_Shift_R: u32 = 65506;
pub const WPE_KEY_Control_L: u32 = 65507;
pub const WPE_KEY_Control_R: u32 = 65508;
pub const WPE_KEY_Caps_Lock: u32 = 65509;
pub const WPE_KEY_Shift_Lock: u32 = 65510;
pub const WPE_KEY_Meta_L: u32 = 65511;
pub const WPE_KEY_Meta_R: u32 = 65512;
pub const WPE_KEY_Alt_L: u32 = 65513;
pub const WPE_KEY_Alt_R: u32 = 65514;
pub const WPE_KEY_Super_L: u32 = 65515;
pub const WPE_KEY_Super_R: u32 = 65516;
pub const WPE_KEY_Hyper_L: u32 = 65517;
pub const WPE_KEY_Hyper_R: u32 = 65518;
pub const WPE_KEY_ISO_Lock: u32 = 65025;
pub const WPE_KEY_ISO_Level2_Latch: u32 = 65026;
pub const WPE_KEY_ISO_Level3_Shift: u32 = 65027;
pub const WPE_KEY_ISO_Level3_Latch: u32 = 65028;
pub const WPE_KEY_ISO_Level3_Lock: u32 = 65029;
pub const WPE_KEY_ISO_Level5_Shift: u32 = 65041;
pub const WPE_KEY_ISO_Level5_Latch: u32 = 65042;
pub const WPE_KEY_ISO_Level5_Lock: u32 = 65043;
pub const WPE_KEY_ISO_Group_Shift: u32 = 65406;
pub const WPE_KEY_ISO_Group_Latch: u32 = 65030;
pub const WPE_KEY_ISO_Group_Lock: u32 = 65031;
pub const WPE_KEY_ISO_Next_Group: u32 = 65032;
pub const WPE_KEY_ISO_Next_Group_Lock: u32 = 65033;
pub const WPE_KEY_ISO_Prev_Group: u32 = 65034;
pub const WPE_KEY_ISO_Prev_Group_Lock: u32 = 65035;
pub const WPE_KEY_ISO_First_Group: u32 = 65036;
pub const WPE_KEY_ISO_First_Group_Lock: u32 = 65037;
pub const WPE_KEY_ISO_Last_Group: u32 = 65038;
pub const WPE_KEY_ISO_Last_Group_Lock: u32 = 65039;
pub const WPE_KEY_ISO_Left_Tab: u32 = 65056;
pub const WPE_KEY_ISO_Move_Line_Up: u32 = 65057;
pub const WPE_KEY_ISO_Move_Line_Down: u32 = 65058;
pub const WPE_KEY_ISO_Partial_Line_Up: u32 = 65059;
pub const WPE_KEY_ISO_Partial_Line_Down: u32 = 65060;
pub const WPE_KEY_ISO_Partial_Space_Left: u32 = 65061;
pub const WPE_KEY_ISO_Partial_Space_Right: u32 = 65062;
pub const WPE_KEY_ISO_Set_Margin_Left: u32 = 65063;
pub const WPE_KEY_ISO_Set_Margin_Right: u32 = 65064;
pub const WPE_KEY_ISO_Release_Margin_Left: u32 = 65065;
pub const WPE_KEY_ISO_Release_Margin_Right: u32 = 65066;
pub const WPE_KEY_ISO_Release_Both_Margins: u32 = 65067;
pub const WPE_KEY_ISO_Fast_Cursor_Left: u32 = 65068;
pub const WPE_KEY_ISO_Fast_Cursor_Right: u32 = 65069;
pub const WPE_KEY_ISO_Fast_Cursor_Up: u32 = 65070;
pub const WPE_KEY_ISO_Fast_Cursor_Down: u32 = 65071;
pub const WPE_KEY_ISO_Continuous_Underline: u32 = 65072;
pub const WPE_KEY_ISO_Discontinuous_Underline: u32 = 65073;
pub const WPE_KEY_ISO_Emphasize: u32 = 65074;
pub const WPE_KEY_ISO_Center_Object: u32 = 65075;
pub const WPE_KEY_ISO_Enter: u32 = 65076;
pub const WPE_KEY_dead_grave: u32 = 65104;
pub const WPE_KEY_dead_acute: u32 = 65105;
pub const WPE_KEY_dead_circumflex: u32 = 65106;
pub const WPE_KEY_dead_tilde: u32 = 65107;
pub const WPE_KEY_dead_perispomeni: u32 = 65107;
pub const WPE_KEY_dead_macron: u32 = 65108;
pub const WPE_KEY_dead_breve: u32 = 65109;
pub const WPE_KEY_dead_abovedot: u32 = 65110;
pub const WPE_KEY_dead_diaeresis: u32 = 65111;
pub const WPE_KEY_dead_abovering: u32 = 65112;
pub const WPE_KEY_dead_doubleacute: u32 = 65113;
pub const WPE_KEY_dead_caron: u32 = 65114;
pub const WPE_KEY_dead_cedilla: u32 = 65115;
pub const WPE_KEY_dead_ogonek: u32 = 65116;
pub const WPE_KEY_dead_iota: u32 = 65117;
pub const WPE_KEY_dead_voiced_sound: u32 = 65118;
pub const WPE_KEY_dead_semivoiced_sound: u32 = 65119;
pub const WPE_KEY_dead_belowdot: u32 = 65120;
pub const WPE_KEY_dead_hook: u32 = 65121;
pub const WPE_KEY_dead_horn: u32 = 65122;
pub const WPE_KEY_dead_stroke: u32 = 65123;
pub const WPE_KEY_dead_abovecomma: u32 = 65124;
pub const WPE_KEY_dead_psili: u32 = 65124;
pub const WPE_KEY_dead_abovereversedcomma: u32 = 65125;
pub const WPE_KEY_dead_dasia: u32 = 65125;
pub const WPE_KEY_dead_doublegrave: u32 = 65126;
pub const WPE_KEY_dead_belowring: u32 = 65127;
pub const WPE_KEY_dead_belowmacron: u32 = 65128;
pub const WPE_KEY_dead_belowcircumflex: u32 = 65129;
pub const WPE_KEY_dead_belowtilde: u32 = 65130;
pub const WPE_KEY_dead_belowbreve: u32 = 65131;
pub const WPE_KEY_dead_belowdiaeresis: u32 = 65132;
pub const WPE_KEY_dead_invertedbreve: u32 = 65133;
pub const WPE_KEY_dead_belowcomma: u32 = 65134;
pub const WPE_KEY_dead_currency: u32 = 65135;
pub const WPE_KEY_dead_lowline: u32 = 65168;
pub const WPE_KEY_dead_aboveverticalline: u32 = 65169;
pub const WPE_KEY_dead_belowverticalline: u32 = 65170;
pub const WPE_KEY_dead_longsolidusoverlay: u32 = 65171;
pub const WPE_KEY_dead_a: u32 = 65152;
pub const WPE_KEY_dead_A: u32 = 65153;
pub const WPE_KEY_dead_e: u32 = 65154;
pub const WPE_KEY_dead_E: u32 = 65155;
pub const WPE_KEY_dead_i: u32 = 65156;
pub const WPE_KEY_dead_I: u32 = 65157;
pub const WPE_KEY_dead_o: u32 = 65158;
pub const WPE_KEY_dead_O: u32 = 65159;
pub const WPE_KEY_dead_u: u32 = 65160;
pub const WPE_KEY_dead_U: u32 = 65161;
pub const WPE_KEY_dead_small_schwa: u32 = 65162;
pub const WPE_KEY_dead_capital_schwa: u32 = 65163;
pub const WPE_KEY_dead_greek: u32 = 65164;
pub const WPE_KEY_First_Virtual_Screen: u32 = 65232;
pub const WPE_KEY_Prev_Virtual_Screen: u32 = 65233;
pub const WPE_KEY_Next_Virtual_Screen: u32 = 65234;
pub const WPE_KEY_Last_Virtual_Screen: u32 = 65236;
pub const WPE_KEY_Terminate_Server: u32 = 65237;
pub const WPE_KEY_AccessX_Enable: u32 = 65136;
pub const WPE_KEY_AccessX_Feedback_Enable: u32 = 65137;
pub const WPE_KEY_RepeatKeys_Enable: u32 = 65138;
pub const WPE_KEY_SlowKeys_Enable: u32 = 65139;
pub const WPE_KEY_BounceKeys_Enable: u32 = 65140;
pub const WPE_KEY_StickyKeys_Enable: u32 = 65141;
pub const WPE_KEY_MouseKeys_Enable: u32 = 65142;
pub const WPE_KEY_MouseKeys_Accel_Enable: u32 = 65143;
pub const WPE_KEY_Overlay1_Enable: u32 = 65144;
pub const WPE_KEY_Overlay2_Enable: u32 = 65145;
pub const WPE_KEY_AudibleBell_Enable: u32 = 65146;
pub const WPE_KEY_Pointer_Left: u32 = 65248;
pub const WPE_KEY_Pointer_Right: u32 = 65249;
pub const WPE_KEY_Pointer_Up: u32 = 65250;
pub const WPE_KEY_Pointer_Down: u32 = 65251;
pub const WPE_KEY_Pointer_UpLeft: u32 = 65252;
pub const WPE_KEY_Pointer_UpRight: u32 = 65253;
pub const WPE_KEY_Pointer_DownLeft: u32 = 65254;
pub const WPE_KEY_Pointer_DownRight: u32 = 65255;
pub const WPE_KEY_Pointer_Button_Dflt: u32 = 65256;
pub const WPE_KEY_Pointer_Button1: u32 = 65257;
pub const WPE_KEY_Pointer_Button2: u32 = 65258;
pub const WPE_KEY_Pointer_Button3: u32 = 65259;
pub const WPE_KEY_Pointer_Button4: u32 = 65260;
pub const WPE_KEY_Pointer_Button5: u32 = 65261;
pub const WPE_KEY_Pointer_DblClick_Dflt: u32 = 65262;
pub const WPE_KEY_Pointer_DblClick1: u32 = 65263;
pub const WPE_KEY_Pointer_DblClick2: u32 = 65264;
pub const WPE_KEY_Pointer_DblClick3: u32 = 65265;
pub const WPE_KEY_Pointer_DblClick4: u32 = 65266;
pub const WPE_KEY_Pointer_DblClick5: u32 = 65267;
pub const WPE_KEY_Pointer_Drag_Dflt: u32 = 65268;
pub const WPE_KEY_Pointer_Drag1: u32 = 65269;
pub const WPE_KEY_Pointer_Drag2: u32 = 65270;
pub const WPE_KEY_Pointer_Drag3: u32 = 65271;
pub const WPE_KEY_Pointer_Drag4: u32 = 65272;
pub const WPE_KEY_Pointer_Drag5: u32 = 65277;
pub const WPE_KEY_Pointer_EnableKeys: u32 = 65273;
pub const WPE_KEY_Pointer_Accelerate: u32 = 65274;
pub const WPE_KEY_Pointer_DfltBtnNext: u32 = 65275;
pub const WPE_KEY_Pointer_DfltBtnPrev: u32 = 65276;
pub const WPE_KEY_ch: u32 = 65184;
pub const WPE_KEY_Ch: u32 = 65185;
pub const WPE_KEY_CH: u32 = 65186;
pub const WPE_KEY_c_h: u32 = 65187;
pub const WPE_KEY_C_h: u32 = 65188;
pub const WPE_KEY_C_H: u32 = 65189;
pub const WPE_KEY_3270_Duplicate: u32 = 64769;
pub const WPE_KEY_3270_FieldMark: u32 = 64770;
pub const WPE_KEY_3270_Right2: u32 = 64771;
pub const WPE_KEY_3270_Left2: u32 = 64772;
pub const WPE_KEY_3270_BackTab: u32 = 64773;
pub const WPE_KEY_3270_EraseEOF: u32 = 64774;
pub const WPE_KEY_3270_EraseInput: u32 = 64775;
pub const WPE_KEY_3270_Reset: u32 = 64776;
pub const WPE_KEY_3270_Quit: u32 = 64777;
pub const WPE_KEY_3270_PA1: u32 = 64778;
pub const WPE_KEY_3270_PA2: u32 = 64779;
pub const WPE_KEY_3270_PA3: u32 = 64780;
pub const WPE_KEY_3270_Test: u32 = 64781;
pub const WPE_KEY_3270_Attn: u32 = 64782;
pub const WPE_KEY_3270_CursorBlink: u32 = 64783;
pub const WPE_KEY_3270_AltCursor: u32 = 64784;
pub const WPE_KEY_3270_KeyClick: u32 = 64785;
pub const WPE_KEY_3270_Jump: u32 = 64786;
pub const WPE_KEY_3270_Ident: u32 = 64787;
pub const WPE_KEY_3270_Rule: u32 = 64788;
pub const WPE_KEY_3270_Copy: u32 = 64789;
pub const WPE_KEY_3270_Play: u32 = 64790;
pub const WPE_KEY_3270_Setup: u32 = 64791;
pub const WPE_KEY_3270_Record: u32 = 64792;
pub const WPE_KEY_3270_ChangeScreen: u32 = 64793;
pub const WPE_KEY_3270_DeleteWord: u32 = 64794;
pub const WPE_KEY_3270_ExSelect: u32 = 64795;
pub const WPE_KEY_3270_CursorSelect: u32 = 64796;
pub const WPE_KEY_3270_PrintScreen: u32 = 64797;
pub const WPE_KEY_3270_Enter: u32 = 64798;
pub const WPE_KEY_space: u32 = 32;
pub const WPE_KEY_exclam: u32 = 33;
pub const WPE_KEY_quotedbl: u32 = 34;
pub const WPE_KEY_numbersign: u32 = 35;
pub const WPE_KEY_dollar: u32 = 36;
pub const WPE_KEY_percent: u32 = 37;
pub const WPE_KEY_ampersand: u32 = 38;
pub const WPE_KEY_apostrophe: u32 = 39;
pub const WPE_KEY_quoteright: u32 = 39;
pub const WPE_KEY_parenleft: u32 = 40;
pub const WPE_KEY_parenright: u32 = 41;
pub const WPE_KEY_asterisk: u32 = 42;
pub const WPE_KEY_plus: u32 = 43;
pub const WPE_KEY_comma: u32 = 44;
pub const WPE_KEY_minus: u32 = 45;
pub const WPE_KEY_period: u32 = 46;
pub const WPE_KEY_slash: u32 = 47;
pub const WPE_KEY_0: u32 = 48;
pub const WPE_KEY_1: u32 = 49;
pub const WPE_KEY_2: u32 = 50;
pub const WPE_KEY_3: u32 = 51;
pub const WPE_KEY_4: u32 = 52;
pub const WPE_KEY_5: u32 = 53;
pub const WPE_KEY_6: u32 = 54;
pub const WPE_KEY_7: u32 = 55;
pub const WPE_KEY_8: u32 = 56;
pub const WPE_KEY_9: u32 = 57;
pub const WPE_KEY_colon: u32 = 58;
pub const WPE_KEY_semicolon: u32 = 59;
pub const WPE_KEY_less: u32 = 60;
pub const WPE_KEY_equal: u32 = 61;
pub const WPE_KEY_greater: u32 = 62;
pub const WPE_KEY_question: u32 = 63;
pub const WPE_KEY_at: u32 = 64;
pub const WPE_KEY_A: u32 = 65;
pub const WPE_KEY_B: u32 = 66;
pub const WPE_KEY_C: u32 = 67;
pub const WPE_KEY_D: u32 = 68;
pub const WPE_KEY_E: u32 = 69;
pub const WPE_KEY_F: u32 = 70;
pub const WPE_KEY_G: u32 = 71;
pub const WPE_KEY_H: u32 = 72;
pub const WPE_KEY_I: u32 = 73;
pub const WPE_KEY_J: u32 = 74;
pub const WPE_KEY_K: u32 = 75;
pub const WPE_KEY_L: u32 = 76;
pub const WPE_KEY_M: u32 = 77;
pub const WPE_KEY_N: u32 = 78;
pub const WPE_KEY_O: u32 = 79;
pub const WPE_KEY_P: u32 = 80;
pub const WPE_KEY_Q: u32 = 81;
pub const WPE_KEY_R: u32 = 82;
pub const WPE_KEY_S: u32 = 83;
pub const WPE_KEY_T: u32 = 84;
pub const WPE_KEY_U: u32 = 85;
pub const WPE_KEY_V: u32 = 86;
pub const WPE_KEY_W: u32 = 87;
pub const WPE_KEY_X: u32 = 88;
pub const WPE_KEY_Y: u32 = 89;
pub const WPE_KEY_Z: u32 = 90;
pub const WPE_KEY_bracketleft: u32 = 91;
pub const WPE_KEY_backslash: u32 = 92;
pub const WPE_KEY_bracketright: u32 = 93;
pub const WPE_KEY_asciicircum: u32 = 94;
pub const WPE_KEY_underscore: u32 = 95;
pub const WPE_KEY_grave: u32 = 96;
pub const WPE_KEY_quoteleft: u32 = 96;
pub const WPE_KEY_a: u32 = 97;
pub const WPE_KEY_b: u32 = 98;
pub const WPE_KEY_c: u32 = 99;
pub const WPE_KEY_d: u32 = 100;
pub const WPE_KEY_e: u32 = 101;
pub const WPE_KEY_f: u32 = 102;
pub const WPE_KEY_g: u32 = 103;
pub const WPE_KEY_h: u32 = 104;
pub const WPE_KEY_i: u32 = 105;
pub const WPE_KEY_j: u32 = 106;
pub const WPE_KEY_k: u32 = 107;
pub const WPE_KEY_l: u32 = 108;
pub const WPE_KEY_m: u32 = 109;
pub const WPE_KEY_n: u32 = 110;
pub const WPE_KEY_o: u32 = 111;
pub const WPE_KEY_p: u32 = 112;
pub const WPE_KEY_q: u32 = 113;
pub const WPE_KEY_r: u32 = 114;
pub const WPE_KEY_s: u32 = 115;
pub const WPE_KEY_t: u32 = 116;
pub const WPE_KEY_u: u32 = 117;
pub const WPE_KEY_v: u32 = 118;
pub const WPE_KEY_w: u32 = 119;
pub const WPE_KEY_x: u32 = 120;
pub const WPE_KEY_y: u32 = 121;
pub const WPE_KEY_z: u32 = 122;
pub const WPE_KEY_braceleft: u32 = 123;
pub const WPE_KEY_bar: u32 = 124;
pub const WPE_KEY_braceright: u32 = 125;
pub const WPE_KEY_asciitilde: u32 = 126;
pub const WPE_KEY_nobreakspace: u32 = 160;
pub const WPE_KEY_exclamdown: u32 = 161;
pub const WPE_KEY_cent: u32 = 162;
pub const WPE_KEY_sterling: u32 = 163;
pub const WPE_KEY_currency: u32 = 164;
pub const WPE_KEY_yen: u32 = 165;
pub const WPE_KEY_brokenbar: u32 = 166;
pub const WPE_KEY_section: u32 = 167;
pub const WPE_KEY_diaeresis: u32 = 168;
pub const WPE_KEY_copyright: u32 = 169;
pub const WPE_KEY_ordfeminine: u32 = 170;
pub const WPE_KEY_guillemotleft: u32 = 171;
pub const WPE_KEY_notsign: u32 = 172;
pub const WPE_KEY_hyphen: u32 = 173;
pub const WPE_KEY_registered: u32 = 174;
pub const WPE_KEY_macron: u32 = 175;
pub const WPE_KEY_degree: u32 = 176;
pub const WPE_KEY_plusminus: u32 = 177;
pub const WPE_KEY_twosuperior: u32 = 178;
pub const WPE_KEY_threesuperior: u32 = 179;
pub const WPE_KEY_acute: u32 = 180;
pub const WPE_KEY_mu: u32 = 181;
pub const WPE_KEY_paragraph: u32 = 182;
pub const WPE_KEY_periodcentered: u32 = 183;
pub const WPE_KEY_cedilla: u32 = 184;
pub const WPE_KEY_onesuperior: u32 = 185;
pub const WPE_KEY_masculine: u32 = 186;
pub const WPE_KEY_guillemotright: u32 = 187;
pub const WPE_KEY_onequarter: u32 = 188;
pub const WPE_KEY_onehalf: u32 = 189;
pub const WPE_KEY_threequarters: u32 = 190;
pub const WPE_KEY_questiondown: u32 = 191;
pub const WPE_KEY_Agrave: u32 = 192;
pub const WPE_KEY_Aacute: u32 = 193;
pub const WPE_KEY_Acircumflex: u32 = 194;
pub const WPE_KEY_Atilde: u32 = 195;
pub const WPE_KEY_Adiaeresis: u32 = 196;
pub const WPE_KEY_Aring: u32 = 197;
pub const WPE_KEY_AE: u32 = 198;
pub const WPE_KEY_Ccedilla: u32 = 199;
pub const WPE_KEY_Egrave: u32 = 200;
pub const WPE_KEY_Eacute: u32 = 201;
pub const WPE_KEY_Ecircumflex: u32 = 202;
pub const WPE_KEY_Ediaeresis: u32 = 203;
pub const WPE_KEY_Igrave: u32 = 204;
pub const WPE_KEY_Iacute: u32 = 205;
pub const WPE_KEY_Icircumflex: u32 = 206;
pub const WPE_KEY_Idiaeresis: u32 = 207;
pub const WPE_KEY_ETH: u32 = 208;
pub const WPE_KEY_Eth: u32 = 208;
pub const WPE_KEY_Ntilde: u32 = 209;
pub const WPE_KEY_Ograve: u32 = 210;
pub const WPE_KEY_Oacute: u32 = 211;
pub const WPE_KEY_Ocircumflex: u32 = 212;
pub const WPE_KEY_Otilde: u32 = 213;
pub const WPE_KEY_Odiaeresis: u32 = 214;
pub const WPE_KEY_multiply: u32 = 215;
pub const WPE_KEY_Oslash: u32 = 216;
pub const WPE_KEY_Ooblique: u32 = 216;
pub const WPE_KEY_Ugrave: u32 = 217;
pub const WPE_KEY_Uacute: u32 = 218;
pub const WPE_KEY_Ucircumflex: u32 = 219;
pub const WPE_KEY_Udiaeresis: u32 = 220;
pub const WPE_KEY_Yacute: u32 = 221;
pub const WPE_KEY_THORN: u32 = 222;
pub const WPE_KEY_Thorn: u32 = 222;
pub const WPE_KEY_ssharp: u32 = 223;
pub const WPE_KEY_agrave: u32 = 224;
pub const WPE_KEY_aacute: u32 = 225;
pub const WPE_KEY_acircumflex: u32 = 226;
pub const WPE_KEY_atilde: u32 = 227;
pub const WPE_KEY_adiaeresis: u32 = 228;
pub const WPE_KEY_aring: u32 = 229;
pub const WPE_KEY_ae: u32 = 230;
pub const WPE_KEY_ccedilla: u32 = 231;
pub const WPE_KEY_egrave: u32 = 232;
pub const WPE_KEY_eacute: u32 = 233;
pub const WPE_KEY_ecircumflex: u32 = 234;
pub const WPE_KEY_ediaeresis: u32 = 235;
pub const WPE_KEY_igrave: u32 = 236;
pub const WPE_KEY_iacute: u32 = 237;
pub const WPE_KEY_icircumflex: u32 = 238;
pub const WPE_KEY_idiaeresis: u32 = 239;
pub const WPE_KEY_eth: u32 = 240;
pub const WPE_KEY_ntilde: u32 = 241;
pub const WPE_KEY_ograve: u32 = 242;
pub const WPE_KEY_oacute: u32 = 243;
pub const WPE_KEY_ocircumflex: u32 = 244;
pub const WPE_KEY_otilde: u32 = 245;
pub const WPE_KEY_odiaeresis: u32 = 246;
pub const WPE_KEY_division: u32 = 247;
pub const WPE_KEY_oslash: u32 = 248;
pub const WPE_KEY_ooblique: u32 = 248;
pub const WPE_KEY_ugrave: u32 = 249;
pub const WPE_KEY_uacute: u32 = 250;
pub const WPE_KEY_ucircumflex: u32 = 251;
pub const WPE_KEY_udiaeresis: u32 = 252;
pub const WPE_KEY_yacute: u32 = 253;
pub const WPE_KEY_thorn: u32 = 254;
pub const WPE_KEY_ydiaeresis: u32 = 255;
pub const WPE_KEY_Aogonek: u32 = 417;
pub const WPE_KEY_breve: u32 = 418;
pub const WPE_KEY_Lstroke: u32 = 419;
pub const WPE_KEY_Lcaron: u32 = 421;
pub const WPE_KEY_Sacute: u32 = 422;
pub const WPE_KEY_Scaron: u32 = 425;
pub const WPE_KEY_Scedilla: u32 = 426;
pub const WPE_KEY_Tcaron: u32 = 427;
pub const WPE_KEY_Zacute: u32 = 428;
pub const WPE_KEY_Zcaron: u32 = 430;
pub const WPE_KEY_Zabovedot: u32 = 431;
pub const WPE_KEY_aogonek: u32 = 433;
pub const WPE_KEY_ogonek: u32 = 434;
pub const WPE_KEY_lstroke: u32 = 435;
pub const WPE_KEY_lcaron: u32 = 437;
pub const WPE_KEY_sacute: u32 = 438;
pub const WPE_KEY_caron: u32 = 439;
pub const WPE_KEY_scaron: u32 = 441;
pub const WPE_KEY_scedilla: u32 = 442;
pub const WPE_KEY_tcaron: u32 = 443;
pub const WPE_KEY_zacute: u32 = 444;
pub const WPE_KEY_doubleacute: u32 = 445;
pub const WPE_KEY_zcaron: u32 = 446;
pub const WPE_KEY_zabovedot: u32 = 447;
pub const WPE_KEY_Racute: u32 = 448;
pub const WPE_KEY_Abreve: u32 = 451;
pub const WPE_KEY_Lacute: u32 = 453;
pub const WPE_KEY_Cacute: u32 = 454;
pub const WPE_KEY_Ccaron: u32 = 456;
pub const WPE_KEY_Eogonek: u32 = 458;
pub const WPE_KEY_Ecaron: u32 = 460;
pub const WPE_KEY_Dcaron: u32 = 463;
pub const WPE_KEY_Dstroke: u32 = 464;
pub const WPE_KEY_Nacute: u32 = 465;
pub const WPE_KEY_Ncaron: u32 = 466;
pub const WPE_KEY_Odoubleacute: u32 = 469;
pub const WPE_KEY_Rcaron: u32 = 472;
pub const WPE_KEY_Uring: u32 = 473;
pub const WPE_KEY_Udoubleacute: u32 = 475;
pub const WPE_KEY_Tcedilla: u32 = 478;
pub const WPE_KEY_racute: u32 = 480;
pub const WPE_KEY_abreve: u32 = 483;
pub const WPE_KEY_lacute: u32 = 485;
pub const WPE_KEY_cacute: u32 = 486;
pub const WPE_KEY_ccaron: u32 = 488;
pub const WPE_KEY_eogonek: u32 = 490;
pub const WPE_KEY_ecaron: u32 = 492;
pub const WPE_KEY_dcaron: u32 = 495;
pub const WPE_KEY_dstroke: u32 = 496;
pub const WPE_KEY_nacute: u32 = 497;
pub const WPE_KEY_ncaron: u32 = 498;
pub const WPE_KEY_odoubleacute: u32 = 501;
pub const WPE_KEY_rcaron: u32 = 504;
pub const WPE_KEY_uring: u32 = 505;
pub const WPE_KEY_udoubleacute: u32 = 507;
pub const WPE_KEY_tcedilla: u32 = 510;
pub const WPE_KEY_abovedot: u32 = 511;
pub const WPE_KEY_Hstroke: u32 = 673;
pub const WPE_KEY_Hcircumflex: u32 = 678;
pub const WPE_KEY_Iabovedot: u32 = 681;
pub const WPE_KEY_Gbreve: u32 = 683;
pub const WPE_KEY_Jcircumflex: u32 = 684;
pub const WPE_KEY_hstroke: u32 = 689;
pub const WPE_KEY_hcircumflex: u32 = 694;
pub const WPE_KEY_idotless: u32 = 697;
pub const WPE_KEY_gbreve: u32 = 699;
pub const WPE_KEY_jcircumflex: u32 = 700;
pub const WPE_KEY_Cabovedot: u32 = 709;
pub const WPE_KEY_Ccircumflex: u32 = 710;
pub const WPE_KEY_Gabovedot: u32 = 725;
pub const WPE_KEY_Gcircumflex: u32 = 728;
pub const WPE_KEY_Ubreve: u32 = 733;
pub const WPE_KEY_Scircumflex: u32 = 734;
pub const WPE_KEY_cabovedot: u32 = 741;
pub const WPE_KEY_ccircumflex: u32 = 742;
pub const WPE_KEY_gabovedot: u32 = 757;
pub const WPE_KEY_gcircumflex: u32 = 760;
pub const WPE_KEY_ubreve: u32 = 765;
pub const WPE_KEY_scircumflex: u32 = 766;
pub const WPE_KEY_kra: u32 = 930;
pub const WPE_KEY_kappa: u32 = 930;
pub const WPE_KEY_Rcedilla: u32 = 931;
pub const WPE_KEY_Itilde: u32 = 933;
pub const WPE_KEY_Lcedilla: u32 = 934;
pub const WPE_KEY_Emacron: u32 = 938;
pub const WPE_KEY_Gcedilla: u32 = 939;
pub const WPE_KEY_Tslash: u32 = 940;
pub const WPE_KEY_rcedilla: u32 = 947;
pub const WPE_KEY_itilde: u32 = 949;
pub const WPE_KEY_lcedilla: u32 = 950;
pub const WPE_KEY_emacron: u32 = 954;
pub const WPE_KEY_gcedilla: u32 = 955;
pub const WPE_KEY_tslash: u32 = 956;
pub const WPE_KEY_ENG: u32 = 957;
pub const WPE_KEY_eng: u32 = 959;
pub const WPE_KEY_Amacron: u32 = 960;
pub const WPE_KEY_Iogonek: u32 = 967;
pub const WPE_KEY_Eabovedot: u32 = 972;
pub const WPE_KEY_Imacron: u32 = 975;
pub const WPE_KEY_Ncedilla: u32 = 977;
pub const WPE_KEY_Omacron: u32 = 978;
pub const WPE_KEY_Kcedilla: u32 = 979;
pub const WPE_KEY_Uogonek: u32 = 985;
pub const WPE_KEY_Utilde: u32 = 989;
pub const WPE_KEY_Umacron: u32 = 990;
pub const WPE_KEY_amacron: u32 = 992;
pub const WPE_KEY_iogonek: u32 = 999;
pub const WPE_KEY_eabovedot: u32 = 1004;
pub const WPE_KEY_imacron: u32 = 1007;
pub const WPE_KEY_ncedilla: u32 = 1009;
pub const WPE_KEY_omacron: u32 = 1010;
pub const WPE_KEY_kcedilla: u32 = 1011;
pub const WPE_KEY_uogonek: u32 = 1017;
pub const WPE_KEY_utilde: u32 = 1021;
pub const WPE_KEY_umacron: u32 = 1022;
pub const WPE_KEY_Wcircumflex: u32 = 16777588;
pub const WPE_KEY_wcircumflex: u32 = 16777589;
pub const WPE_KEY_Ycircumflex: u32 = 16777590;
pub const WPE_KEY_ycircumflex: u32 = 16777591;
pub const WPE_KEY_Babovedot: u32 = 16784898;
pub const WPE_KEY_babovedot: u32 = 16784899;
pub const WPE_KEY_Dabovedot: u32 = 16784906;
pub const WPE_KEY_dabovedot: u32 = 16784907;
pub const WPE_KEY_Fabovedot: u32 = 16784926;
pub const WPE_KEY_fabovedot: u32 = 16784927;
pub const WPE_KEY_Mabovedot: u32 = 16784960;
pub const WPE_KEY_mabovedot: u32 = 16784961;
pub const WPE_KEY_Pabovedot: u32 = 16784982;
pub const WPE_KEY_pabovedot: u32 = 16784983;
pub const WPE_KEY_Sabovedot: u32 = 16784992;
pub const WPE_KEY_sabovedot: u32 = 16784993;
pub const WPE_KEY_Tabovedot: u32 = 16785002;
pub const WPE_KEY_tabovedot: u32 = 16785003;
pub const WPE_KEY_Wgrave: u32 = 16785024;
pub const WPE_KEY_wgrave: u32 = 16785025;
pub const WPE_KEY_Wacute: u32 = 16785026;
pub const WPE_KEY_wacute: u32 = 16785027;
pub const WPE_KEY_Wdiaeresis: u32 = 16785028;
pub const WPE_KEY_wdiaeresis: u32 = 16785029;
pub const WPE_KEY_Ygrave: u32 = 16785138;
pub const WPE_KEY_ygrave: u32 = 16785139;
pub const WPE_KEY_OE: u32 = 5052;
pub const WPE_KEY_oe: u32 = 5053;
pub const WPE_KEY_Ydiaeresis: u32 = 5054;
pub const WPE_KEY_overline: u32 = 1150;
pub const WPE_KEY_kana_fullstop: u32 = 1185;
pub const WPE_KEY_kana_openingbracket: u32 = 1186;
pub const WPE_KEY_kana_closingbracket: u32 = 1187;
pub const WPE_KEY_kana_comma: u32 = 1188;
pub const WPE_KEY_kana_conjunctive: u32 = 1189;
pub const WPE_KEY_kana_middledot: u32 = 1189;
pub const WPE_KEY_kana_WO: u32 = 1190;
pub const WPE_KEY_kana_a: u32 = 1191;
pub const WPE_KEY_kana_i: u32 = 1192;
pub const WPE_KEY_kana_u: u32 = 1193;
pub const WPE_KEY_kana_e: u32 = 1194;
pub const WPE_KEY_kana_o: u32 = 1195;
pub const WPE_KEY_kana_ya: u32 = 1196;
pub const WPE_KEY_kana_yu: u32 = 1197;
pub const WPE_KEY_kana_yo: u32 = 1198;
pub const WPE_KEY_kana_tsu: u32 = 1199;
pub const WPE_KEY_kana_tu: u32 = 1199;
pub const WPE_KEY_prolongedsound: u32 = 1200;
pub const WPE_KEY_kana_A: u32 = 1201;
pub const WPE_KEY_kana_I: u32 = 1202;
pub const WPE_KEY_kana_U: u32 = 1203;
pub const WPE_KEY_kana_E: u32 = 1204;
pub const WPE_KEY_kana_O: u32 = 1205;
pub const WPE_KEY_kana_KA: u32 = 1206;
pub const WPE_KEY_kana_KI: u32 = 1207;
pub const WPE_KEY_kana_KU: u32 = 1208;
pub const WPE_KEY_kana_KE: u32 = 1209;
pub const WPE_KEY_kana_KO: u32 = 1210;
pub const WPE_KEY_kana_SA: u32 = 1211;
pub const WPE_KEY_kana_SHI: u32 = 1212;
pub const WPE_KEY_kana_SU: u32 = 1213;
pub const WPE_KEY_kana_SE: u32 = 1214;
pub const WPE_KEY_kana_SO: u32 = 1215;
pub const WPE_KEY_kana_TA: u32 = 1216;
pub const WPE_KEY_kana_CHI: u32 = 1217;
pub const WPE_KEY_kana_TI: u32 = 1217;
pub const WPE_KEY_kana_TSU: u32 = 1218;
pub const WPE_KEY_kana_TU: u32 = 1218;
pub const WPE_KEY_kana_TE: u32 = 1219;
pub const WPE_KEY_kana_TO: u32 = 1220;
pub const WPE_KEY_kana_NA: u32 = 1221;
pub const WPE_KEY_kana_NI: u32 = 1222;
pub const WPE_KEY_kana_NU: u32 = 1223;
pub const WPE_KEY_kana_NE: u32 = 1224;
pub const WPE_KEY_kana_NO: u32 = 1225;
pub const WPE_KEY_kana_HA: u32 = 1226;
pub const WPE_KEY_kana_HI: u32 = 1227;
pub const WPE_KEY_kana_FU: u32 = 1228;
pub const WPE_KEY_kana_HU: u32 = 1228;
pub const WPE_KEY_kana_HE: u32 = 1229;
pub const WPE_KEY_kana_HO: u32 = 1230;
pub const WPE_KEY_kana_MA: u32 = 1231;
pub const WPE_KEY_kana_MI: u32 = 1232;
pub const WPE_KEY_kana_MU: u32 = 1233;
pub const WPE_KEY_kana_ME: u32 = 1234;
pub const WPE_KEY_kana_MO: u32 = 1235;
pub const WPE_KEY_kana_YA: u32 = 1236;
pub const WPE_KEY_kana_YU: u32 = 1237;
pub const WPE_KEY_kana_YO: u32 = 1238;
pub const WPE_KEY_kana_RA: u32 = 1239;
pub const WPE_KEY_kana_RI: u32 = 1240;
pub const WPE_KEY_kana_RU: u32 = 1241;
pub const WPE_KEY_kana_RE: u32 = 1242;
pub const WPE_KEY_kana_RO: u32 = 1243;
pub const WPE_KEY_kana_WA: u32 = 1244;
pub const WPE_KEY_kana_N: u32 = 1245;
pub const WPE_KEY_voicedsound: u32 = 1246;
pub const WPE_KEY_semivoicedsound: u32 = 1247;
pub const WPE_KEY_kana_switch: u32 = 65406;
pub const WPE_KEY_Farsi_0: u32 = 16778992;
pub const WPE_KEY_Farsi_1: u32 = 16778993;
pub const WPE_KEY_Farsi_2: u32 = 16778994;
pub const WPE_KEY_Farsi_3: u32 = 16778995;
pub const WPE_KEY_Farsi_4: u32 = 16778996;
pub const WPE_KEY_Farsi_5: u32 = 16778997;
pub const WPE_KEY_Farsi_6: u32 = 16778998;
pub const WPE_KEY_Farsi_7: u32 = 16778999;
pub const WPE_KEY_Farsi_8: u32 = 16779000;
pub const WPE_KEY_Farsi_9: u32 = 16779001;
pub const WPE_KEY_Arabic_percent: u32 = 16778858;
pub const WPE_KEY_Arabic_superscript_alef: u32 = 16778864;
pub const WPE_KEY_Arabic_tteh: u32 = 16778873;
pub const WPE_KEY_Arabic_peh: u32 = 16778878;
pub const WPE_KEY_Arabic_tcheh: u32 = 16778886;
pub const WPE_KEY_Arabic_ddal: u32 = 16778888;
pub const WPE_KEY_Arabic_rreh: u32 = 16778897;
pub const WPE_KEY_Arabic_comma: u32 = 1452;
pub const WPE_KEY_Arabic_fullstop: u32 = 16778964;
pub const WPE_KEY_Arabic_0: u32 = 16778848;
pub const WPE_KEY_Arabic_1: u32 = 16778849;
pub const WPE_KEY_Arabic_2: u32 = 16778850;
pub const WPE_KEY_Arabic_3: u32 = 16778851;
pub const WPE_KEY_Arabic_4: u32 = 16778852;
pub const WPE_KEY_Arabic_5: u32 = 16778853;
pub const WPE_KEY_Arabic_6: u32 = 16778854;
pub const WPE_KEY_Arabic_7: u32 = 16778855;
pub const WPE_KEY_Arabic_8: u32 = 16778856;
pub const WPE_KEY_Arabic_9: u32 = 16778857;
pub const WPE_KEY_Arabic_semicolon: u32 = 1467;
pub const WPE_KEY_Arabic_question_mark: u32 = 1471;
pub const WPE_KEY_Arabic_hamza: u32 = 1473;
pub const WPE_KEY_Arabic_maddaonalef: u32 = 1474;
pub const WPE_KEY_Arabic_hamzaonalef: u32 = 1475;
pub const WPE_KEY_Arabic_hamzaonwaw: u32 = 1476;
pub const WPE_KEY_Arabic_hamzaunderalef: u32 = 1477;
pub const WPE_KEY_Arabic_hamzaonyeh: u32 = 1478;
pub const WPE_KEY_Arabic_alef: u32 = 1479;
pub const WPE_KEY_Arabic_beh: u32 = 1480;
pub const WPE_KEY_Arabic_tehmarbuta: u32 = 1481;
pub const WPE_KEY_Arabic_teh: u32 = 1482;
pub const WPE_KEY_Arabic_theh: u32 = 1483;
pub const WPE_KEY_Arabic_jeem: u32 = 1484;
pub const WPE_KEY_Arabic_hah: u32 = 1485;
pub const WPE_KEY_Arabic_khah: u32 = 1486;
pub const WPE_KEY_Arabic_dal: u32 = 1487;
pub const WPE_KEY_Arabic_thal: u32 = 1488;
pub const WPE_KEY_Arabic_ra: u32 = 1489;
pub const WPE_KEY_Arabic_zain: u32 = 1490;
pub const WPE_KEY_Arabic_seen: u32 = 1491;
pub const WPE_KEY_Arabic_sheen: u32 = 1492;
pub const WPE_KEY_Arabic_sad: u32 = 1493;
pub const WPE_KEY_Arabic_dad: u32 = 1494;
pub const WPE_KEY_Arabic_tah: u32 = 1495;
pub const WPE_KEY_Arabic_zah: u32 = 1496;
pub const WPE_KEY_Arabic_ain: u32 = 1497;
pub const WPE_KEY_Arabic_ghain: u32 = 1498;
pub const WPE_KEY_Arabic_tatweel: u32 = 1504;
pub const WPE_KEY_Arabic_feh: u32 = 1505;
pub const WPE_KEY_Arabic_qaf: u32 = 1506;
pub const WPE_KEY_Arabic_kaf: u32 = 1507;
pub const WPE_KEY_Arabic_lam: u32 = 1508;
pub const WPE_KEY_Arabic_meem: u32 = 1509;
pub const WPE_KEY_Arabic_noon: u32 = 1510;
pub const WPE_KEY_Arabic_ha: u32 = 1511;
pub const WPE_KEY_Arabic_heh: u32 = 1511;
pub const WPE_KEY_Arabic_waw: u32 = 1512;
pub const WPE_KEY_Arabic_alefmaksura: u32 = 1513;
pub const WPE_KEY_Arabic_yeh: u32 = 1514;
pub const WPE_KEY_Arabic_fathatan: u32 = 1515;
pub const WPE_KEY_Arabic_dammatan: u32 = 1516;
pub const WPE_KEY_Arabic_kasratan: u32 = 1517;
pub const WPE_KEY_Arabic_fatha: u32 = 1518;
pub const WPE_KEY_Arabic_damma: u32 = 1519;
pub const WPE_KEY_Arabic_kasra: u32 = 1520;
pub const WPE_KEY_Arabic_shadda: u32 = 1521;
pub const WPE_KEY_Arabic_sukun: u32 = 1522;
pub const WPE_KEY_Arabic_madda_above: u32 = 16778835;
pub const WPE_KEY_Arabic_hamza_above: u32 = 16778836;
pub const WPE_KEY_Arabic_hamza_below: u32 = 16778837;
pub const WPE_KEY_Arabic_jeh: u32 = 16778904;
pub const WPE_KEY_Arabic_veh: u32 = 16778916;
pub const WPE_KEY_Arabic_keheh: u32 = 16778921;
pub const WPE_KEY_Arabic_gaf: u32 = 16778927;
pub const WPE_KEY_Arabic_noon_ghunna: u32 = 16778938;
pub const WPE_KEY_Arabic_heh_doachashmee: u32 = 16778942;
pub const WPE_KEY_Farsi_yeh: u32 = 16778956;
pub const WPE_KEY_Arabic_farsi_yeh: u32 = 16778956;
pub const WPE_KEY_Arabic_yeh_baree: u32 = 16778962;
pub const WPE_KEY_Arabic_heh_goal: u32 = 16778945;
pub const WPE_KEY_Arabic_switch: u32 = 65406;
pub const WPE_KEY_Cyrillic_GHE_bar: u32 = 16778386;
pub const WPE_KEY_Cyrillic_ghe_bar: u32 = 16778387;
pub const WPE_KEY_Cyrillic_ZHE_descender: u32 = 16778390;
pub const WPE_KEY_Cyrillic_zhe_descender: u32 = 16778391;
pub const WPE_KEY_Cyrillic_KA_descender: u32 = 16778394;
pub const WPE_KEY_Cyrillic_ka_descender: u32 = 16778395;
pub const WPE_KEY_Cyrillic_KA_vertstroke: u32 = 16778396;
pub const WPE_KEY_Cyrillic_ka_vertstroke: u32 = 16778397;
pub const WPE_KEY_Cyrillic_EN_descender: u32 = 16778402;
pub const WPE_KEY_Cyrillic_en_descender: u32 = 16778403;
pub const WPE_KEY_Cyrillic_U_straight: u32 = 16778414;
pub const WPE_KEY_Cyrillic_u_straight: u32 = 16778415;
pub const WPE_KEY_Cyrillic_U_straight_bar: u32 = 16778416;
pub const WPE_KEY_Cyrillic_u_straight_bar: u32 = 16778417;
pub const WPE_KEY_Cyrillic_HA_descender: u32 = 16778418;
pub const WPE_KEY_Cyrillic_ha_descender: u32 = 16778419;
pub const WPE_KEY_Cyrillic_CHE_descender: u32 = 16778422;
pub const WPE_KEY_Cyrillic_che_descender: u32 = 16778423;
pub const WPE_KEY_Cyrillic_CHE_vertstroke: u32 = 16778424;
pub const WPE_KEY_Cyrillic_che_vertstroke: u32 = 16778425;
pub const WPE_KEY_Cyrillic_SHHA: u32 = 16778426;
pub const WPE_KEY_Cyrillic_shha: u32 = 16778427;
pub const WPE_KEY_Cyrillic_SCHWA: u32 = 16778456;
pub const WPE_KEY_Cyrillic_schwa: u32 = 16778457;
pub const WPE_KEY_Cyrillic_I_macron: u32 = 16778466;
pub const WPE_KEY_Cyrillic_i_macron: u32 = 16778467;
pub const WPE_KEY_Cyrillic_O_bar: u32 = 16778472;
pub const WPE_KEY_Cyrillic_o_bar: u32 = 16778473;
pub const WPE_KEY_Cyrillic_U_macron: u32 = 16778478;
pub const WPE_KEY_Cyrillic_u_macron: u32 = 16778479;
pub const WPE_KEY_Serbian_dje: u32 = 1697;
pub const WPE_KEY_Macedonia_gje: u32 = 1698;
pub const WPE_KEY_Cyrillic_io: u32 = 1699;
pub const WPE_KEY_Ukrainian_ie: u32 = 1700;
pub const WPE_KEY_Ukranian_je: u32 = 1700;
pub const WPE_KEY_Macedonia_dse: u32 = 1701;
pub const WPE_KEY_Ukrainian_i: u32 = 1702;
pub const WPE_KEY_Ukranian_i: u32 = 1702;
pub const WPE_KEY_Ukrainian_yi: u32 = 1703;
pub const WPE_KEY_Ukranian_yi: u32 = 1703;
pub const WPE_KEY_Cyrillic_je: u32 = 1704;
pub const WPE_KEY_Serbian_je: u32 = 1704;
pub const WPE_KEY_Cyrillic_lje: u32 = 1705;
pub const WPE_KEY_Serbian_lje: u32 = 1705;
pub const WPE_KEY_Cyrillic_nje: u32 = 1706;
pub const WPE_KEY_Serbian_nje: u32 = 1706;
pub const WPE_KEY_Serbian_tshe: u32 = 1707;
pub const WPE_KEY_Macedonia_kje: u32 = 1708;
pub const WPE_KEY_Ukrainian_ghe_with_upturn: u32 = 1709;
pub const WPE_KEY_Byelorussian_shortu: u32 = 1710;
pub const WPE_KEY_Cyrillic_dzhe: u32 = 1711;
pub const WPE_KEY_Serbian_dze: u32 = 1711;
pub const WPE_KEY_numerosign: u32 = 1712;
pub const WPE_KEY_Serbian_DJE: u32 = 1713;
pub const WPE_KEY_Macedonia_GJE: u32 = 1714;
pub const WPE_KEY_Cyrillic_IO: u32 = 1715;
pub const WPE_KEY_Ukrainian_IE: u32 = 1716;
pub const WPE_KEY_Ukranian_JE: u32 = 1716;
pub const WPE_KEY_Macedonia_DSE: u32 = 1717;
pub const WPE_KEY_Ukrainian_I: u32 = 1718;
pub const WPE_KEY_Ukranian_I: u32 = 1718;
pub const WPE_KEY_Ukrainian_YI: u32 = 1719;
pub const WPE_KEY_Ukranian_YI: u32 = 1719;
pub const WPE_KEY_Cyrillic_JE: u32 = 1720;
pub const WPE_KEY_Serbian_JE: u32 = 1720;
pub const WPE_KEY_Cyrillic_LJE: u32 = 1721;
pub const WPE_KEY_Serbian_LJE: u32 = 1721;
pub const WPE_KEY_Cyrillic_NJE: u32 = 1722;
pub const WPE_KEY_Serbian_NJE: u32 = 1722;
pub const WPE_KEY_Serbian_TSHE: u32 = 1723;
pub const WPE_KEY_Macedonia_KJE: u32 = 1724;
pub const WPE_KEY_Ukrainian_GHE_WITH_UPTURN: u32 = 1725;
pub const WPE_KEY_Byelorussian_SHORTU: u32 = 1726;
pub const WPE_KEY_Cyrillic_DZHE: u32 = 1727;
pub const WPE_KEY_Serbian_DZE: u32 = 1727;
pub const WPE_KEY_Cyrillic_yu: u32 = 1728;
pub const WPE_KEY_Cyrillic_a: u32 = 1729;
pub const WPE_KEY_Cyrillic_be: u32 = 1730;
pub const WPE_KEY_Cyrillic_tse: u32 = 1731;
pub const WPE_KEY_Cyrillic_de: u32 = 1732;
pub const WPE_KEY_Cyrillic_ie: u32 = 1733;
pub const WPE_KEY_Cyrillic_ef: u32 = 1734;
pub const WPE_KEY_Cyrillic_ghe: u32 = 1735;
pub const WPE_KEY_Cyrillic_ha: u32 = 1736;
pub const WPE_KEY_Cyrillic_i: u32 = 1737;
pub const WPE_KEY_Cyrillic_shorti: u32 = 1738;
pub const WPE_KEY_Cyrillic_ka: u32 = 1739;
pub const WPE_KEY_Cyrillic_el: u32 = 1740;
pub const WPE_KEY_Cyrillic_em: u32 = 1741;
pub const WPE_KEY_Cyrillic_en: u32 = 1742;
pub const WPE_KEY_Cyrillic_o: u32 = 1743;
pub const WPE_KEY_Cyrillic_pe: u32 = 1744;
pub const WPE_KEY_Cyrillic_ya: u32 = 1745;
pub const WPE_KEY_Cyrillic_er: u32 = 1746;
pub const WPE_KEY_Cyrillic_es: u32 = 1747;
pub const WPE_KEY_Cyrillic_te: u32 = 1748;
pub const WPE_KEY_Cyrillic_u: u32 = 1749;
pub const WPE_KEY_Cyrillic_zhe: u32 = 1750;
pub const WPE_KEY_Cyrillic_ve: u32 = 1751;
pub const WPE_KEY_Cyrillic_softsign: u32 = 1752;
pub const WPE_KEY_Cyrillic_yeru: u32 = 1753;
pub const WPE_KEY_Cyrillic_ze: u32 = 1754;
pub const WPE_KEY_Cyrillic_sha: u32 = 1755;
pub const WPE_KEY_Cyrillic_e: u32 = 1756;
pub const WPE_KEY_Cyrillic_shcha: u32 = 1757;
pub const WPE_KEY_Cyrillic_che: u32 = 1758;
pub const WPE_KEY_Cyrillic_hardsign: u32 = 1759;
pub const WPE_KEY_Cyrillic_YU: u32 = 1760;
pub const WPE_KEY_Cyrillic_A: u32 = 1761;
pub const WPE_KEY_Cyrillic_BE: u32 = 1762;
pub const WPE_KEY_Cyrillic_TSE: u32 = 1763;
pub const WPE_KEY_Cyrillic_DE: u32 = 1764;
pub const WPE_KEY_Cyrillic_IE: u32 = 1765;
pub const WPE_KEY_Cyrillic_EF: u32 = 1766;
pub const WPE_KEY_Cyrillic_GHE: u32 = 1767;
pub const WPE_KEY_Cyrillic_HA: u32 = 1768;
pub const WPE_KEY_Cyrillic_I: u32 = 1769;
pub const WPE_KEY_Cyrillic_SHORTI: u32 = 1770;
pub const WPE_KEY_Cyrillic_KA: u32 = 1771;
pub const WPE_KEY_Cyrillic_EL: u32 = 1772;
pub const WPE_KEY_Cyrillic_EM: u32 = 1773;
pub const WPE_KEY_Cyrillic_EN: u32 = 1774;
pub const WPE_KEY_Cyrillic_O: u32 = 1775;
pub const WPE_KEY_Cyrillic_PE: u32 = 1776;
pub const WPE_KEY_Cyrillic_YA: u32 = 1777;
pub const WPE_KEY_Cyrillic_ER: u32 = 1778;
pub const WPE_KEY_Cyrillic_ES: u32 = 1779;
pub const WPE_KEY_Cyrillic_TE: u32 = 1780;
pub const WPE_KEY_Cyrillic_U: u32 = 1781;
pub const WPE_KEY_Cyrillic_ZHE: u32 = 1782;
pub const WPE_KEY_Cyrillic_VE: u32 = 1783;
pub const WPE_KEY_Cyrillic_SOFTSIGN: u32 = 1784;
pub const WPE_KEY_Cyrillic_YERU: u32 = 1785;
pub const WPE_KEY_Cyrillic_ZE: u32 = 1786;
pub const WPE_KEY_Cyrillic_SHA: u32 = 1787;
pub const WPE_KEY_Cyrillic_E: u32 = 1788;
pub const WPE_KEY_Cyrillic_SHCHA: u32 = 1789;
pub const WPE_KEY_Cyrillic_CHE: u32 = 1790;
pub const WPE_KEY_Cyrillic_HARDSIGN: u32 = 1791;
pub const WPE_KEY_Greek_ALPHAaccent: u32 = 1953;
pub const WPE_KEY_Greek_EPSILONaccent: u32 = 1954;
pub const WPE_KEY_Greek_ETAaccent: u32 = 1955;
pub const WPE_KEY_Greek_IOTAaccent: u32 = 1956;
pub const WPE_KEY_Greek_IOTAdieresis: u32 = 1957;
pub const WPE_KEY_Greek_IOTAdiaeresis: u32 = 1957;
pub const WPE_KEY_Greek_OMICRONaccent: u32 = 1959;
pub const WPE_KEY_Greek_UPSILONaccent: u32 = 1960;
pub const WPE_KEY_Greek_UPSILONdieresis: u32 = 1961;
pub const WPE_KEY_Greek_OMEGAaccent: u32 = 1963;
pub const WPE_KEY_Greek_accentdieresis: u32 = 1966;
pub const WPE_KEY_Greek_horizbar: u32 = 1967;
pub const WPE_KEY_Greek_alphaaccent: u32 = 1969;
pub const WPE_KEY_Greek_epsilonaccent: u32 = 1970;
pub const WPE_KEY_Greek_etaaccent: u32 = 1971;
pub const WPE_KEY_Greek_iotaaccent: u32 = 1972;
pub const WPE_KEY_Greek_iotadieresis: u32 = 1973;
pub const WPE_KEY_Greek_iotaaccentdieresis: u32 = 1974;
pub const WPE_KEY_Greek_omicronaccent: u32 = 1975;
pub const WPE_KEY_Greek_upsilonaccent: u32 = 1976;
pub const WPE_KEY_Greek_upsilondieresis: u32 = 1977;
pub const WPE_KEY_Greek_upsilonaccentdieresis: u32 = 1978;
pub const WPE_KEY_Greek_omegaaccent: u32 = 1979;
pub const WPE_KEY_Greek_ALPHA: u32 = 1985;
pub const WPE_KEY_Greek_BETA: u32 = 1986;
pub const WPE_KEY_Greek_GAMMA: u32 = 1987;
pub const WPE_KEY_Greek_DELTA: u32 = 1988;
pub const WPE_KEY_Greek_EPSILON: u32 = 1989;
pub const WPE_KEY_Greek_ZETA: u32 = 1990;
pub const WPE_KEY_Greek_ETA: u32 = 1991;
pub const WPE_KEY_Greek_THETA: u32 = 1992;
pub const WPE_KEY_Greek_IOTA: u32 = 1993;
pub const WPE_KEY_Greek_KAPPA: u32 = 1994;
pub const WPE_KEY_Greek_LAMDA: u32 = 1995;
pub const WPE_KEY_Greek_LAMBDA: u32 = 1995;
pub const WPE_KEY_Greek_MU: u32 = 1996;
pub const WPE_KEY_Greek_NU: u32 = 1997;
pub const WPE_KEY_Greek_XI: u32 = 1998;
pub const WPE_KEY_Greek_OMICRON: u32 = 1999;
pub const WPE_KEY_Greek_PI: u32 = 2000;
pub const WPE_KEY_Greek_RHO: u32 = 2001;
pub const WPE_KEY_Greek_SIGMA: u32 = 2002;
pub const WPE_KEY_Greek_TAU: u32 = 2004;
pub const WPE_KEY_Greek_UPSILON: u32 = 2005;
pub const WPE_KEY_Greek_PHI: u32 = 2006;
pub const WPE_KEY_Greek_CHI: u32 = 2007;
pub const WPE_KEY_Greek_PSI: u32 = 2008;
pub const WPE_KEY_Greek_OMEGA: u32 = 2009;
pub const WPE_KEY_Greek_alpha: u32 = 2017;
pub const WPE_KEY_Greek_beta: u32 = 2018;
pub const WPE_KEY_Greek_gamma: u32 = 2019;
pub const WPE_KEY_Greek_delta: u32 = 2020;
pub const WPE_KEY_Greek_epsilon: u32 = 2021;
pub const WPE_KEY_Greek_zeta: u32 = 2022;
pub const WPE_KEY_Greek_eta: u32 = 2023;
pub const WPE_KEY_Greek_theta: u32 = 2024;
pub const WPE_KEY_Greek_iota: u32 = 2025;
pub const WPE_KEY_Greek_kappa: u32 = 2026;
pub const WPE_KEY_Greek_lamda: u32 = 2027;
pub const WPE_KEY_Greek_lambda: u32 = 2027;
pub const WPE_KEY_Greek_mu: u32 = 2028;
pub const WPE_KEY_Greek_nu: u32 = 2029;
pub const WPE_KEY_Greek_xi: u32 = 2030;
pub const WPE_KEY_Greek_omicron: u32 = 2031;
pub const WPE_KEY_Greek_pi: u32 = 2032;
pub const WPE_KEY_Greek_rho: u32 = 2033;
pub const WPE_KEY_Greek_sigma: u32 = 2034;
pub const WPE_KEY_Greek_finalsmallsigma: u32 = 2035;
pub const WPE_KEY_Greek_tau: u32 = 2036;
pub const WPE_KEY_Greek_upsilon: u32 = 2037;
pub const WPE_KEY_Greek_phi: u32 = 2038;
pub const WPE_KEY_Greek_chi: u32 = 2039;
pub const WPE_KEY_Greek_psi: u32 = 2040;
pub const WPE_KEY_Greek_omega: u32 = 2041;
pub const WPE_KEY_Greek_switch: u32 = 65406;
pub const WPE_KEY_leftradical: u32 = 2209;
pub const WPE_KEY_topleftradical: u32 = 2210;
pub const WPE_KEY_horizconnector: u32 = 2211;
pub const WPE_KEY_topintegral: u32 = 2212;
pub const WPE_KEY_botintegral: u32 = 2213;
pub const WPE_KEY_vertconnector: u32 = 2214;
pub const WPE_KEY_topleftsqbracket: u32 = 2215;
pub const WPE_KEY_botleftsqbracket: u32 = 2216;
pub const WPE_KEY_toprightsqbracket: u32 = 2217;
pub const WPE_KEY_botrightsqbracket: u32 = 2218;
pub const WPE_KEY_topleftparens: u32 = 2219;
pub const WPE_KEY_botleftparens: u32 = 2220;
pub const WPE_KEY_toprightparens: u32 = 2221;
pub const WPE_KEY_botrightparens: u32 = 2222;
pub const WPE_KEY_leftmiddlecurlybrace: u32 = 2223;
pub const WPE_KEY_rightmiddlecurlybrace: u32 = 2224;
pub const WPE_KEY_topleftsummation: u32 = 2225;
pub const WPE_KEY_botleftsummation: u32 = 2226;
pub const WPE_KEY_topvertsummationconnector: u32 = 2227;
pub const WPE_KEY_botvertsummationconnector: u32 = 2228;
pub const WPE_KEY_toprightsummation: u32 = 2229;
pub const WPE_KEY_botrightsummation: u32 = 2230;
pub const WPE_KEY_rightmiddlesummation: u32 = 2231;
pub const WPE_KEY_lessthanequal: u32 = 2236;
pub const WPE_KEY_notequal: u32 = 2237;
pub const WPE_KEY_greaterthanequal: u32 = 2238;
pub const WPE_KEY_integral: u32 = 2239;
pub const WPE_KEY_therefore: u32 = 2240;
pub const WPE_KEY_variation: u32 = 2241;
pub const WPE_KEY_infinity: u32 = 2242;
pub const WPE_KEY_nabla: u32 = 2245;
pub const WPE_KEY_approximate: u32 = 2248;
pub const WPE_KEY_similarequal: u32 = 2249;
pub const WPE_KEY_ifonlyif: u32 = 2253;
pub const WPE_KEY_implies: u32 = 2254;
pub const WPE_KEY_identical: u32 = 2255;
pub const WPE_KEY_radical: u32 = 2262;
pub const WPE_KEY_includedin: u32 = 2266;
pub const WPE_KEY_includes: u32 = 2267;
pub const WPE_KEY_intersection: u32 = 2268;
pub const WPE_KEY_union: u32 = 2269;
pub const WPE_KEY_logicaland: u32 = 2270;
pub const WPE_KEY_logicalor: u32 = 2271;
pub const WPE_KEY_partialderivative: u32 = 2287;
pub const WPE_KEY_function: u32 = 2294;
pub const WPE_KEY_leftarrow: u32 = 2299;
pub const WPE_KEY_uparrow: u32 = 2300;
pub const WPE_KEY_rightarrow: u32 = 2301;
pub const WPE_KEY_downarrow: u32 = 2302;
pub const WPE_KEY_blank: u32 = 2527;
pub const WPE_KEY_soliddiamond: u32 = 2528;
pub const WPE_KEY_checkerboard: u32 = 2529;
pub const WPE_KEY_ht: u32 = 2530;
pub const WPE_KEY_ff: u32 = 2531;
pub const WPE_KEY_cr: u32 = 2532;
pub const WPE_KEY_lf: u32 = 2533;
pub const WPE_KEY_nl: u32 = 2536;
pub const WPE_KEY_vt: u32 = 2537;
pub const WPE_KEY_lowrightcorner: u32 = 2538;
pub const WPE_KEY_uprightcorner: u32 = 2539;
pub const WPE_KEY_upleftcorner: u32 = 2540;
pub const WPE_KEY_lowleftcorner: u32 = 2541;
pub const WPE_KEY_crossinglines: u32 = 2542;
pub const WPE_KEY_horizlinescan1: u32 = 2543;
pub const WPE_KEY_horizlinescan3: u32 = 2544;
pub const WPE_KEY_horizlinescan5: u32 = 2545;
pub const WPE_KEY_horizlinescan7: u32 = 2546;
pub const WPE_KEY_horizlinescan9: u32 = 2547;
pub const WPE_KEY_leftt: u32 = 2548;
pub const WPE_KEY_rightt: u32 = 2549;
pub const WPE_KEY_bott: u32 = 2550;
pub const WPE_KEY_topt: u32 = 2551;
pub const WPE_KEY_vertbar: u32 = 2552;
pub const WPE_KEY_emspace: u32 = 2721;
pub const WPE_KEY_enspace: u32 = 2722;
pub const WPE_KEY_em3space: u32 = 2723;
pub const WPE_KEY_em4space: u32 = 2724;
pub const WPE_KEY_digitspace: u32 = 2725;
pub const WPE_KEY_punctspace: u32 = 2726;
pub const WPE_KEY_thinspace: u32 = 2727;
pub const WPE_KEY_hairspace: u32 = 2728;
pub const WPE_KEY_emdash: u32 = 2729;
pub const WPE_KEY_endash: u32 = 2730;
pub const WPE_KEY_signifblank: u32 = 2732;
pub const WPE_KEY_ellipsis: u32 = 2734;
pub const WPE_KEY_doubbaselinedot: u32 = 2735;
pub const WPE_KEY_onethird: u32 = 2736;
pub const WPE_KEY_twothirds: u32 = 2737;
pub const WPE_KEY_onefifth: u32 = 2738;
pub const WPE_KEY_twofifths: u32 = 2739;
pub const WPE_KEY_threefifths: u32 = 2740;
pub const WPE_KEY_fourfifths: u32 = 2741;
pub const WPE_KEY_onesixth: u32 = 2742;
pub const WPE_KEY_fivesixths: u32 = 2743;
pub const WPE_KEY_careof: u32 = 2744;
pub const WPE_KEY_figdash: u32 = 2747;
pub const WPE_KEY_leftanglebracket: u32 = 2748;
pub const WPE_KEY_decimalpoint: u32 = 2749;
pub const WPE_KEY_rightanglebracket: u32 = 2750;
pub const WPE_KEY_marker: u32 = 2751;
pub const WPE_KEY_oneeighth: u32 = 2755;
pub const WPE_KEY_threeeighths: u32 = 2756;
pub const WPE_KEY_fiveeighths: u32 = 2757;
pub const WPE_KEY_seveneighths: u32 = 2758;
pub const WPE_KEY_trademark: u32 = 2761;
pub const WPE_KEY_signaturemark: u32 = 2762;
pub const WPE_KEY_trademarkincircle: u32 = 2763;
pub const WPE_KEY_leftopentriangle: u32 = 2764;
pub const WPE_KEY_rightopentriangle: u32 = 2765;
pub const WPE_KEY_emopencircle: u32 = 2766;
pub const WPE_KEY_emopenrectangle: u32 = 2767;
pub const WPE_KEY_leftsinglequotemark: u32 = 2768;
pub const WPE_KEY_rightsinglequotemark: u32 = 2769;
pub const WPE_KEY_leftdoublequotemark: u32 = 2770;
pub const WPE_KEY_rightdoublequotemark: u32 = 2771;
pub const WPE_KEY_prescription: u32 = 2772;
pub const WPE_KEY_permille: u32 = 2773;
pub const WPE_KEY_minutes: u32 = 2774;
pub const WPE_KEY_seconds: u32 = 2775;
pub const WPE_KEY_latincross: u32 = 2777;
pub const WPE_KEY_hexagram: u32 = 2778;
pub const WPE_KEY_filledrectbullet: u32 = 2779;
pub const WPE_KEY_filledlefttribullet: u32 = 2780;
pub const WPE_KEY_filledrighttribullet: u32 = 2781;
pub const WPE_KEY_emfilledcircle: u32 = 2782;
pub const WPE_KEY_emfilledrect: u32 = 2783;
pub const WPE_KEY_enopencircbullet: u32 = 2784;
pub const WPE_KEY_enopensquarebullet: u32 = 2785;
pub const WPE_KEY_openrectbullet: u32 = 2786;
pub const WPE_KEY_opentribulletup: u32 = 2787;
pub const WPE_KEY_opentribulletdown: u32 = 2788;
pub const WPE_KEY_openstar: u32 = 2789;
pub const WPE_KEY_enfilledcircbullet: u32 = 2790;
pub const WPE_KEY_enfilledsqbullet: u32 = 2791;
pub const WPE_KEY_filledtribulletup: u32 = 2792;
pub const WPE_KEY_filledtribulletdown: u32 = 2793;
pub const WPE_KEY_leftpointer: u32 = 2794;
pub const WPE_KEY_rightpointer: u32 = 2795;
pub const WPE_KEY_club: u32 = 2796;
pub const WPE_KEY_diamond: u32 = 2797;
pub const WPE_KEY_heart: u32 = 2798;
pub const WPE_KEY_maltesecross: u32 = 2800;
pub const WPE_KEY_dagger: u32 = 2801;
pub const WPE_KEY_doubledagger: u32 = 2802;
pub const WPE_KEY_checkmark: u32 = 2803;
pub const WPE_KEY_ballotcross: u32 = 2804;
pub const WPE_KEY_musicalsharp: u32 = 2805;
pub const WPE_KEY_musicalflat: u32 = 2806;
pub const WPE_KEY_malesymbol: u32 = 2807;
pub const WPE_KEY_femalesymbol: u32 = 2808;
pub const WPE_KEY_telephone: u32 = 2809;
pub const WPE_KEY_telephonerecorder: u32 = 2810;
pub const WPE_KEY_phonographcopyright: u32 = 2811;
pub const WPE_KEY_caret: u32 = 2812;
pub const WPE_KEY_singlelowquotemark: u32 = 2813;
pub const WPE_KEY_doublelowquotemark: u32 = 2814;
pub const WPE_KEY_cursor: u32 = 2815;
pub const WPE_KEY_leftcaret: u32 = 2979;
pub const WPE_KEY_rightcaret: u32 = 2982;
pub const WPE_KEY_downcaret: u32 = 2984;
pub const WPE_KEY_upcaret: u32 = 2985;
pub const WPE_KEY_overbar: u32 = 3008;
pub const WPE_KEY_downtack: u32 = 3010;
pub const WPE_KEY_upshoe: u32 = 3011;
pub const WPE_KEY_downstile: u32 = 3012;
pub const WPE_KEY_underbar: u32 = 3014;
pub const WPE_KEY_jot: u32 = 3018;
pub const WPE_KEY_quad: u32 = 3020;
pub const WPE_KEY_uptack: u32 = 3022;
pub const WPE_KEY_circle: u32 = 3023;
pub const WPE_KEY_upstile: u32 = 3027;
pub const WPE_KEY_downshoe: u32 = 3030;
pub const WPE_KEY_rightshoe: u32 = 3032;
pub const WPE_KEY_leftshoe: u32 = 3034;
pub const WPE_KEY_lefttack: u32 = 3036;
pub const WPE_KEY_righttack: u32 = 3068;
pub const WPE_KEY_hebrew_doublelowline: u32 = 3295;
pub const WPE_KEY_hebrew_aleph: u32 = 3296;
pub const WPE_KEY_hebrew_bet: u32 = 3297;
pub const WPE_KEY_hebrew_beth: u32 = 3297;
pub const WPE_KEY_hebrew_gimel: u32 = 3298;
pub const WPE_KEY_hebrew_gimmel: u32 = 3298;
pub const WPE_KEY_hebrew_dalet: u32 = 3299;
pub const WPE_KEY_hebrew_daleth: u32 = 3299;
pub const WPE_KEY_hebrew_he: u32 = 3300;
pub const WPE_KEY_hebrew_waw: u32 = 3301;
pub const WPE_KEY_hebrew_zain: u32 = 3302;
pub const WPE_KEY_hebrew_zayin: u32 = 3302;
pub const WPE_KEY_hebrew_chet: u32 = 3303;
pub const WPE_KEY_hebrew_het: u32 = 3303;
pub const WPE_KEY_hebrew_tet: u32 = 3304;
pub const WPE_KEY_hebrew_teth: u32 = 3304;
pub const WPE_KEY_hebrew_yod: u32 = 3305;
pub const WPE_KEY_hebrew_finalkaph: u32 = 3306;
pub const WPE_KEY_hebrew_kaph: u32 = 3307;
pub const WPE_KEY_hebrew_lamed: u32 = 3308;
pub const WPE_KEY_hebrew_finalmem: u32 = 3309;
pub const WPE_KEY_hebrew_mem: u32 = 3310;
pub const WPE_KEY_hebrew_finalnun: u32 = 3311;
pub const WPE_KEY_hebrew_nun: u32 = 3312;
pub const WPE_KEY_hebrew_samech: u32 = 3313;
pub const WPE_KEY_hebrew_samekh: u32 = 3313;
pub const WPE_KEY_hebrew_ayin: u32 = 3314;
pub const WPE_KEY_hebrew_finalpe: u32 = 3315;
pub const WPE_KEY_hebrew_pe: u32 = 3316;
pub const WPE_KEY_hebrew_finalzade: u32 = 3317;
pub const WPE_KEY_hebrew_finalzadi: u32 = 3317;
pub const WPE_KEY_hebrew_zade: u32 = 3318;
pub const WPE_KEY_hebrew_zadi: u32 = 3318;
pub const WPE_KEY_hebrew_qoph: u32 = 3319;
pub const WPE_KEY_hebrew_kuf: u32 = 3319;
pub const WPE_KEY_hebrew_resh: u32 = 3320;
pub const WPE_KEY_hebrew_shin: u32 = 3321;
pub const WPE_KEY_hebrew_taw: u32 = 3322;
pub const WPE_KEY_hebrew_taf: u32 = 3322;
pub const WPE_KEY_Hebrew_switch: u32 = 65406;
pub const WPE_KEY_Thai_kokai: u32 = 3489;
pub const WPE_KEY_Thai_khokhai: u32 = 3490;
pub const WPE_KEY_Thai_khokhuat: u32 = 3491;
pub const WPE_KEY_Thai_khokhwai: u32 = 3492;
pub const WPE_KEY_Thai_khokhon: u32 = 3493;
pub const WPE_KEY_Thai_khorakhang: u32 = 3494;
pub const WPE_KEY_Thai_ngongu: u32 = 3495;
pub const WPE_KEY_Thai_chochan: u32 = 3496;
pub const WPE_KEY_Thai_choching: u32 = 3497;
pub const WPE_KEY_Thai_chochang: u32 = 3498;
pub const WPE_KEY_Thai_soso: u32 = 3499;
pub const WPE_KEY_Thai_chochoe: u32 = 3500;
pub const WPE_KEY_Thai_yoying: u32 = 3501;
pub const WPE_KEY_Thai_dochada: u32 = 3502;
pub const WPE_KEY_Thai_topatak: u32 = 3503;
pub const WPE_KEY_Thai_thothan: u32 = 3504;
pub const WPE_KEY_Thai_thonangmontho: u32 = 3505;
pub const WPE_KEY_Thai_thophuthao: u32 = 3506;
pub const WPE_KEY_Thai_nonen: u32 = 3507;
pub const WPE_KEY_Thai_dodek: u32 = 3508;
pub const WPE_KEY_Thai_totao: u32 = 3509;
pub const WPE_KEY_Thai_thothung: u32 = 3510;
pub const WPE_KEY_Thai_thothahan: u32 = 3511;
pub const WPE_KEY_Thai_thothong: u32 = 3512;
pub const WPE_KEY_Thai_nonu: u32 = 3513;
pub const WPE_KEY_Thai_bobaimai: u32 = 3514;
pub const WPE_KEY_Thai_popla: u32 = 3515;
pub const WPE_KEY_Thai_phophung: u32 = 3516;
pub const WPE_KEY_Thai_fofa: u32 = 3517;
pub const WPE_KEY_Thai_phophan: u32 = 3518;
pub const WPE_KEY_Thai_fofan: u32 = 3519;
pub const WPE_KEY_Thai_phosamphao: u32 = 3520;
pub const WPE_KEY_Thai_moma: u32 = 3521;
pub const WPE_KEY_Thai_yoyak: u32 = 3522;
pub const WPE_KEY_Thai_rorua: u32 = 3523;
pub const WPE_KEY_Thai_ru: u32 = 3524;
pub const WPE_KEY_Thai_loling: u32 = 3525;
pub const WPE_KEY_Thai_lu: u32 = 3526;
pub const WPE_KEY_Thai_wowaen: u32 = 3527;
pub const WPE_KEY_Thai_sosala: u32 = 3528;
pub const WPE_KEY_Thai_sorusi: u32 = 3529;
pub const WPE_KEY_Thai_sosua: u32 = 3530;
pub const WPE_KEY_Thai_hohip: u32 = 3531;
pub const WPE_KEY_Thai_lochula: u32 = 3532;
pub const WPE_KEY_Thai_oang: u32 = 3533;
pub const WPE_KEY_Thai_honokhuk: u32 = 3534;
pub const WPE_KEY_Thai_paiyannoi: u32 = 3535;
pub const WPE_KEY_Thai_saraa: u32 = 3536;
pub const WPE_KEY_Thai_maihanakat: u32 = 3537;
pub const WPE_KEY_Thai_saraaa: u32 = 3538;
pub const WPE_KEY_Thai_saraam: u32 = 3539;
pub const WPE_KEY_Thai_sarai: u32 = 3540;
pub const WPE_KEY_Thai_saraii: u32 = 3541;
pub const WPE_KEY_Thai_saraue: u32 = 3542;
pub const WPE_KEY_Thai_sarauee: u32 = 3543;
pub const WPE_KEY_Thai_sarau: u32 = 3544;
pub const WPE_KEY_Thai_sarauu: u32 = 3545;
pub const WPE_KEY_Thai_phinthu: u32 = 3546;
pub const WPE_KEY_Thai_maihanakat_maitho: u32 = 3550;
pub const WPE_KEY_Thai_baht: u32 = 3551;
pub const WPE_KEY_Thai_sarae: u32 = 3552;
pub const WPE_KEY_Thai_saraae: u32 = 3553;
pub const WPE_KEY_Thai_sarao: u32 = 3554;
pub const WPE_KEY_Thai_saraaimaimuan: u32 = 3555;
pub const WPE_KEY_Thai_saraaimaimalai: u32 = 3556;
pub const WPE_KEY_Thai_lakkhangyao: u32 = 3557;
pub const WPE_KEY_Thai_maiyamok: u32 = 3558;
pub const WPE_KEY_Thai_maitaikhu: u32 = 3559;
pub const WPE_KEY_Thai_maiek: u32 = 3560;
pub const WPE_KEY_Thai_maitho: u32 = 3561;
pub const WPE_KEY_Thai_maitri: u32 = 3562;
pub const WPE_KEY_Thai_maichattawa: u32 = 3563;
pub const WPE_KEY_Thai_thanthakhat: u32 = 3564;
pub const WPE_KEY_Thai_nikhahit: u32 = 3565;
pub const WPE_KEY_Thai_leksun: u32 = 3568;
pub const WPE_KEY_Thai_leknung: u32 = 3569;
pub const WPE_KEY_Thai_leksong: u32 = 3570;
pub const WPE_KEY_Thai_leksam: u32 = 3571;
pub const WPE_KEY_Thai_leksi: u32 = 3572;
pub const WPE_KEY_Thai_lekha: u32 = 3573;
pub const WPE_KEY_Thai_lekhok: u32 = 3574;
pub const WPE_KEY_Thai_lekchet: u32 = 3575;
pub const WPE_KEY_Thai_lekpaet: u32 = 3576;
pub const WPE_KEY_Thai_lekkao: u32 = 3577;
pub const WPE_KEY_Hangul: u32 = 65329;
pub const WPE_KEY_Hangul_Start: u32 = 65330;
pub const WPE_KEY_Hangul_End: u32 = 65331;
pub const WPE_KEY_Hangul_Hanja: u32 = 65332;
pub const WPE_KEY_Hangul_Jamo: u32 = 65333;
pub const WPE_KEY_Hangul_Romaja: u32 = 65334;
pub const WPE_KEY_Hangul_Codeinput: u32 = 65335;
pub const WPE_KEY_Hangul_Jeonja: u32 = 65336;
pub const WPE_KEY_Hangul_Banja: u32 = 65337;
pub const WPE_KEY_Hangul_PreHanja: u32 = 65338;
pub const WPE_KEY_Hangul_PostHanja: u32 = 65339;
pub const WPE_KEY_Hangul_SingleCandidate: u32 = 65340;
pub const WPE_KEY_Hangul_MultipleCandidate: u32 = 65341;
pub const WPE_KEY_Hangul_PreviousCandidate: u32 = 65342;
pub const WPE_KEY_Hangul_Special: u32 = 65343;
pub const WPE_KEY_Hangul_switch: u32 = 65406;
pub const WPE_KEY_Hangul_Kiyeog: u32 = 3745;
pub const WPE_KEY_Hangul_SsangKiyeog: u32 = 3746;
pub const WPE_KEY_Hangul_KiyeogSios: u32 = 3747;
pub const WPE_KEY_Hangul_Nieun: u32 = 3748;
pub const WPE_KEY_Hangul_NieunJieuj: u32 = 3749;
pub const WPE_KEY_Hangul_NieunHieuh: u32 = 3750;
pub const WPE_KEY_Hangul_Dikeud: u32 = 3751;
pub const WPE_KEY_Hangul_SsangDikeud: u32 = 3752;
pub const WPE_KEY_Hangul_Rieul: u32 = 3753;
pub const WPE_KEY_Hangul_RieulKiyeog: u32 = 3754;
pub const WPE_KEY_Hangul_RieulMieum: u32 = 3755;
pub const WPE_KEY_Hangul_RieulPieub: u32 = 3756;
pub const WPE_KEY_Hangul_RieulSios: u32 = 3757;
pub const WPE_KEY_Hangul_RieulTieut: u32 = 3758;
pub const WPE_KEY_Hangul_RieulPhieuf: u32 = 3759;
pub const WPE_KEY_Hangul_RieulHieuh: u32 = 3760;
pub const WPE_KEY_Hangul_Mieum: u32 = 3761;
pub const WPE_KEY_Hangul_Pieub: u32 = 3762;
pub const WPE_KEY_Hangul_SsangPieub: u32 = 3763;
pub const WPE_KEY_Hangul_PieubSios: u32 = 3764;
pub const WPE_KEY_Hangul_Sios: u32 = 3765;
pub const WPE_KEY_Hangul_SsangSios: u32 = 3766;
pub const WPE_KEY_Hangul_Ieung: u32 = 3767;
pub const WPE_KEY_Hangul_Jieuj: u32 = 3768;
pub const WPE_KEY_Hangul_SsangJieuj: u32 = 3769;
pub const WPE_KEY_Hangul_Cieuc: u32 = 3770;
pub const WPE_KEY_Hangul_Khieuq: u32 = 3771;
pub const WPE_KEY_Hangul_Tieut: u32 = 3772;
pub const WPE_KEY_Hangul_Phieuf: u32 = 3773;
pub const WPE_KEY_Hangul_Hieuh: u32 = 3774;
pub const WPE_KEY_Hangul_A: u32 = 3775;
pub const WPE_KEY_Hangul_AE: u32 = 3776;
pub const WPE_KEY_Hangul_YA: u32 = 3777;
pub const WPE_KEY_Hangul_YAE: u32 = 3778;
pub const WPE_KEY_Hangul_EO: u32 = 3779;
pub const WPE_KEY_Hangul_E: u32 = 3780;
pub const WPE_KEY_Hangul_YEO: u32 = 3781;
pub const WPE_KEY_Hangul_YE: u32 = 3782;
pub const WPE_KEY_Hangul_O: u32 = 3783;
pub const WPE_KEY_Hangul_WA: u32 = 3784;
pub const WPE_KEY_Hangul_WAE: u32 = 3785;
pub const WPE_KEY_Hangul_OE: u32 = 3786;
pub const WPE_KEY_Hangul_YO: u32 = 3787;
pub const WPE_KEY_Hangul_U: u32 = 3788;
pub const WPE_KEY_Hangul_WEO: u32 = 3789;
pub const WPE_KEY_Hangul_WE: u32 = 3790;
pub const WPE_KEY_Hangul_WI: u32 = 3791;
pub const WPE_KEY_Hangul_YU: u32 = 3792;
pub const WPE_KEY_Hangul_EU: u32 = 3793;
pub const WPE_KEY_Hangul_YI: u32 = 3794;
pub const WPE_KEY_Hangul_I: u32 = 3795;
pub const WPE_KEY_Hangul_J_Kiyeog: u32 = 3796;
pub const WPE_KEY_Hangul_J_SsangKiyeog: u32 = 3797;
pub const WPE_KEY_Hangul_J_KiyeogSios: u32 = 3798;
pub const WPE_KEY_Hangul_J_Nieun: u32 = 3799;
pub const WPE_KEY_Hangul_J_NieunJieuj: u32 = 3800;
pub const WPE_KEY_Hangul_J_NieunHieuh: u32 = 3801;
pub const WPE_KEY_Hangul_J_Dikeud: u32 = 3802;
pub const WPE_KEY_Hangul_J_Rieul: u32 = 3803;
pub const WPE_KEY_Hangul_J_RieulKiyeog: u32 = 3804;
pub const WPE_KEY_Hangul_J_RieulMieum: u32 = 3805;
pub const WPE_KEY_Hangul_J_RieulPieub: u32 = 3806;
pub const WPE_KEY_Hangul_J_RieulSios: u32 = 3807;
pub const WPE_KEY_Hangul_J_RieulTieut: u32 = 3808;
pub const WPE_KEY_Hangul_J_RieulPhieuf: u32 = 3809;
pub const WPE_KEY_Hangul_J_RieulHieuh: u32 = 3810;
pub const WPE_KEY_Hangul_J_Mieum: u32 = 3811;
pub const WPE_KEY_Hangul_J_Pieub: u32 = 3812;
pub const WPE_KEY_Hangul_J_PieubSios: u32 = 3813;
pub const WPE_KEY_Hangul_J_Sios: u32 = 3814;
pub const WPE_KEY_Hangul_J_SsangSios: u32 = 3815;
pub const WPE_KEY_Hangul_J_Ieung: u32 = 3816;
pub const WPE_KEY_Hangul_J_Jieuj: u32 = 3817;
pub const WPE_KEY_Hangul_J_Cieuc: u32 = 3818;
pub const WPE_KEY_Hangul_J_Khieuq: u32 = 3819;
pub const WPE_KEY_Hangul_J_Tieut: u32 = 3820;
pub const WPE_KEY_Hangul_J_Phieuf: u32 = 3821;
pub const WPE_KEY_Hangul_J_Hieuh: u32 = 3822;
pub const WPE_KEY_Hangul_RieulYeorinHieuh: u32 = 3823;
pub const WPE_KEY_Hangul_SunkyeongeumMieum: u32 = 3824;
pub const WPE_KEY_Hangul_SunkyeongeumPieub: u32 = 3825;
pub const WPE_KEY_Hangul_PanSios: u32 = 3826;
pub const WPE_KEY_Hangul_KkogjiDalrinIeung: u32 = 3827;
pub const WPE_KEY_Hangul_SunkyeongeumPhieuf: u32 = 3828;
pub const WPE_KEY_Hangul_YeorinHieuh: u32 = 3829;
pub const WPE_KEY_Hangul_AraeA: u32 = 3830;
pub const WPE_KEY_Hangul_AraeAE: u32 = 3831;
pub const WPE_KEY_Hangul_J_PanSios: u32 = 3832;
pub const WPE_KEY_Hangul_J_KkogjiDalrinIeung: u32 = 3833;
pub const WPE_KEY_Hangul_J_YeorinHieuh: u32 = 3834;
pub const WPE_KEY_Korean_Won: u32 = 3839;
pub const WPE_KEY_Armenian_ligature_ew: u32 = 16778631;
pub const WPE_KEY_Armenian_full_stop: u32 = 16778633;
pub const WPE_KEY_Armenian_verjaket: u32 = 16778633;
pub const WPE_KEY_Armenian_separation_mark: u32 = 16778589;
pub const WPE_KEY_Armenian_but: u32 = 16778589;
pub const WPE_KEY_Armenian_hyphen: u32 = 16778634;
pub const WPE_KEY_Armenian_yentamna: u32 = 16778634;
pub const WPE_KEY_Armenian_exclam: u32 = 16778588;
pub const WPE_KEY_Armenian_amanak: u32 = 16778588;
pub const WPE_KEY_Armenian_accent: u32 = 16778587;
pub const WPE_KEY_Armenian_shesht: u32 = 16778587;
pub const WPE_KEY_Armenian_question: u32 = 16778590;
pub const WPE_KEY_Armenian_paruyk: u32 = 16778590;
pub const WPE_KEY_Armenian_AYB: u32 = 16778545;
pub const WPE_KEY_Armenian_ayb: u32 = 16778593;
pub const WPE_KEY_Armenian_BEN: u32 = 16778546;
pub const WPE_KEY_Armenian_ben: u32 = 16778594;
pub const WPE_KEY_Armenian_GIM: u32 = 16778547;
pub const WPE_KEY_Armenian_gim: u32 = 16778595;
pub const WPE_KEY_Armenian_DA: u32 = 16778548;
pub const WPE_KEY_Armenian_da: u32 = 16778596;
pub const WPE_KEY_Armenian_YECH: u32 = 16778549;
pub const WPE_KEY_Armenian_yech: u32 = 16778597;
pub const WPE_KEY_Armenian_ZA: u32 = 16778550;
pub const WPE_KEY_Armenian_za: u32 = 16778598;
pub const WPE_KEY_Armenian_E: u32 = 16778551;
pub const WPE_KEY_Armenian_e: u32 = 16778599;
pub const WPE_KEY_Armenian_AT: u32 = 16778552;
pub const WPE_KEY_Armenian_at: u32 = 16778600;
pub const WPE_KEY_Armenian_TO: u32 = 16778553;
pub const WPE_KEY_Armenian_to: u32 = 16778601;
pub const WPE_KEY_Armenian_ZHE: u32 = 16778554;
pub const WPE_KEY_Armenian_zhe: u32 = 16778602;
pub const WPE_KEY_Armenian_INI: u32 = 16778555;
pub const WPE_KEY_Armenian_ini: u32 = 16778603;
pub const WPE_KEY_Armenian_LYUN: u32 = 16778556;
pub const WPE_KEY_Armenian_lyun: u32 = 16778604;
pub const WPE_KEY_Armenian_KHE: u32 = 16778557;
pub const WPE_KEY_Armenian_khe: u32 = 16778605;
pub const WPE_KEY_Armenian_TSA: u32 = 16778558;
pub const WPE_KEY_Armenian_tsa: u32 = 16778606;
pub const WPE_KEY_Armenian_KEN: u32 = 16778559;
pub const WPE_KEY_Armenian_ken: u32 = 16778607;
pub const WPE_KEY_Armenian_HO: u32 = 16778560;
pub const WPE_KEY_Armenian_ho: u32 = 16778608;
pub const WPE_KEY_Armenian_DZA: u32 = 16778561;
pub const WPE_KEY_Armenian_dza: u32 = 16778609;
pub const WPE_KEY_Armenian_GHAT: u32 = 16778562;
pub const WPE_KEY_Armenian_ghat: u32 = 16778610;
pub const WPE_KEY_Armenian_TCHE: u32 = 16778563;
pub const WPE_KEY_Armenian_tche: u32 = 16778611;
pub const WPE_KEY_Armenian_MEN: u32 = 16778564;
pub const WPE_KEY_Armenian_men: u32 = 16778612;
pub const WPE_KEY_Armenian_HI: u32 = 16778565;
pub const WPE_KEY_Armenian_hi: u32 = 16778613;
pub const WPE_KEY_Armenian_NU: u32 = 16778566;
pub const WPE_KEY_Armenian_nu: u32 = 16778614;
pub const WPE_KEY_Armenian_SHA: u32 = 16778567;
pub const WPE_KEY_Armenian_sha: u32 = 16778615;
pub const WPE_KEY_Armenian_VO: u32 = 16778568;
pub const WPE_KEY_Armenian_vo: u32 = 16778616;
pub const WPE_KEY_Armenian_CHA: u32 = 16778569;
pub const WPE_KEY_Armenian_cha: u32 = 16778617;
pub const WPE_KEY_Armenian_PE: u32 = 16778570;
pub const WPE_KEY_Armenian_pe: u32 = 16778618;
pub const WPE_KEY_Armenian_JE: u32 = 16778571;
pub const WPE_KEY_Armenian_je: u32 = 16778619;
pub const WPE_KEY_Armenian_RA: u32 = 16778572;
pub const WPE_KEY_Armenian_ra: u32 = 16778620;
pub const WPE_KEY_Armenian_SE: u32 = 16778573;
pub const WPE_KEY_Armenian_se: u32 = 16778621;
pub const WPE_KEY_Armenian_VEV: u32 = 16778574;
pub const WPE_KEY_Armenian_vev: u32 = 16778622;
pub const WPE_KEY_Armenian_TYUN: u32 = 16778575;
pub const WPE_KEY_Armenian_tyun: u32 = 16778623;
pub const WPE_KEY_Armenian_RE: u32 = 16778576;
pub const WPE_KEY_Armenian_re: u32 = 16778624;
pub const WPE_KEY_Armenian_TSO: u32 = 16778577;
pub const WPE_KEY_Armenian_tso: u32 = 16778625;
pub const WPE_KEY_Armenian_VYUN: u32 = 16778578;
pub const WPE_KEY_Armenian_vyun: u32 = 16778626;
pub const WPE_KEY_Armenian_PYUR: u32 = 16778579;
pub const WPE_KEY_Armenian_pyur: u32 = 16778627;
pub const WPE_KEY_Armenian_KE: u32 = 16778580;
pub const WPE_KEY_Armenian_ke: u32 = 16778628;
pub const WPE_KEY_Armenian_O: u32 = 16778581;
pub const WPE_KEY_Armenian_o: u32 = 16778629;
pub const WPE_KEY_Armenian_FE: u32 = 16778582;
pub const WPE_KEY_Armenian_fe: u32 = 16778630;
pub const WPE_KEY_Armenian_apostrophe: u32 = 16778586;
pub const WPE_KEY_Georgian_an: u32 = 16781520;
pub const WPE_KEY_Georgian_ban: u32 = 16781521;
pub const WPE_KEY_Georgian_gan: u32 = 16781522;
pub const WPE_KEY_Georgian_don: u32 = 16781523;
pub const WPE_KEY_Georgian_en: u32 = 16781524;
pub const WPE_KEY_Georgian_vin: u32 = 16781525;
pub const WPE_KEY_Georgian_zen: u32 = 16781526;
pub const WPE_KEY_Georgian_tan: u32 = 16781527;
pub const WPE_KEY_Georgian_in: u32 = 16781528;
pub const WPE_KEY_Georgian_kan: u32 = 16781529;
pub const WPE_KEY_Georgian_las: u32 = 16781530;
pub const WPE_KEY_Georgian_man: u32 = 16781531;
pub const WPE_KEY_Georgian_nar: u32 = 16781532;
pub const WPE_KEY_Georgian_on: u32 = 16781533;
pub const WPE_KEY_Georgian_par: u32 = 16781534;
pub const WPE_KEY_Georgian_zhar: u32 = 16781535;
pub const WPE_KEY_Georgian_rae: u32 = 16781536;
pub const WPE_KEY_Georgian_san: u32 = 16781537;
pub const WPE_KEY_Georgian_tar: u32 = 16781538;
pub const WPE_KEY_Georgian_un: u32 = 16781539;
pub const WPE_KEY_Georgian_phar: u32 = 16781540;
pub const WPE_KEY_Georgian_khar: u32 = 16781541;
pub const WPE_KEY_Georgian_ghan: u32 = 16781542;
pub const WPE_KEY_Georgian_qar: u32 = 16781543;
pub const WPE_KEY_Georgian_shin: u32 = 16781544;
pub const WPE_KEY_Georgian_chin: u32 = 16781545;
pub const WPE_KEY_Georgian_can: u32 = 16781546;
pub const WPE_KEY_Georgian_jil: u32 = 16781547;
pub const WPE_KEY_Georgian_cil: u32 = 16781548;
pub const WPE_KEY_Georgian_char: u32 = 16781549;
pub const WPE_KEY_Georgian_xan: u32 = 16781550;
pub const WPE_KEY_Georgian_jhan: u32 = 16781551;
pub const WPE_KEY_Georgian_hae: u32 = 16781552;
pub const WPE_KEY_Georgian_he: u32 = 16781553;
pub const WPE_KEY_Georgian_hie: u32 = 16781554;
pub const WPE_KEY_Georgian_we: u32 = 16781555;
pub const WPE_KEY_Georgian_har: u32 = 16781556;
pub const WPE_KEY_Georgian_hoe: u32 = 16781557;
pub const WPE_KEY_Georgian_fi: u32 = 16781558;
pub const WPE_KEY_Xabovedot: u32 = 16785034;
pub const WPE_KEY_Ibreve: u32 = 16777516;
pub const WPE_KEY_Zstroke: u32 = 16777653;
pub const WPE_KEY_Gcaron: u32 = 16777702;
pub const WPE_KEY_Ocaron: u32 = 16777681;
pub const WPE_KEY_Obarred: u32 = 16777631;
pub const WPE_KEY_xabovedot: u32 = 16785035;
pub const WPE_KEY_ibreve: u32 = 16777517;
pub const WPE_KEY_zstroke: u32 = 16777654;
pub const WPE_KEY_gcaron: u32 = 16777703;
pub const WPE_KEY_ocaron: u32 = 16777682;
pub const WPE_KEY_obarred: u32 = 16777845;
pub const WPE_KEY_SCHWA: u32 = 16777615;
pub const WPE_KEY_schwa: u32 = 16777817;
pub const WPE_KEY_EZH: u32 = 16777655;
pub const WPE_KEY_ezh: u32 = 16777874;
pub const WPE_KEY_Lbelowdot: u32 = 16784950;
pub const WPE_KEY_lbelowdot: u32 = 16784951;
pub const WPE_KEY_Abelowdot: u32 = 16785056;
pub const WPE_KEY_abelowdot: u32 = 16785057;
pub const WPE_KEY_Ahook: u32 = 16785058;
pub const WPE_KEY_ahook: u32 = 16785059;
pub const WPE_KEY_Acircumflexacute: u32 = 16785060;
pub const WPE_KEY_acircumflexacute: u32 = 16785061;
pub const WPE_KEY_Acircumflexgrave: u32 = 16785062;
pub const WPE_KEY_acircumflexgrave: u32 = 16785063;
pub const WPE_KEY_Acircumflexhook: u32 = 16785064;
pub const WPE_KEY_acircumflexhook: u32 = 16785065;
pub const WPE_KEY_Acircumflextilde: u32 = 16785066;
pub const WPE_KEY_acircumflextilde: u32 = 16785067;
pub const WPE_KEY_Acircumflexbelowdot: u32 = 16785068;
pub const WPE_KEY_acircumflexbelowdot: u32 = 16785069;
pub const WPE_KEY_Abreveacute: u32 = 16785070;
pub const WPE_KEY_abreveacute: u32 = 16785071;
pub const WPE_KEY_Abrevegrave: u32 = 16785072;
pub const WPE_KEY_abrevegrave: u32 = 16785073;
pub const WPE_KEY_Abrevehook: u32 = 16785074;
pub const WPE_KEY_abrevehook: u32 = 16785075;
pub const WPE_KEY_Abrevetilde: u32 = 16785076;
pub const WPE_KEY_abrevetilde: u32 = 16785077;
pub const WPE_KEY_Abrevebelowdot: u32 = 16785078;
pub const WPE_KEY_abrevebelowdot: u32 = 16785079;
pub const WPE_KEY_Ebelowdot: u32 = 16785080;
pub const WPE_KEY_ebelowdot: u32 = 16785081;
pub const WPE_KEY_Ehook: u32 = 16785082;
pub const WPE_KEY_ehook: u32 = 16785083;
pub const WPE_KEY_Etilde: u32 = 16785084;
pub const WPE_KEY_etilde: u32 = 16785085;
pub const WPE_KEY_Ecircumflexacute: u32 = 16785086;
pub const WPE_KEY_ecircumflexacute: u32 = 16785087;
pub const WPE_KEY_Ecircumflexgrave: u32 = 16785088;
pub const WPE_KEY_ecircumflexgrave: u32 = 16785089;
pub const WPE_KEY_Ecircumflexhook: u32 = 16785090;
pub const WPE_KEY_ecircumflexhook: u32 = 16785091;
pub const WPE_KEY_Ecircumflextilde: u32 = 16785092;
pub const WPE_KEY_ecircumflextilde: u32 = 16785093;
pub const WPE_KEY_Ecircumflexbelowdot: u32 = 16785094;
pub const WPE_KEY_ecircumflexbelowdot: u32 = 16785095;
pub const WPE_KEY_Ihook: u32 = 16785096;
pub const WPE_KEY_ihook: u32 = 16785097;
pub const WPE_KEY_Ibelowdot: u32 = 16785098;
pub const WPE_KEY_ibelowdot: u32 = 16785099;
pub const WPE_KEY_Obelowdot: u32 = 16785100;
pub const WPE_KEY_obelowdot: u32 = 16785101;
pub const WPE_KEY_Ohook: u32 = 16785102;
pub const WPE_KEY_ohook: u32 = 16785103;
pub const WPE_KEY_Ocircumflexacute: u32 = 16785104;
pub const WPE_KEY_ocircumflexacute: u32 = 16785105;
pub const WPE_KEY_Ocircumflexgrave: u32 = 16785106;
pub const WPE_KEY_ocircumflexgrave: u32 = 16785107;
pub const WPE_KEY_Ocircumflexhook: u32 = 16785108;
pub const WPE_KEY_ocircumflexhook: u32 = 16785109;
pub const WPE_KEY_Ocircumflextilde: u32 = 16785110;
pub const WPE_KEY_ocircumflextilde: u32 = 16785111;
pub const WPE_KEY_Ocircumflexbelowdot: u32 = 16785112;
pub const WPE_KEY_ocircumflexbelowdot: u32 = 16785113;
pub const WPE_KEY_Ohornacute: u32 = 16785114;
pub const WPE_KEY_ohornacute: u32 = 16785115;
pub const WPE_KEY_Ohorngrave: u32 = 16785116;
pub const WPE_KEY_ohorngrave: u32 = 16785117;
pub const WPE_KEY_Ohornhook: u32 = 16785118;
pub const WPE_KEY_ohornhook: u32 = 16785119;
pub const WPE_KEY_Ohorntilde: u32 = 16785120;
pub const WPE_KEY_ohorntilde: u32 = 16785121;
pub const WPE_KEY_Ohornbelowdot: u32 = 16785122;
pub const WPE_KEY_ohornbelowdot: u32 = 16785123;
pub const WPE_KEY_Ubelowdot: u32 = 16785124;
pub const WPE_KEY_ubelowdot: u32 = 16785125;
pub const WPE_KEY_Uhook: u32 = 16785126;
pub const WPE_KEY_uhook: u32 = 16785127;
pub const WPE_KEY_Uhornacute: u32 = 16785128;
pub const WPE_KEY_uhornacute: u32 = 16785129;
pub const WPE_KEY_Uhorngrave: u32 = 16785130;
pub const WPE_KEY_uhorngrave: u32 = 16785131;
pub const WPE_KEY_Uhornhook: u32 = 16785132;
pub const WPE_KEY_uhornhook: u32 = 16785133;
pub const WPE_KEY_Uhorntilde: u32 = 16785134;
pub const WPE_KEY_uhorntilde: u32 = 16785135;
pub const WPE_KEY_Uhornbelowdot: u32 = 16785136;
pub const WPE_KEY_uhornbelowdot: u32 = 16785137;
pub const WPE_KEY_Ybelowdot: u32 = 16785140;
pub const WPE_KEY_ybelowdot: u32 = 16785141;
pub const WPE_KEY_Yhook: u32 = 16785142;
pub const WPE_KEY_yhook: u32 = 16785143;
pub const WPE_KEY_Ytilde: u32 = 16785144;
pub const WPE_KEY_ytilde: u32 = 16785145;
pub const WPE_KEY_Ohorn: u32 = 16777632;
pub const WPE_KEY_ohorn: u32 = 16777633;
pub const WPE_KEY_Uhorn: u32 = 16777647;
pub const WPE_KEY_uhorn: u32 = 16777648;
pub const WPE_KEY_EcuSign: u32 = 16785568;
pub const WPE_KEY_ColonSign: u32 = 16785569;
pub const WPE_KEY_CruzeiroSign: u32 = 16785570;
pub const WPE_KEY_FFrancSign: u32 = 16785571;
pub const WPE_KEY_LiraSign: u32 = 16785572;
pub const WPE_KEY_MillSign: u32 = 16785573;
pub const WPE_KEY_NairaSign: u32 = 16785574;
pub const WPE_KEY_PesetaSign: u32 = 16785575;
pub const WPE_KEY_RupeeSign: u32 = 16785576;
pub const WPE_KEY_WonSign: u32 = 16785577;
pub const WPE_KEY_NewSheqelSign: u32 = 16785578;
pub const WPE_KEY_DongSign: u32 = 16785579;
pub const WPE_KEY_EuroSign: u32 = 8364;
pub const WPE_KEY_zerosuperior: u32 = 16785520;
pub const WPE_KEY_foursuperior: u32 = 16785524;
pub const WPE_KEY_fivesuperior: u32 = 16785525;
pub const WPE_KEY_sixsuperior: u32 = 16785526;
pub const WPE_KEY_sevensuperior: u32 = 16785527;
pub const WPE_KEY_eightsuperior: u32 = 16785528;
pub const WPE_KEY_ninesuperior: u32 = 16785529;
pub const WPE_KEY_zerosubscript: u32 = 16785536;
pub const WPE_KEY_onesubscript: u32 = 16785537;
pub const WPE_KEY_twosubscript: u32 = 16785538;
pub const WPE_KEY_threesubscript: u32 = 16785539;
pub const WPE_KEY_foursubscript: u32 = 16785540;
pub const WPE_KEY_fivesubscript: u32 = 16785541;
pub const WPE_KEY_sixsubscript: u32 = 16785542;
pub const WPE_KEY_sevensubscript: u32 = 16785543;
pub const WPE_KEY_eightsubscript: u32 = 16785544;
pub const WPE_KEY_ninesubscript: u32 = 16785545;
pub const WPE_KEY_partdifferential: u32 = 16785922;
pub const WPE_KEY_emptyset: u32 = 16785925;
pub const WPE_KEY_elementof: u32 = 16785928;
pub const WPE_KEY_notelementof: u32 = 16785929;
pub const WPE_KEY_containsas: u32 = 16785931;
pub const WPE_KEY_squareroot: u32 = 16785946;
pub const WPE_KEY_cuberoot: u32 = 16785947;
pub const WPE_KEY_fourthroot: u32 = 16785948;
pub const WPE_KEY_dintegral: u32 = 16785964;
pub const WPE_KEY_tintegral: u32 = 16785965;
pub const WPE_KEY_because: u32 = 16785973;
pub const WPE_KEY_approxeq: u32 = 16785992;
pub const WPE_KEY_notapproxeq: u32 = 16785991;
pub const WPE_KEY_notidentical: u32 = 16786018;
pub const WPE_KEY_stricteq: u32 = 16786019;
pub const WPE_KEY_braille_dot_1: u32 = 65521;
pub const WPE_KEY_braille_dot_2: u32 = 65522;
pub const WPE_KEY_braille_dot_3: u32 = 65523;
pub const WPE_KEY_braille_dot_4: u32 = 65524;
pub const WPE_KEY_braille_dot_5: u32 = 65525;
pub const WPE_KEY_braille_dot_6: u32 = 65526;
pub const WPE_KEY_braille_dot_7: u32 = 65527;
pub const WPE_KEY_braille_dot_8: u32 = 65528;
pub const WPE_KEY_braille_dot_9: u32 = 65529;
pub const WPE_KEY_braille_dot_10: u32 = 65530;
pub const WPE_KEY_braille_blank: u32 = 16787456;
pub const WPE_KEY_braille_dots_1: u32 = 16787457;
pub const WPE_KEY_braille_dots_2: u32 = 16787458;
pub const WPE_KEY_braille_dots_12: u32 = 16787459;
pub const WPE_KEY_braille_dots_3: u32 = 16787460;
pub const WPE_KEY_braille_dots_13: u32 = 16787461;
pub const WPE_KEY_braille_dots_23: u32 = 16787462;
pub const WPE_KEY_braille_dots_123: u32 = 16787463;
pub const WPE_KEY_braille_dots_4: u32 = 16787464;
pub const WPE_KEY_braille_dots_14: u32 = 16787465;
pub const WPE_KEY_braille_dots_24: u32 = 16787466;
pub const WPE_KEY_braille_dots_124: u32 = 16787467;
pub const WPE_KEY_braille_dots_34: u32 = 16787468;
pub const WPE_KEY_braille_dots_134: u32 = 16787469;
pub const WPE_KEY_braille_dots_234: u32 = 16787470;
pub const WPE_KEY_braille_dots_1234: u32 = 16787471;
pub const WPE_KEY_braille_dots_5: u32 = 16787472;
pub const WPE_KEY_braille_dots_15: u32 = 16787473;
pub const WPE_KEY_braille_dots_25: u32 = 16787474;
pub const WPE_KEY_braille_dots_125: u32 = 16787475;
pub const WPE_KEY_braille_dots_35: u32 = 16787476;
pub const WPE_KEY_braille_dots_135: u32 = 16787477;
pub const WPE_KEY_braille_dots_235: u32 = 16787478;
pub const WPE_KEY_braille_dots_1235: u32 = 16787479;
pub const WPE_KEY_braille_dots_45: u32 = 16787480;
pub const WPE_KEY_braille_dots_145: u32 = 16787481;
pub const WPE_KEY_braille_dots_245: u32 = 16787482;
pub const WPE_KEY_braille_dots_1245: u32 = 16787483;
pub const WPE_KEY_braille_dots_345: u32 = 16787484;
pub const WPE_KEY_braille_dots_1345: u32 = 16787485;
pub const WPE_KEY_braille_dots_2345: u32 = 16787486;
pub const WPE_KEY_braille_dots_12345: u32 = 16787487;
pub const WPE_KEY_braille_dots_6: u32 = 16787488;
pub const WPE_KEY_braille_dots_16: u32 = 16787489;
pub const WPE_KEY_braille_dots_26: u32 = 16787490;
pub const WPE_KEY_braille_dots_126: u32 = 16787491;
pub const WPE_KEY_braille_dots_36: u32 = 16787492;
pub const WPE_KEY_braille_dots_136: u32 = 16787493;
pub const WPE_KEY_braille_dots_236: u32 = 16787494;
pub const WPE_KEY_braille_dots_1236: u32 = 16787495;
pub const WPE_KEY_braille_dots_46: u32 = 16787496;
pub const WPE_KEY_braille_dots_146: u32 = 16787497;
pub const WPE_KEY_braille_dots_246: u32 = 16787498;
pub const WPE_KEY_braille_dots_1246: u32 = 16787499;
pub const WPE_KEY_braille_dots_346: u32 = 16787500;
pub const WPE_KEY_braille_dots_1346: u32 = 16787501;
pub const WPE_KEY_braille_dots_2346: u32 = 16787502;
pub const WPE_KEY_braille_dots_12346: u32 = 16787503;
pub const WPE_KEY_braille_dots_56: u32 = 16787504;
pub const WPE_KEY_braille_dots_156: u32 = 16787505;
pub const WPE_KEY_braille_dots_256: u32 = 16787506;
pub const WPE_KEY_braille_dots_1256: u32 = 16787507;
pub const WPE_KEY_braille_dots_356: u32 = 16787508;
pub const WPE_KEY_braille_dots_1356: u32 = 16787509;
pub const WPE_KEY_braille_dots_2356: u32 = 16787510;
pub const WPE_KEY_braille_dots_12356: u32 = 16787511;
pub const WPE_KEY_braille_dots_456: u32 = 16787512;
pub const WPE_KEY_braille_dots_1456: u32 = 16787513;
pub const WPE_KEY_braille_dots_2456: u32 = 16787514;
pub const WPE_KEY_braille_dots_12456: u32 = 16787515;
pub const WPE_KEY_braille_dots_3456: u32 = 16787516;
pub const WPE_KEY_braille_dots_13456: u32 = 16787517;
pub const WPE_KEY_braille_dots_23456: u32 = 16787518;
pub const WPE_KEY_braille_dots_123456: u32 = 16787519;
pub const WPE_KEY_braille_dots_7: u32 = 16787520;
pub const WPE_KEY_braille_dots_17: u32 = 16787521;
pub const WPE_KEY_braille_dots_27: u32 = 16787522;
pub const WPE_KEY_braille_dots_127: u32 = 16787523;
pub const WPE_KEY_braille_dots_37: u32 = 16787524;
pub const WPE_KEY_braille_dots_137: u32 = 16787525;
pub const WPE_KEY_braille_dots_237: u32 = 16787526;
pub const WPE_KEY_braille_dots_1237: u32 = 16787527;
pub const WPE_KEY_braille_dots_47: u32 = 16787528;
pub const WPE_KEY_braille_dots_147: u32 = 16787529;
pub const WPE_KEY_braille_dots_247: u32 = 16787530;
pub const WPE_KEY_braille_dots_1247: u32 = 16787531;
pub const WPE_KEY_braille_dots_347: u32 = 16787532;
pub const WPE_KEY_braille_dots_1347: u32 = 16787533;
pub const WPE_KEY_braille_dots_2347: u32 = 16787534;
pub const WPE_KEY_braille_dots_12347: u32 = 16787535;
pub const WPE_KEY_braille_dots_57: u32 = 16787536;
pub const WPE_KEY_braille_dots_157: u32 = 16787537;
pub const WPE_KEY_braille_dots_257: u32 = 16787538;
pub const WPE_KEY_braille_dots_1257: u32 = 16787539;
pub const WPE_KEY_braille_dots_357: u32 = 16787540;
pub const WPE_KEY_braille_dots_1357: u32 = 16787541;
pub const WPE_KEY_braille_dots_2357: u32 = 16787542;
pub const WPE_KEY_braille_dots_12357: u32 = 16787543;
pub const WPE_KEY_braille_dots_457: u32 = 16787544;
pub const WPE_KEY_braille_dots_1457: u32 = 16787545;
pub const WPE_KEY_braille_dots_2457: u32 = 16787546;
pub const WPE_KEY_braille_dots_12457: u32 = 16787547;
pub const WPE_KEY_braille_dots_3457: u32 = 16787548;
pub const WPE_KEY_braille_dots_13457: u32 = 16787549;
pub const WPE_KEY_braille_dots_23457: u32 = 16787550;
pub const WPE_KEY_braille_dots_123457: u32 = 16787551;
pub const WPE_KEY_braille_dots_67: u32 = 16787552;
pub const WPE_KEY_braille_dots_167: u32 = 16787553;
pub const WPE_KEY_braille_dots_267: u32 = 16787554;
pub const WPE_KEY_braille_dots_1267: u32 = 16787555;
pub const WPE_KEY_braille_dots_367: u32 = 16787556;
pub const WPE_KEY_braille_dots_1367: u32 = 16787557;
pub const WPE_KEY_braille_dots_2367: u32 = 16787558;
pub const WPE_KEY_braille_dots_12367: u32 = 16787559;
pub const WPE_KEY_braille_dots_467: u32 = 16787560;
pub const WPE_KEY_braille_dots_1467: u32 = 16787561;
pub const WPE_KEY_braille_dots_2467: u32 = 16787562;
pub const WPE_KEY_braille_dots_12467: u32 = 16787563;
pub const WPE_KEY_braille_dots_3467: u32 = 16787564;
pub const WPE_KEY_braille_dots_13467: u32 = 16787565;
pub const WPE_KEY_braille_dots_23467: u32 = 16787566;
pub const WPE_KEY_braille_dots_123467: u32 = 16787567;
pub const WPE_KEY_braille_dots_567: u32 = 16787568;
pub const WPE_KEY_braille_dots_1567: u32 = 16787569;
pub const WPE_KEY_braille_dots_2567: u32 = 16787570;
pub const WPE_KEY_braille_dots_12567: u32 = 16787571;
pub const WPE_KEY_braille_dots_3567: u32 = 16787572;
pub const WPE_KEY_braille_dots_13567: u32 = 16787573;
pub const WPE_KEY_braille_dots_23567: u32 = 16787574;
pub const WPE_KEY_braille_dots_123567: u32 = 16787575;
pub const WPE_KEY_braille_dots_4567: u32 = 16787576;
pub const WPE_KEY_braille_dots_14567: u32 = 16787577;
pub const WPE_KEY_braille_dots_24567: u32 = 16787578;
pub const WPE_KEY_braille_dots_124567: u32 = 16787579;
pub const WPE_KEY_braille_dots_34567: u32 = 16787580;
pub const WPE_KEY_braille_dots_134567: u32 = 16787581;
pub const WPE_KEY_braille_dots_234567: u32 = 16787582;
pub const WPE_KEY_braille_dots_1234567: u32 = 16787583;
pub const WPE_KEY_braille_dots_8: u32 = 16787584;
pub const WPE_KEY_braille_dots_18: u32 = 16787585;
pub const WPE_KEY_braille_dots_28: u32 = 16787586;
pub const WPE_KEY_braille_dots_128: u32 = 16787587;
pub const WPE_KEY_braille_dots_38: u32 = 16787588;
pub const WPE_KEY_braille_dots_138: u32 = 16787589;
pub const WPE_KEY_braille_dots_238: u32 = 16787590;
pub const WPE_KEY_braille_dots_1238: u32 = 16787591;
pub const WPE_KEY_braille_dots_48: u32 = 16787592;
pub const WPE_KEY_braille_dots_148: u32 = 16787593;
pub const WPE_KEY_braille_dots_248: u32 = 16787594;
pub const WPE_KEY_braille_dots_1248: u32 = 16787595;
pub const WPE_KEY_braille_dots_348: u32 = 16787596;
pub const WPE_KEY_braille_dots_1348: u32 = 16787597;
pub const WPE_KEY_braille_dots_2348: u32 = 16787598;
pub const WPE_KEY_braille_dots_12348: u32 = 16787599;
pub const WPE_KEY_braille_dots_58: u32 = 16787600;
pub const WPE_KEY_braille_dots_158: u32 = 16787601;
pub const WPE_KEY_braille_dots_258: u32 = 16787602;
pub const WPE_KEY_braille_dots_1258: u32 = 16787603;
pub const WPE_KEY_braille_dots_358: u32 = 16787604;
pub const WPE_KEY_braille_dots_1358: u32 = 16787605;
pub const WPE_KEY_braille_dots_2358: u32 = 16787606;
pub const WPE_KEY_braille_dots_12358: u32 = 16787607;
pub const WPE_KEY_braille_dots_458: u32 = 16787608;
pub const WPE_KEY_braille_dots_1458: u32 = 16787609;
pub const WPE_KEY_braille_dots_2458: u32 = 16787610;
pub const WPE_KEY_braille_dots_12458: u32 = 16787611;
pub const WPE_KEY_braille_dots_3458: u32 = 16787612;
pub const WPE_KEY_braille_dots_13458: u32 = 16787613;
pub const WPE_KEY_braille_dots_23458: u32 = 16787614;
pub const WPE_KEY_braille_dots_123458: u32 = 16787615;
pub const WPE_KEY_braille_dots_68: u32 = 16787616;
pub const WPE_KEY_braille_dots_168: u32 = 16787617;
pub const WPE_KEY_braille_dots_268: u32 = 16787618;
pub const WPE_KEY_braille_dots_1268: u32 = 16787619;
pub const WPE_KEY_braille_dots_368: u32 = 16787620;
pub const WPE_KEY_braille_dots_1368: u32 = 16787621;
pub const WPE_KEY_braille_dots_2368: u32 = 16787622;
pub const WPE_KEY_braille_dots_12368: u32 = 16787623;
pub const WPE_KEY_braille_dots_468: u32 = 16787624;
pub const WPE_KEY_braille_dots_1468: u32 = 16787625;
pub const WPE_KEY_braille_dots_2468: u32 = 16787626;
pub const WPE_KEY_braille_dots_12468: u32 = 16787627;
pub const WPE_KEY_braille_dots_3468: u32 = 16787628;
pub const WPE_KEY_braille_dots_13468: u32 = 16787629;
pub const WPE_KEY_braille_dots_23468: u32 = 16787630;
pub const WPE_KEY_braille_dots_123468: u32 = 16787631;
pub const WPE_KEY_braille_dots_568: u32 = 16787632;
pub const WPE_KEY_braille_dots_1568: u32 = 16787633;
pub const WPE_KEY_braille_dots_2568: u32 = 16787634;
pub const WPE_KEY_braille_dots_12568: u32 = 16787635;
pub const WPE_KEY_braille_dots_3568: u32 = 16787636;
pub const WPE_KEY_braille_dots_13568: u32 = 16787637;
pub const WPE_KEY_braille_dots_23568: u32 = 16787638;
pub const WPE_KEY_braille_dots_123568: u32 = 16787639;
pub const WPE_KEY_braille_dots_4568: u32 = 16787640;
pub const WPE_KEY_braille_dots_14568: u32 = 16787641;
pub const WPE_KEY_braille_dots_24568: u32 = 16787642;
pub const WPE_KEY_braille_dots_124568: u32 = 16787643;
pub const WPE_KEY_braille_dots_34568: u32 = 16787644;
pub const WPE_KEY_braille_dots_134568: u32 = 16787645;
pub const WPE_KEY_braille_dots_234568: u32 = 16787646;
pub const WPE_KEY_braille_dots_1234568: u32 = 16787647;
pub const WPE_KEY_braille_dots_78: u32 = 16787648;
pub const WPE_KEY_braille_dots_178: u32 = 16787649;
pub const WPE_KEY_braille_dots_278: u32 = 16787650;
pub const WPE_KEY_braille_dots_1278: u32 = 16787651;
pub const WPE_KEY_braille_dots_378: u32 = 16787652;
pub const WPE_KEY_braille_dots_1378: u32 = 16787653;
pub const WPE_KEY_braille_dots_2378: u32 = 16787654;
pub const WPE_KEY_braille_dots_12378: u32 = 16787655;
pub const WPE_KEY_braille_dots_478: u32 = 16787656;
pub const WPE_KEY_braille_dots_1478: u32 = 16787657;
pub const WPE_KEY_braille_dots_2478: u32 = 16787658;
pub const WPE_KEY_braille_dots_12478: u32 = 16787659;
pub const WPE_KEY_braille_dots_3478: u32 = 16787660;
pub const WPE_KEY_braille_dots_13478: u32 = 16787661;
pub const WPE_KEY_braille_dots_23478: u32 = 16787662;
pub const WPE_KEY_braille_dots_123478: u32 = 16787663;
pub const WPE_KEY_braille_dots_578: u32 = 16787664;
pub const WPE_KEY_braille_dots_1578: u32 = 16787665;
pub const WPE_KEY_braille_dots_2578: u32 = 16787666;
pub const WPE_KEY_braille_dots_12578: u32 = 16787667;
pub const WPE_KEY_braille_dots_3578: u32 = 16787668;
pub const WPE_KEY_braille_dots_13578: u32 = 16787669;
pub const WPE_KEY_braille_dots_23578: u32 = 16787670;
pub const WPE_KEY_braille_dots_123578: u32 = 16787671;
pub const WPE_KEY_braille_dots_4578: u32 = 16787672;
pub const WPE_KEY_braille_dots_14578: u32 = 16787673;
pub const WPE_KEY_braille_dots_24578: u32 = 16787674;
pub const WPE_KEY_braille_dots_124578: u32 = 16787675;
pub const WPE_KEY_braille_dots_34578: u32 = 16787676;
pub const WPE_KEY_braille_dots_134578: u32 = 16787677;
pub const WPE_KEY_braille_dots_234578: u32 = 16787678;
pub const WPE_KEY_braille_dots_1234578: u32 = 16787679;
pub const WPE_KEY_braille_dots_678: u32 = 16787680;
pub const WPE_KEY_braille_dots_1678: u32 = 16787681;
pub const WPE_KEY_braille_dots_2678: u32 = 16787682;
pub const WPE_KEY_braille_dots_12678: u32 = 16787683;
pub const WPE_KEY_braille_dots_3678: u32 = 16787684;
pub const WPE_KEY_braille_dots_13678: u32 = 16787685;
pub const WPE_KEY_braille_dots_23678: u32 = 16787686;
pub const WPE_KEY_braille_dots_123678: u32 = 16787687;
pub const WPE_KEY_braille_dots_4678: u32 = 16787688;
pub const WPE_KEY_braille_dots_14678: u32 = 16787689;
pub const WPE_KEY_braille_dots_24678: u32 = 16787690;
pub const WPE_KEY_braille_dots_124678: u32 = 16787691;
pub const WPE_KEY_braille_dots_34678: u32 = 16787692;
pub const WPE_KEY_braille_dots_134678: u32 = 16787693;
pub const WPE_KEY_braille_dots_234678: u32 = 16787694;
pub const WPE_KEY_braille_dots_1234678: u32 = 16787695;
pub const WPE_KEY_braille_dots_5678: u32 = 16787696;
pub const WPE_KEY_braille_dots_15678: u32 = 16787697;
pub const WPE_KEY_braille_dots_25678: u32 = 16787698;
pub const WPE_KEY_braille_dots_125678: u32 = 16787699;
pub const WPE_KEY_braille_dots_35678: u32 = 16787700;
pub const WPE_KEY_braille_dots_135678: u32 = 16787701;
pub const WPE_KEY_braille_dots_235678: u32 = 16787702;
pub const WPE_KEY_braille_dots_1235678: u32 = 16787703;
pub const WPE_KEY_braille_dots_45678: u32 = 16787704;
pub const WPE_KEY_braille_dots_145678: u32 = 16787705;
pub const WPE_KEY_braille_dots_245678: u32 = 16787706;
pub const WPE_KEY_braille_dots_1245678: u32 = 16787707;
pub const WPE_KEY_braille_dots_345678: u32 = 16787708;
pub const WPE_KEY_braille_dots_1345678: u32 = 16787709;
pub const WPE_KEY_braille_dots_2345678: u32 = 16787710;
pub const WPE_KEY_braille_dots_12345678: u32 = 16787711;
pub const WPE_KEY_Sinh_ng: u32 = 16780674;
pub const WPE_KEY_Sinh_h2: u32 = 16780675;
pub const WPE_KEY_Sinh_a: u32 = 16780677;
pub const WPE_KEY_Sinh_aa: u32 = 16780678;
pub const WPE_KEY_Sinh_ae: u32 = 16780679;
pub const WPE_KEY_Sinh_aee: u32 = 16780680;
pub const WPE_KEY_Sinh_i: u32 = 16780681;
pub const WPE_KEY_Sinh_ii: u32 = 16780682;
pub const WPE_KEY_Sinh_u: u32 = 16780683;
pub const WPE_KEY_Sinh_uu: u32 = 16780684;
pub const WPE_KEY_Sinh_ri: u32 = 16780685;
pub const WPE_KEY_Sinh_rii: u32 = 16780686;
pub const WPE_KEY_Sinh_lu: u32 = 16780687;
pub const WPE_KEY_Sinh_luu: u32 = 16780688;
pub const WPE_KEY_Sinh_e: u32 = 16780689;
pub const WPE_KEY_Sinh_ee: u32 = 16780690;
pub const WPE_KEY_Sinh_ai: u32 = 16780691;
pub const WPE_KEY_Sinh_o: u32 = 16780692;
pub const WPE_KEY_Sinh_oo: u32 = 16780693;
pub const WPE_KEY_Sinh_au: u32 = 16780694;
pub const WPE_KEY_Sinh_ka: u32 = 16780698;
pub const WPE_KEY_Sinh_kha: u32 = 16780699;
pub const WPE_KEY_Sinh_ga: u32 = 16780700;
pub const WPE_KEY_Sinh_gha: u32 = 16780701;
pub const WPE_KEY_Sinh_ng2: u32 = 16780702;
pub const WPE_KEY_Sinh_nga: u32 = 16780703;
pub const WPE_KEY_Sinh_ca: u32 = 16780704;
pub const WPE_KEY_Sinh_cha: u32 = 16780705;
pub const WPE_KEY_Sinh_ja: u32 = 16780706;
pub const WPE_KEY_Sinh_jha: u32 = 16780707;
pub const WPE_KEY_Sinh_nya: u32 = 16780708;
pub const WPE_KEY_Sinh_jnya: u32 = 16780709;
pub const WPE_KEY_Sinh_nja: u32 = 16780710;
pub const WPE_KEY_Sinh_tta: u32 = 16780711;
pub const WPE_KEY_Sinh_ttha: u32 = 16780712;
pub const WPE_KEY_Sinh_dda: u32 = 16780713;
pub const WPE_KEY_Sinh_ddha: u32 = 16780714;
pub const WPE_KEY_Sinh_nna: u32 = 16780715;
pub const WPE_KEY_Sinh_ndda: u32 = 16780716;
pub const WPE_KEY_Sinh_tha: u32 = 16780717;
pub const WPE_KEY_Sinh_thha: u32 = 16780718;
pub const WPE_KEY_Sinh_dha: u32 = 16780719;
pub const WPE_KEY_Sinh_dhha: u32 = 16780720;
pub const WPE_KEY_Sinh_na: u32 = 16780721;
pub const WPE_KEY_Sinh_ndha: u32 = 16780723;
pub const WPE_KEY_Sinh_pa: u32 = 16780724;
pub const WPE_KEY_Sinh_pha: u32 = 16780725;
pub const WPE_KEY_Sinh_ba: u32 = 16780726;
pub const WPE_KEY_Sinh_bha: u32 = 16780727;
pub const WPE_KEY_Sinh_ma: u32 = 16780728;
pub const WPE_KEY_Sinh_mba: u32 = 16780729;
pub const WPE_KEY_Sinh_ya: u32 = 16780730;
pub const WPE_KEY_Sinh_ra: u32 = 16780731;
pub const WPE_KEY_Sinh_la: u32 = 16780733;
pub const WPE_KEY_Sinh_va: u32 = 16780736;
pub const WPE_KEY_Sinh_sha: u32 = 16780737;
pub const WPE_KEY_Sinh_ssha: u32 = 16780738;
pub const WPE_KEY_Sinh_sa: u32 = 16780739;
pub const WPE_KEY_Sinh_ha: u32 = 16780740;
pub const WPE_KEY_Sinh_lla: u32 = 16780741;
pub const WPE_KEY_Sinh_fa: u32 = 16780742;
pub const WPE_KEY_Sinh_al: u32 = 16780746;
pub const WPE_KEY_Sinh_aa2: u32 = 16780751;
pub const WPE_KEY_Sinh_ae2: u32 = 16780752;
pub const WPE_KEY_Sinh_aee2: u32 = 16780753;
pub const WPE_KEY_Sinh_i2: u32 = 16780754;
pub const WPE_KEY_Sinh_ii2: u32 = 16780755;
pub const WPE_KEY_Sinh_u2: u32 = 16780756;
pub const WPE_KEY_Sinh_uu2: u32 = 16780758;
pub const WPE_KEY_Sinh_ru2: u32 = 16780760;
pub const WPE_KEY_Sinh_e2: u32 = 16780761;
pub const WPE_KEY_Sinh_ee2: u32 = 16780762;
pub const WPE_KEY_Sinh_ai2: u32 = 16780763;
pub const WPE_KEY_Sinh_o2: u32 = 16780764;
pub const WPE_KEY_Sinh_oo2: u32 = 16780765;
pub const WPE_KEY_Sinh_au2: u32 = 16780766;
pub const WPE_KEY_Sinh_lu2: u32 = 16780767;
pub const WPE_KEY_Sinh_ruu2: u32 = 16780786;
pub const WPE_KEY_Sinh_luu2: u32 = 16780787;
pub const WPE_KEY_Sinh_kunddaliya: u32 = 16780788;
pub const WPE_KEY_ModeLock: u32 = 269025025;
pub const WPE_KEY_MonBrightnessUp: u32 = 269025026;
pub const WPE_KEY_MonBrightnessDown: u32 = 269025027;
pub const WPE_KEY_KbdLightOnOff: u32 = 269025028;
pub const WPE_KEY_KbdBrightnessUp: u32 = 269025029;
pub const WPE_KEY_KbdBrightnessDown: u32 = 269025030;
pub const WPE_KEY_Standby: u32 = 269025040;
pub const WPE_KEY_AudioLowerVolume: u32 = 269025041;
pub const WPE_KEY_AudioMute: u32 = 269025042;
pub const WPE_KEY_AudioRaiseVolume: u32 = 269025043;
pub const WPE_KEY_AudioPlay: u32 = 269025044;
pub const WPE_KEY_AudioStop: u32 = 269025045;
pub const WPE_KEY_AudioPrev: u32 = 269025046;
pub const WPE_KEY_AudioNext: u32 = 269025047;
pub const WPE_KEY_HomePage: u32 = 269025048;
pub const WPE_KEY_Mail: u32 = 269025049;
pub const WPE_KEY_Start: u32 = 269025050;
pub const WPE_KEY_Search: u32 = 269025051;
pub const WPE_KEY_AudioRecord: u32 = 269025052;
pub const WPE_KEY_Calculator: u32 = 269025053;
pub const WPE_KEY_Memo: u32 = 269025054;
pub const WPE_KEY_ToDoList: u32 = 269025055;
pub const WPE_KEY_Calendar: u32 = 269025056;
pub const WPE_KEY_PowerDown: u32 = 269025057;
pub const WPE_KEY_ContrastAdjust: u32 = 269025058;
pub const WPE_KEY_RockerUp: u32 = 269025059;
pub const WPE_KEY_RockerDown: u32 = 269025060;
pub const WPE_KEY_RockerEnter: u32 = 269025061;
pub const WPE_KEY_Back: u32 = 269025062;
pub const WPE_KEY_Forward: u32 = 269025063;
pub const WPE_KEY_Stop: u32 = 269025064;
pub const WPE_KEY_Refresh: u32 = 269025065;
pub const WPE_KEY_PowerOff: u32 = 269025066;
pub const WPE_KEY_WakeUp: u32 = 269025067;
pub const WPE_KEY_Eject: u32 = 269025068;
pub const WPE_KEY_ScreenSaver: u32 = 269025069;
pub const WPE_KEY_WWW: u32 = 269025070;
pub const WPE_KEY_Sleep: u32 = 269025071;
pub const WPE_KEY_Favorites: u32 = 269025072;
pub const WPE_KEY_AudioPause: u32 = 269025073;
pub const WPE_KEY_AudioMedia: u32 = 269025074;
pub const WPE_KEY_MyComputer: u32 = 269025075;
pub const WPE_KEY_VendorHome: u32 = 269025076;
pub const WPE_KEY_LightBulb: u32 = 269025077;
pub const WPE_KEY_Shop: u32 = 269025078;
pub const WPE_KEY_History: u32 = 269025079;
pub const WPE_KEY_OpenURL: u32 = 269025080;
pub const WPE_KEY_AddFavorite: u32 = 269025081;
pub const WPE_KEY_HotLinks: u32 = 269025082;
pub const WPE_KEY_BrightnessAdjust: u32 = 269025083;
pub const WPE_KEY_Finance: u32 = 269025084;
pub const WPE_KEY_Community: u32 = 269025085;
pub const WPE_KEY_AudioRewind: u32 = 269025086;
pub const WPE_KEY_BackForward: u32 = 269025087;
pub const WPE_KEY_Launch0: u32 = 269025088;
pub const WPE_KEY_Launch1: u32 = 269025089;
pub const WPE_KEY_Launch2: u32 = 269025090;
pub const WPE_KEY_Launch3: u32 = 269025091;
pub const WPE_KEY_Launch4: u32 = 269025092;
pub const WPE_KEY_Launch5: u32 = 269025093;
pub const WPE_KEY_Launch6: u32 = 269025094;
pub const WPE_KEY_Launch7: u32 = 269025095;
pub const WPE_KEY_Launch8: u32 = 269025096;
pub const WPE_KEY_Launch9: u32 = 269025097;
pub const WPE_KEY_LaunchA: u32 = 269025098;
pub const WPE_KEY_LaunchB: u32 = 269025099;
pub const WPE_KEY_LaunchC: u32 = 269025100;
pub const WPE_KEY_LaunchD: u32 = 269025101;
pub const WPE_KEY_LaunchE: u32 = 269025102;
pub const WPE_KEY_LaunchF: u32 = 269025103;
pub const WPE_KEY_ApplicationLeft: u32 = 269025104;
pub const WPE_KEY_ApplicationRight: u32 = 269025105;
pub const WPE_KEY_Book: u32 = 269025106;
pub const WPE_KEY_CD: u32 = 269025107;
pub const WPE_KEY_WindowClear: u32 = 269025109;
pub const WPE_KEY_Close: u32 = 269025110;
pub const WPE_KEY_Copy: u32 = 269025111;
pub const WPE_KEY_Cut: u32 = 269025112;
pub const WPE_KEY_Display: u32 = 269025113;
pub const WPE_KEY_DOS: u32 = 269025114;
pub const WPE_KEY_Documents: u32 = 269025115;
pub const WPE_KEY_Excel: u32 = 269025116;
pub const WPE_KEY_Explorer: u32 = 269025117;
pub const WPE_KEY_Game: u32 = 269025118;
pub const WPE_KEY_Go: u32 = 269025119;
pub const WPE_KEY_iTouch: u32 = 269025120;
pub const WPE_KEY_LogOff: u32 = 269025121;
pub const WPE_KEY_Market: u32 = 269025122;
pub const WPE_KEY_Meeting: u32 = 269025123;
pub const WPE_KEY_MenuKB: u32 = 269025125;
pub const WPE_KEY_MenuPB: u32 = 269025126;
pub const WPE_KEY_MySites: u32 = 269025127;
pub const WPE_KEY_New: u32 = 269025128;
pub const WPE_KEY_News: u32 = 269025129;
pub const WPE_KEY_OfficeHome: u32 = 269025130;
pub const WPE_KEY_Open: u32 = 269025131;
pub const WPE_KEY_Option: u32 = 269025132;
pub const WPE_KEY_Paste: u32 = 269025133;
pub const WPE_KEY_Phone: u32 = 269025134;
pub const WPE_KEY_Reply: u32 = 269025138;
pub const WPE_KEY_Reload: u32 = 269025139;
pub const WPE_KEY_RotateWindows: u32 = 269025140;
pub const WPE_KEY_RotationPB: u32 = 269025141;
pub const WPE_KEY_RotationKB: u32 = 269025142;
pub const WPE_KEY_Save: u32 = 269025143;
pub const WPE_KEY_ScrollUp: u32 = 269025144;
pub const WPE_KEY_ScrollDown: u32 = 269025145;
pub const WPE_KEY_ScrollClick: u32 = 269025146;
pub const WPE_KEY_Send: u32 = 269025147;
pub const WPE_KEY_Spell: u32 = 269025148;
pub const WPE_KEY_SplitScreen: u32 = 269025149;
pub const WPE_KEY_Support: u32 = 269025150;
pub const WPE_KEY_TaskPane: u32 = 269025151;
pub const WPE_KEY_Terminal: u32 = 269025152;
pub const WPE_KEY_Tools: u32 = 269025153;
pub const WPE_KEY_Travel: u32 = 269025154;
pub const WPE_KEY_UserPB: u32 = 269025156;
pub const WPE_KEY_User1KB: u32 = 269025157;
pub const WPE_KEY_User2KB: u32 = 269025158;
pub const WPE_KEY_Video: u32 = 269025159;
pub const WPE_KEY_WheelButton: u32 = 269025160;
pub const WPE_KEY_Word: u32 = 269025161;
pub const WPE_KEY_Xfer: u32 = 269025162;
pub const WPE_KEY_ZoomIn: u32 = 269025163;
pub const WPE_KEY_ZoomOut: u32 = 269025164;
pub const WPE_KEY_Away: u32 = 269025165;
pub const WPE_KEY_Messenger: u32 = 269025166;
pub const WPE_KEY_WebCam: u32 = 269025167;
pub const WPE_KEY_MailForward: u32 = 269025168;
pub const WPE_KEY_Pictures: u32 = 269025169;
pub const WPE_KEY_Music: u32 = 269025170;
pub const WPE_KEY_Battery: u32 = 269025171;
pub const WPE_KEY_Bluetooth: u32 = 269025172;
pub const WPE_KEY_WLAN: u32 = 269025173;
pub const WPE_KEY_UWB: u32 = 269025174;
pub const WPE_KEY_AudioForward: u32 = 269025175;
pub const WPE_KEY_AudioRepeat: u32 = 269025176;
pub const WPE_KEY_AudioRandomPlay: u32 = 269025177;
pub const WPE_KEY_Subtitle: u32 = 269025178;
pub const WPE_KEY_AudioCycleTrack: u32 = 269025179;
pub const WPE_KEY_CycleAngle: u32 = 269025180;
pub const WPE_KEY_FrameBack: u32 = 269025181;
pub const WPE_KEY_FrameForward: u32 = 269025182;
pub const WPE_KEY_Time: u32 = 269025183;
pub const WPE_KEY_SelectButton: u32 = 269025184;
pub const WPE_KEY_View: u32 = 269025185;
pub const WPE_KEY_TopMenu: u32 = 269025186;
pub const WPE_KEY_Red: u32 = 269025187;
pub const WPE_KEY_Green: u32 = 269025188;
pub const WPE_KEY_Yellow: u32 = 269025189;
pub const WPE_KEY_Blue: u32 = 269025190;
pub const WPE_KEY_Suspend: u32 = 269025191;
pub const WPE_KEY_Hibernate: u32 = 269025192;
pub const WPE_KEY_TouchpadToggle: u32 = 269025193;
pub const WPE_KEY_TouchpadOn: u32 = 269025200;
pub const WPE_KEY_TouchpadOff: u32 = 269025201;
pub const WPE_KEY_AudioMicMute: u32 = 269025202;
pub const WPE_KEY_Keyboard: u32 = 269025203;
pub const WPE_KEY_WWAN: u32 = 269025204;
pub const WPE_KEY_RFKill: u32 = 269025205;
pub const WPE_KEY_AudioPreset: u32 = 269025206;
pub const WPE_KEY_Switch_VT_1: u32 = 269024769;
pub const WPE_KEY_Switch_VT_2: u32 = 269024770;
pub const WPE_KEY_Switch_VT_3: u32 = 269024771;
pub const WPE_KEY_Switch_VT_4: u32 = 269024772;
pub const WPE_KEY_Switch_VT_5: u32 = 269024773;
pub const WPE_KEY_Switch_VT_6: u32 = 269024774;
pub const WPE_KEY_Switch_VT_7: u32 = 269024775;
pub const WPE_KEY_Switch_VT_8: u32 = 269024776;
pub const WPE_KEY_Switch_VT_9: u32 = 269024777;
pub const WPE_KEY_Switch_VT_10: u32 = 269024778;
pub const WPE_KEY_Switch_VT_11: u32 = 269024779;
pub const WPE_KEY_Switch_VT_12: u32 = 269024780;
pub const WPE_KEY_Ungrab: u32 = 269024800;
pub const WPE_KEY_WindowClearGrab: u32 = 269024801;
pub const WPE_KEY_Next_VMode: u32 = 269024802;
pub const WPE_KEY_Prev_VMode: u32 = 269024803;
pub const WPE_KEY_LogWindowTree: u32 = 269024804;
pub const WPE_KEY_LogGrabInfo: u32 = 269024805;
pub const WPE_MAJOR_VERSION: u32 = 1;
pub const WPE_MINOR_VERSION: u32 = 14;
pub const WPE_MICRO_VERSION: u32 = 2;
pub const WPE_BACKEND_MAJOR_VERSION: u32 = 1;
pub const WPE_BACKEND_MINOR_VERSION: u32 = 14;
pub const WPE_BACKEND_MICRO_VERSION: u32 = 2;
pub const KHRONOS_SUPPORT_INT64: u32 = 1;
pub const KHRONOS_SUPPORT_FLOAT: u32 = 1;
pub const KHRONOS_MAX_ENUM: u32 = 2147483647;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__fsid_t), "::", stringify!(__val))
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const wpe_gamepad_axis_WPE_GAMEPAD_AXIS_LEFT_STICK_X: wpe_gamepad_axis = 0;
pub const wpe_gamepad_axis_WPE_GAMEPAD_AXIS_LEFT_STICK_Y: wpe_gamepad_axis = 1;
pub const wpe_gamepad_axis_WPE_GAMEPAD_AXIS_RIGHT_STICK_X: wpe_gamepad_axis = 2;
pub const wpe_gamepad_axis_WPE_GAMEPAD_AXIS_RIGHT_STICK_Y: wpe_gamepad_axis = 3;
pub const wpe_gamepad_axis_WPE_GAMEPAD_AXIS_COUNT: wpe_gamepad_axis = 4;
/// wpe_gamepad_axis:
/// @WPE_GAMEPAD_AXIS_LEFT_STICK_X: Horizontal axis for left stick (negative
/// left/positive right). @WPE_GAMEPAD_AXIS_LEFT_STICK_Y: Vertical axis for left
/// stick (negative up/positive down). @WPE_GAMEPAD_AXIS_RIGHT_STICK_X:
/// Horizontal axis for right stick (negative left/positive right).
/// @WPE_GAMEPAD_AXIS_RIGHT_STICK_Y: Vertical axis for right stick (negative
/// up/positive down). @WPE_GAMEPAD_AXIS_COUNT: max number of axis.
///
/// Standard mapping.
/// Refer https://www.w3.org/TR/gamepad/#gamepadbutton-interface
pub type wpe_gamepad_axis = ::std::os::raw::c_uint;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_BOTTOM: wpe_gamepad_button = 0;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_RIGHT: wpe_gamepad_button = 1;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_LEFT: wpe_gamepad_button = 2;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_TOP: wpe_gamepad_button = 3;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_LEFT_SHOULDER: wpe_gamepad_button = 4;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER: wpe_gamepad_button = 5;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_LEFT_TRIGGER: wpe_gamepad_button = 6;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_RIGHT_TRIGGER: wpe_gamepad_button = 7;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_SELECT: wpe_gamepad_button = 8;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_START: wpe_gamepad_button = 9;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_LEFT_STICK: wpe_gamepad_button = 10;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_RIGHT_STICK: wpe_gamepad_button = 11;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_D_PAD_TOP: wpe_gamepad_button = 12;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_D_PAD_BOTTOM: wpe_gamepad_button = 13;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_D_PAD_LEFT: wpe_gamepad_button = 14;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_D_PAD_RIGHT: wpe_gamepad_button = 15;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_CENTER: wpe_gamepad_button = 16;
pub const wpe_gamepad_button_WPE_GAMEPAD_BUTTON_COUNT: wpe_gamepad_button = 17;
/// wpe_gamepad_button:
/// @WPE_GAMEPAD_BUTTON_BOTTOM: Bottom button in right cluster.
/// @WPE_GAMEPAD_BUTTON_RIGHT: Right button in right cluster.
/// @WPE_GAMEPAD_BUTTON_LEFT: Left button in right cluster.
/// @WPE_GAMEPAD_BUTTON_TOP: Top button in right cluster.
/// @WPE_GAMEPAD_BUTTON_LEFT_SHOULDER: Top left front button.
/// @WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER: Top right front button.
/// @WPE_GAMEPAD_BUTTON_LEFT_TRIGGER: Bottom left front button.
/// @WPE_GAMEPAD_BUTTON_RIGHT_TRIGGER: Bottom right front button.
/// @WPE_GAMEPAD_BUTTON_SELECT: Left button in center cluster.
/// @WPE_GAMEPAD_BUTTON_START: Right button in center cluster.
/// @WPE_GAMEPAD_BUTTON_LEFT_STICK: Left stick pressed button.
/// @WPE_GAMEPAD_BUTTON_RIGHT_STICK: Right stick pressed button.
/// @WPE_GAMEPAD_BUTTON_D_PAD_TOP: Top button in left cluster.
/// @WPE_GAMEPAD_BUTTON_D_PAD_BOTOM: Bottom button in left cluster
/// @WPE_GAMEPAD_BUTTON_D_PAD_LEFT: Left button in left cluster.
/// @WPE_GAMEPAD_BUTTON_D_PAD_RIGHT: Right button in left cluster.
/// @WPE_GAMEPAD_BUTTON_CENTER: Center button in center cluster.
/// @WPE_GAMEPAD_BUTTON_COUNT: Max number of buttons.
///
/// Standard mapping.
/// Refer https://www.w3.org/TR/gamepad/#gamepadbutton-interface
pub type wpe_gamepad_button = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_gamepad {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_gamepad_provider {
    _unused: [u8; 0],
}
/// wpe_gamepad_provider_client_interface:
/// @connected: Callback to inform WPEWebKit that a new gamepad device is
/// plugged. @disconnected: Callback to inform WPEWebKit that a new gamepad
/// device is gone.
///
/// This interface is defines gamepad provider callbacks to notify WPEWebKit of
/// devices.
///
/// Since: 1.14
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_gamepad_provider_client_interface {
    pub connected:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize)>,
    pub disconnected:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize)>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_gamepad_provider_client_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_gamepad_provider_client_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_gamepad_provider_client_interface>(),
        40usize,
        concat!("Size of: ", stringify!(wpe_gamepad_provider_client_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_gamepad_provider_client_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_gamepad_provider_client_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connected) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_client_interface),
            "::",
            stringify!(connected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disconnected) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_client_interface),
            "::",
            stringify!(disconnected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_client_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_client_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_client_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
/// wpe_gamepad_client_interface:
/// @button_changed: Callback to inform WPEWebkit a change in the status of a
/// button. @axis_changed: Callback to inform WPEWebkit a change in the status
/// of an axis.
///
/// This interface is defines gamepad callbacks to notify WPEWebKit of events.
///
/// Since: 1.14
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_gamepad_client_interface {
    pub button_changed: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: wpe_gamepad_button,
            arg3: bool,
        ),
    >,
    pub axis_changed: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: wpe_gamepad_axis, arg3: f64),
    >,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_gamepad_client_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_gamepad_client_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_gamepad_client_interface>(),
        40usize,
        concat!("Size of: ", stringify!(wpe_gamepad_client_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_gamepad_client_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_gamepad_client_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button_changed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_client_interface),
            "::",
            stringify!(button_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_changed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_client_interface),
            "::",
            stringify!(axis_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_client_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_client_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_client_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
/// wpe_gamepad_provider_interface:
/// @create: create an internal representation of a gamepad provider.
/// @destroy: destroy instance gamepad provider.
/// @start: gamepad device should start monitoring for gamepad devices.
/// @stop: gamepad device should stop monitoring for gamepad devices.
/// @get_view_backend: request the view backend where gamepad device is
/// attached.
///
/// Methods called by WebKit requesting gamepad provider operations to
/// implementator.
///
/// Since: 1.14
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_gamepad_provider_interface {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut wpe_gamepad_provider) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub start: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub stop: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub get_view_backend: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_void,
        ) -> *mut wpe_view_backend,
    >,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_gamepad_provider_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_gamepad_provider_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_gamepad_provider_interface>(),
        64usize,
        concat!("Size of: ", stringify!(wpe_gamepad_provider_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_gamepad_provider_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_gamepad_provider_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_view_backend) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(get_view_backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_provider_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
/// wpe_gamepad_provider_interface:
/// @create: creates a gamepad device.
/// @destroy: destroy a gamepad device.
/// @get_id: Gets the gamepad's id string.
///
/// Methods called by WebKit requesting gamepad device operations to
/// implementator.
///
/// Since: 1.14
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_gamepad_interface {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut wpe_gamepad,
            arg2: *mut wpe_gamepad_provider,
            arg3: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_gamepad_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_gamepad_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_gamepad_interface>(),
        48usize,
        concat!("Size of: ", stringify!(wpe_gamepad_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_gamepad_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_gamepad_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wpe_gamepad_interface), "::", stringify!(create))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(wpe_gamepad_interface), "::", stringify!(destroy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_id) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(wpe_gamepad_interface), "::", stringify!(get_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_gamepad_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
unsafe extern "C" {
    /// wpe_gamepad_provider_create:
    ///
    /// This method is called by WPEWebKit.
    ///
    /// Returns: an opaque object representing the gamepad provider in libwpe.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_create() -> *mut wpe_gamepad_provider;
}
unsafe extern "C" {
    /// wpe_gamepad_provider_destroy:
    /// @provider: opaque libwpe's representation of gamepad provider.
    ///
    /// Frees the internal resources used by @provider.
    ///
    /// This method is called by WPEWebKit.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_destroy(arg1: *mut wpe_gamepad_provider);
}
unsafe extern "C" {
    /// wpe_gamepad_provider_set_client:
    /// @provider: opaque libwpe's representation of gamepad provider.
    /// @client_interface: WPEWebKit callbacks for gamepad devices appearance.
    /// @client_data: WPEWebkit closure data.
    ///
    /// Sets WPEWebKit callbacks in @provider.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_set_client(
        arg1: *mut wpe_gamepad_provider,
        arg2: *const wpe_gamepad_provider_client_interface,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    /// wpe_gamepad_provider_start:
    /// @provider: opaque libwpe's representation of gamepad provider.
    ///
    /// Called by WPEWebkit to start @provider monitoring for gamepad
    /// devices.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_start(arg1: *mut wpe_gamepad_provider);
}
unsafe extern "C" {
    /// wpe_gamepad_provider_stop:
    /// @provider: opaque libwpe's representation of gamepad provider.
    ///
    /// Called by WPEWebkit to stop @provider monitoring for gamepad
    /// devices.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_stop(arg1: *mut wpe_gamepad_provider);
}
unsafe extern "C" {
    /// wpe_gamepad_provider_get_backend:
    /// @provider: opaque libwpe's representation of gamepad provider.
    ///
    /// Called by application (gamepad implementator) to access it's internal
    /// object.
    ///
    /// Returns: the pointer to the implementator's object.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_get_backend(
        arg1: *mut wpe_gamepad_provider,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    /// wpe_gampepad_provider_get_view_backend:
    /// @provider: opaque libwpe's representation of gamepad provider.
    /// @gamepad: opaque libwep's representation of gampead
    ///
    /// Ask @provider for the view to where @gamepad is attached.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_get_view_backend(
        arg1: *mut wpe_gamepad_provider,
        arg2: *mut wpe_gamepad,
    ) -> *mut wpe_view_backend;
}
unsafe extern "C" {
    /// wpe_gamepad_provider_dispatch_gamepad_connected:
    /// @provider: opaque libwpe's representation of gamepad provider.
    /// @gamepad_id: application's gamepad device identifier.
    ///
    /// Method called by application (gamepad implementator) to inform
    /// WPEWebKit that a new gamepad device is plugged.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_dispatch_gamepad_connected(
        arg1: *mut wpe_gamepad_provider,
        arg2: usize,
    );
}
unsafe extern "C" {
    /// wpe_gamepad_provider_dispatch_gamepad_disconnected:
    /// @provider: opaque libwpe's representation of gamepad provider.
    /// @gamepad_id: application's gamepad device identifier.
    ///
    /// Method called by application (gamepad implementator) to inform
    /// WPEWebKit that a plugged gamepad device has been unplugged.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_provider_dispatch_gamepad_disconnected(
        arg1: *mut wpe_gamepad_provider,
        arg2: usize,
    );
}
unsafe extern "C" {
    /// wpe_gamepad_create:
    /// @provider:  provider of the gamepad to create.
    /// @gamepad_id: opaque application's representation of gamepad provider.
    ///
    /// Method called by WPEWebKit to create an internal representation of a
    /// gamepad device.
    ///
    /// Returns: opaque libwpe's representation of a gamepad device.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_create(arg1: *mut wpe_gamepad_provider, arg2: usize) -> *mut wpe_gamepad;
}
unsafe extern "C" {
    /// wpe_gamepad_destroy:
    /// @gamepad: opaque libwpe's representation of gamepad.
    ///
    /// Called by WPEWebkit to free the internal resources used by @gamepad
    /// object.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_destroy(arg1: *mut wpe_gamepad);
}
unsafe extern "C" {
    /// wpe_gamepad_provider_set_client:
    /// @gamepad: opaque libwpe's representation of gamepad.
    /// @client_interface: WPEWebKit callbacks for gamepad devices events.
    /// @client_data: WPEWebkit closure data.
    ///
    /// Sets WPEWebKit's callbacks for events in @gamepad.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_set_client(
        arg1: *mut wpe_gamepad,
        arg2: *const wpe_gamepad_client_interface,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    /// wpe_gamepad_get_id:
    /// @gamepad: opaque libwpe's representation of gamepad.
    ///
    /// Gets the identification string for the @gamepad.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_get_id(arg1: *mut wpe_gamepad) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    /// wpe_gamepad_dispatch_button_changed:
    /// @gamepad: opaque gamepad object.
    /// @button: the standard button that changed its state.
    /// @pressed: the new state: %TRUE pressed, otherwise released.
    ///
    /// Method called by application (gamepad implementator). It reports to
    /// WPEWebkit a change in the status of @button.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_dispatch_button_changed(
        arg1: *mut wpe_gamepad,
        arg2: wpe_gamepad_button,
        arg3: bool,
    );
}
unsafe extern "C" {
    /// wpe_gamepad_dispatch_axis_changed:
    /// @gamepad: opaque gamepad object.
    /// @axis: the standard axis that changed its state.
    /// @value: the value of @axis
    ///
    /// Method called by application (gamepad implementator). It reports to
    /// WPEWebkit a change in the position of @axis.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_dispatch_axis_changed(
        arg1: *mut wpe_gamepad,
        arg2: wpe_gamepad_axis,
        arg3: f64,
    );
}
unsafe extern "C" {
    /// wpe_gamepad_set_handler:
    /// @provider_iface: (transfer none): Application callbacks for gamepad
    /// provider. @gamepad_iface: (transfer none): Applications callbacks
    /// for gamepad device.
    ///
    /// Method called by the application (gamepad implementator) to
    /// register, in libwpe, the callbacks for gamepad devices and gamepad
    /// provider.
    ///
    /// Note that the last registered handlers will be used.
    ///
    /// Since: 1.14
    pub fn wpe_gamepad_set_handler(
        arg1: *const wpe_gamepad_provider_interface,
        arg2: *const wpe_gamepad_interface,
    );
}
pub const wpe_input_modifier_wpe_input_keyboard_modifier_control: wpe_input_modifier = 1;
pub const wpe_input_modifier_wpe_input_keyboard_modifier_shift: wpe_input_modifier = 2;
pub const wpe_input_modifier_wpe_input_keyboard_modifier_alt: wpe_input_modifier = 4;
pub const wpe_input_modifier_wpe_input_keyboard_modifier_meta: wpe_input_modifier = 8;
pub const wpe_input_modifier_wpe_input_pointer_modifier_button1: wpe_input_modifier = 1048576;
pub const wpe_input_modifier_wpe_input_pointer_modifier_button2: wpe_input_modifier = 2097152;
pub const wpe_input_modifier_wpe_input_pointer_modifier_button3: wpe_input_modifier = 4194304;
pub const wpe_input_modifier_wpe_input_pointer_modifier_button4: wpe_input_modifier = 8388608;
pub const wpe_input_modifier_wpe_input_pointer_modifier_button5: wpe_input_modifier = 16777216;
pub type wpe_input_modifier = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_input_keyboard_event {
    pub time: u32,
    pub key_code: u32,
    pub hardware_key_code: u32,
    pub pressed: bool,
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout_wpe_input_keyboard_event() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_input_keyboard_event> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_input_keyboard_event>(),
        20usize,
        concat!("Size of: ", stringify!(wpe_input_keyboard_event))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_input_keyboard_event>(),
        4usize,
        concat!("Alignment of ", stringify!(wpe_input_keyboard_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wpe_input_keyboard_event), "::", stringify!(time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_keyboard_event),
            "::",
            stringify!(key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_key_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_keyboard_event),
            "::",
            stringify!(hardware_key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_keyboard_event),
            "::",
            stringify!(pressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_keyboard_event),
            "::",
            stringify!(modifiers)
        )
    );
}
pub const wpe_input_pointer_event_type_wpe_input_pointer_event_type_null:
    wpe_input_pointer_event_type = 0;
pub const wpe_input_pointer_event_type_wpe_input_pointer_event_type_motion:
    wpe_input_pointer_event_type = 1;
pub const wpe_input_pointer_event_type_wpe_input_pointer_event_type_button:
    wpe_input_pointer_event_type = 2;
pub type wpe_input_pointer_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_input_pointer_event {
    pub type_: wpe_input_pointer_event_type,
    pub time: u32,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub button: u32,
    pub state: u32,
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout_wpe_input_pointer_event() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_input_pointer_event> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_input_pointer_event>(),
        28usize,
        concat!("Size of: ", stringify!(wpe_input_pointer_event))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_input_pointer_event>(),
        4usize,
        concat!("Alignment of ", stringify!(wpe_input_pointer_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wpe_input_pointer_event), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(wpe_input_pointer_event), "::", stringify!(time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(wpe_input_pointer_event), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(wpe_input_pointer_event), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(wpe_input_pointer_event), "::", stringify!(button))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(wpe_input_pointer_event), "::", stringify!(state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_pointer_event),
            "::",
            stringify!(modifiers)
        )
    );
}
pub const wpe_input_axis_event_type_wpe_input_axis_event_type_null: wpe_input_axis_event_type = 0;
pub const wpe_input_axis_event_type_wpe_input_axis_event_type_motion: wpe_input_axis_event_type = 1;
pub const wpe_input_axis_event_type_wpe_input_axis_event_type_motion_smooth:
    wpe_input_axis_event_type = 2;
pub const wpe_input_axis_event_type_wpe_input_axis_event_type_mask_2d: wpe_input_axis_event_type =
    65536;
pub type wpe_input_axis_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_input_axis_event {
    pub type_: wpe_input_axis_event_type,
    pub time: u32,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub axis: u32,
    pub value: i32,
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout_wpe_input_axis_event() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_input_axis_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_input_axis_event>(),
        28usize,
        concat!("Size of: ", stringify!(wpe_input_axis_event))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_input_axis_event>(),
        4usize,
        concat!("Alignment of ", stringify!(wpe_input_axis_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(axis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_event), "::", stringify!(modifiers))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_input_axis_2d_event {
    pub base: wpe_input_axis_event,
    pub x_axis: f64,
    pub y_axis: f64,
}
#[test]
fn bindgen_test_layout_wpe_input_axis_2d_event() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_input_axis_2d_event> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_input_axis_2d_event>(),
        48usize,
        concat!("Size of: ", stringify!(wpe_input_axis_2d_event))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_input_axis_2d_event>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_input_axis_2d_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_2d_event), "::", stringify!(base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_2d_event), "::", stringify!(x_axis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_axis) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(wpe_input_axis_2d_event), "::", stringify!(y_axis))
    );
}
pub const wpe_input_touch_event_type_wpe_input_touch_event_type_null: wpe_input_touch_event_type =
    0;
pub const wpe_input_touch_event_type_wpe_input_touch_event_type_down: wpe_input_touch_event_type =
    1;
pub const wpe_input_touch_event_type_wpe_input_touch_event_type_motion: wpe_input_touch_event_type =
    2;
pub const wpe_input_touch_event_type_wpe_input_touch_event_type_up: wpe_input_touch_event_type = 3;
pub type wpe_input_touch_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_input_touch_event_raw {
    pub type_: wpe_input_touch_event_type,
    pub time: u32,
    pub id: ::std::os::raw::c_int,
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_wpe_input_touch_event_raw() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_input_touch_event_raw> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_input_touch_event_raw>(),
        20usize,
        concat!("Size of: ", stringify!(wpe_input_touch_event_raw))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_input_touch_event_raw>(),
        4usize,
        concat!("Alignment of ", stringify!(wpe_input_touch_event_raw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_touch_event_raw),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event_raw), "::", stringify!(time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event_raw), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event_raw), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event_raw), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_input_touch_event {
    pub touchpoints: *const wpe_input_touch_event_raw,
    pub touchpoints_length: u64,
    pub type_: wpe_input_touch_event_type,
    pub id: i32,
    pub time: u32,
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout_wpe_input_touch_event() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_input_touch_event> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_input_touch_event>(),
        32usize,
        concat!("Size of: ", stringify!(wpe_input_touch_event))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_input_touch_event>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_input_touch_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touchpoints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_touch_event),
            "::",
            stringify!(touchpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touchpoints_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_touch_event),
            "::",
            stringify!(touchpoints_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(wpe_input_touch_event), "::", stringify!(time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_input_touch_event),
            "::",
            stringify!(modifiers)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_key_code_to_unicode(arg1: u32) -> u32;
}
unsafe extern "C" {
    pub fn wpe_unicode_to_key_code(arg1: u32) -> u32;
}
/// wpe_loader_interface:
/// @load_object: Callback invoked by `libwpe` to instantiate objects.
///
/// An implementation of a WPE backend *must* define a `_wpe_loader_interface`
/// symbol of this type.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_loader_interface {
    pub load_object: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_loader_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_loader_interface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_loader_interface>(),
        40usize,
        concat!("Size of: ", stringify!(wpe_loader_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_loader_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_loader_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_loader_interface),
            "::",
            stringify!(load_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_loader_interface),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_loader_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_loader_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_loader_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
unsafe extern "C" {
    /// wpe_loader_init:
    /// @impl_library_name: (transfer none): Name of the shared library object
    ///     to load as WPE backend implementation.
    ///
    /// Initializes the `libwpe` object loader
    ///
    /// Returns: Whether initialization succeeded.
    pub fn wpe_loader_init(impl_library_name: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    /// wpe_loader_get_loaded_implementation_library_name:
    ///
    /// Obtain the name of the shared library object loaded as WPE backend
    /// implementation. Note that in general this will return the value passed
    /// to wpe_loader_init(), but that is not guaranteed.
    ///
    /// Returns: (transfer none): Name of the shared library object for the
    ///     backend implementation.
    pub fn wpe_loader_get_loaded_implementation_library_name() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_pasteboard_string {
    pub data: *mut ::std::os::raw::c_char,
    pub length: u64,
}
#[test]
fn bindgen_test_layout_wpe_pasteboard_string() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_pasteboard_string> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_pasteboard_string>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_pasteboard_string))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_pasteboard_string>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_pasteboard_string))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wpe_pasteboard_string), "::", stringify!(data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(wpe_pasteboard_string), "::", stringify!(length))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_pasteboard_string_vector {
    pub strings: *mut wpe_pasteboard_string,
    pub length: u64,
}
#[test]
fn bindgen_test_layout_wpe_pasteboard_string_vector() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_pasteboard_string_vector> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_pasteboard_string_vector>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_pasteboard_string_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_pasteboard_string_vector>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_pasteboard_string_vector))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_string_vector),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_string_vector),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_pasteboard_string_pair {
    pub type_: wpe_pasteboard_string,
    pub string: wpe_pasteboard_string,
}
#[test]
fn bindgen_test_layout_wpe_pasteboard_string_pair() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_pasteboard_string_pair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_pasteboard_string_pair>(),
        32usize,
        concat!("Size of: ", stringify!(wpe_pasteboard_string_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_pasteboard_string_pair>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_pasteboard_string_pair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_string_pair),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_string_pair),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_pasteboard_string_map {
    pub pairs: *mut wpe_pasteboard_string_pair,
    pub length: u64,
}
#[test]
fn bindgen_test_layout_wpe_pasteboard_string_map() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_pasteboard_string_map> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_pasteboard_string_map>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_pasteboard_string_map))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_pasteboard_string_map>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_pasteboard_string_map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pairs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_string_map),
            "::",
            stringify!(pairs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_string_map),
            "::",
            stringify!(length)
        )
    );
}
unsafe extern "C" {
    /// wpe_pasteboard_string_initialize:
    /// @pbstring: (transfer none): A pasteboard string.
    /// @contents: (transfer none): Contents to copy into the pasteboard string.
    /// @length: Length of the contents, in bytes.
    ///
    /// Initializes a pasteboard string.
    ///
    /// When the string is not needed anymore, use wpe_pasteboard_string_free()
    /// to free resources.
    pub fn wpe_pasteboard_string_initialize(
        pbstring: *mut wpe_pasteboard_string,
        contents: *const ::std::os::raw::c_char,
        length: u64,
    );
}
unsafe extern "C" {
    /// wpe_pasteboard_string_free:
    /// @pbstring: (transfer none): A pasteboard string.
    ///
    /// Frees any resources associated with @pbstring which may have been
    /// previously allocated by wpe_pasteboard_string_initialize().
    pub fn wpe_pasteboard_string_free(pbstring: *mut wpe_pasteboard_string);
}
unsafe extern "C" {
    pub fn wpe_pasteboard_string_vector_free(arg1: *mut wpe_pasteboard_string_vector);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_pasteboard {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_pasteboard_interface {
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut wpe_pasteboard) -> *mut ::std::os::raw::c_void,
    >,
    pub get_types: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut wpe_pasteboard_string_vector,
        ),
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut wpe_pasteboard_string,
        ),
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut wpe_pasteboard_string_map,
        ),
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_pasteboard_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_pasteboard_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_pasteboard_interface>(),
        64usize,
        concat!("Size of: ", stringify!(wpe_pasteboard_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_pasteboard_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_pasteboard_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_types) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(get_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(wpe_pasteboard_interface), "::", stringify!(write))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_pasteboard_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
unsafe extern "C" {
    /// wpe_pasteboard_get_singleton:
    ///
    /// Obtains the pasteboard object, creating it if neccessary.
    ///
    /// Returns: The pasteboard object.
    pub fn wpe_pasteboard_get_singleton() -> *mut wpe_pasteboard;
}
unsafe extern "C" {
    pub fn wpe_pasteboard_get_types(
        arg1: *mut wpe_pasteboard,
        arg2: *mut wpe_pasteboard_string_vector,
    );
}
unsafe extern "C" {
    pub fn wpe_pasteboard_get_string(
        arg1: *mut wpe_pasteboard,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut wpe_pasteboard_string,
    );
}
unsafe extern "C" {
    pub fn wpe_pasteboard_write(arg1: *mut wpe_pasteboard, arg2: *mut wpe_pasteboard_string_map);
}
pub const wpe_process_type_WPE_PROCESS_TYPE_WEB: wpe_process_type = 0;
pub const wpe_process_type_WPE_PROCESS_TYPE_NETWORK: wpe_process_type = 1;
pub const wpe_process_type_WPE_PROCESS_TYPE_GPU: wpe_process_type = 2;
pub const wpe_process_type_WPE_PROCESS_TYPE_WEB_AUTHN: wpe_process_type = 3;
/// wpe_process_type:
/// @WPE_PROCESS_TYPE_WEB: WebKit's WebProcess.
/// @WPE_PROCESS_TYPE_NETWORK: WebKit's NetworkProcess.
/// @WPE_PROCESS_TYPE_GPU: WebKit's GPUProcess.
/// @WPE_PROCESS_TYPE_WEB_AUTHN: WebKit's WebAuthNProcess.
///
/// Maps to the processes launched by WebKit.
pub type wpe_process_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_process_provider {
    _unused: [u8; 0],
}
/// wpe_process_provider_interface:
/// @create: create an internal representation of a process provider.
/// @destroy: destroy instance process provider.
/// @launch: launches the specified WebKit process.
/// @terminate: terminates the specified Webkit process.
///
/// Methods called by WebKit requesting process provider operations to
/// implementator.
///
/// Since: 1.14
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_process_provider_interface {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut wpe_process_provider) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub launch: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: wpe_process_type,
            arg3: *mut ::std::os::raw::c_void,
        ) -> i64,
    >,
    pub terminate:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: i64)>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved4: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved5: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_process_provider_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_process_provider_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_process_provider_interface>(),
        72usize,
        concat!("Size of: ", stringify!(wpe_process_provider_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_process_provider_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_process_provider_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).launch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(launch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).terminate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved4) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(_wpe_reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved5) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_process_provider_interface),
            "::",
            stringify!(_wpe_reserved5)
        )
    );
}
unsafe extern "C" {
    /// wpe_process_provider_create:
    ///
    /// This method is called by WPEWebKit.
    ///
    /// Returns: an opaque object representing the process provider in libwpe.
    ///
    /// Since: 1.14
    pub fn wpe_process_provider_create() -> *mut wpe_process_provider;
}
unsafe extern "C" {
    /// wpe_process_provider_destroy:
    /// @provider: opaque libwpe's representation of the process provider.
    ///
    /// Frees the internal resources used by @provider.
    ///
    /// This method is called by WPEWebKit.
    ///
    /// Since: 1.14
    pub fn wpe_process_provider_destroy(arg1: *mut wpe_process_provider);
}
unsafe extern "C" {
    /// wpe_process_launch:
    /// @provider: opaque libwpe's representation of the process provider.
    /// @type: the process type to launch.
    /// @userdata: user data passed needed to launch the process.
    ///
    /// Launches the specified WebKit process.
    ///
    /// Returns: an identifier for the process.
    ///
    /// Since: 1.14
    pub fn wpe_process_launch(
        arg1: *mut wpe_process_provider,
        arg2: wpe_process_type,
        arg3: *mut ::std::os::raw::c_void,
    ) -> i64;
}
unsafe extern "C" {
    /// wpe_process_terminate:
    /// @provider: opaque libwpe's representation of the process provider.
    /// @process: identifier for the process to terminate.
    ///
    /// Terminates the specified WebKit process.
    ///
    /// Since: 1.14
    pub fn wpe_process_terminate(arg1: *mut wpe_process_provider, arg2: i64);
}
unsafe extern "C" {
    /// wpe_process_provider_register_interface:
    /// @iface: interface for the process provider.
    ///
    /// Sets the process provider interface.
    ///
    /// This method is called by WPEWebKit.
    ///
    /// Since: 1.14
    pub fn wpe_process_provider_register_interface(arg1: *const wpe_process_provider_interface);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_host_interface {
    pub create: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub create_client: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_renderer_host_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_host_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_host_interface>(),
        56usize,
        concat!("Size of: ", stringify!(wpe_renderer_host_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_host_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_host_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_client) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(create_client)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_host_base {
    pub interface: *const wpe_renderer_host_interface,
    pub interface_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wpe_renderer_host_base() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_host_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_host_base>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_renderer_host_base))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_host_base>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_host_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_base),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_host_base),
            "::",
            stringify!(interface_data)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_host_create_client() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    /// wpe_backend_get_major_version:
    ///
    /// Returns: Major version of the `libwpe` library.
    ///
    /// Deprecated: Since `libwpe` version 1.0.0, use wpe_get_major_version()
    ///     instead.
    pub fn wpe_backend_get_major_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    /// wpe_backend_get_minor_version:
    ///
    /// Returns: Minor version of the `libwpe` library.
    ///
    /// Deprecated: Since `libwpe` version 1.0.0, use wpe_get_minor_version()
    ///     instead.
    pub fn wpe_backend_get_minor_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    /// wpe_backend_get_micro_version:
    ///
    /// Returns: Micro version of the `libwpe` library.
    ///
    /// Deprecated: Since `libwpe` version 1.0.0, use wpe_get_micro_version()
    ///     instead.
    pub fn wpe_backend_get_micro_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    /// wpe_get_major_version:
    ///
    /// Returns: Major version of the `libwpe` library.
    pub fn wpe_get_major_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    /// wpe_get_minor_version:
    ///
    /// Returns: Minor version of the `libwpe` library.
    pub fn wpe_get_minor_version() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    /// wpe_get_micro_version:
    ///
    /// Returns: Micro version of the `libwpe` library.
    pub fn wpe_get_micro_version() -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_interface {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut wpe_view_backend,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub initialize: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub get_renderer_host_fd: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_interface>(),
        64usize,
        concat!("Size of: ", stringify!(wpe_view_backend_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_view_backend_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_renderer_host_fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(get_renderer_host_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_base {
    pub interface: *const wpe_view_backend_interface,
    pub interface_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_base() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_base>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_view_backend_base))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_base>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_view_backend_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_base),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_base),
            "::",
            stringify!(interface_data)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_create() -> *mut wpe_view_backend;
}
unsafe extern "C" {
    pub fn wpe_view_backend_create_with_backend_interface(
        arg1: *mut wpe_view_backend_interface,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut wpe_view_backend;
}
unsafe extern "C" {
    pub fn wpe_view_backend_destroy(arg1: *mut wpe_view_backend);
}
unsafe extern "C" {
    pub fn wpe_view_backend_set_backend_client(
        arg1: *mut wpe_view_backend,
        arg2: *const wpe_view_backend_client,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_set_input_client(
        arg1: *mut wpe_view_backend,
        arg2: *const wpe_view_backend_input_client,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    /// wpe_view_backend_set_fullscreen_client:
    /// @view_backend: (transfer none): The view backend to obtains events from.
    /// @client: (transfer none) (nullable): Client with callbacks for the
    /// events. @userdata: (transfer none) (nullable): User data passed to
    /// client callbacks.
    ///
    /// Configure a @client with callbacks invoked for DOM fullscreen requests.
    ///
    /// This function must be only used once for a given @view_backend, the
    /// client cannot be changed once it has been set.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_set_fullscreen_client(
        arg1: *mut wpe_view_backend,
        arg2: *const wpe_view_backend_fullscreen_client,
        arg3: *mut ::std::os::raw::c_void,
    );
}
/// wpe_view_backend_fullscreen_handler:
/// @userdata: (transfer none): User data passed to the embedder.
/// @enable: (transfer none): User data passed to the embedder.
///
/// Type of functions used by an embedder to implement fullscreening web views.
///
/// Returns: a boolean indicating whether the operation was completed.
///
/// Since: 1.12
pub type wpe_view_backend_fullscreen_handler = ::std::option::Option<
    unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void, enable: bool) -> bool,
>;
unsafe extern "C" {
    /// wpe_view_backend_set_fullscreen_handler:
    /// @view_backend: (transfer none): The view backend to obtains events from.
    /// @handler: (transfer none): Function used by an embedder to implement
    /// fullscreening web views. @userdata: (transfer none): User data
    /// passed to the handler function.
    ///
    /// Handler function set by an embedder to implement fullscreening web
    /// views.
    ///
    /// This function must be only used once for a given @view_backend, the
    /// handler cannot be changed once it has been set.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_set_fullscreen_handler(
        arg1: *mut wpe_view_backend,
        handler: wpe_view_backend_fullscreen_handler,
        userdata: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_initialize(arg1: *mut wpe_view_backend);
}
unsafe extern "C" {
    pub fn wpe_view_backend_get_renderer_host_fd(
        arg1: *mut wpe_view_backend,
    ) -> ::std::os::raw::c_int;
}
pub const wpe_view_activity_state_wpe_view_activity_state_visible: wpe_view_activity_state = 1;
pub const wpe_view_activity_state_wpe_view_activity_state_focused: wpe_view_activity_state = 2;
pub const wpe_view_activity_state_wpe_view_activity_state_in_window: wpe_view_activity_state = 4;
pub type wpe_view_activity_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_client {
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: u32, arg3: u32),
    >,
    pub frame_displayed:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub activity_state_changed:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: u32)>,
    pub get_accessible: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub set_device_scale_factor:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: f32)>,
    pub target_refresh_rate_changed:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: u32)>,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_client() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_client> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_client>(),
        48usize,
        concat!("Size of: ", stringify!(wpe_view_backend_client))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_client>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_view_backend_client))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_client),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_displayed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_client),
            "::",
            stringify!(frame_displayed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activity_state_changed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_client),
            "::",
            stringify!(activity_state_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_accessible) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_client),
            "::",
            stringify!(get_accessible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_device_scale_factor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_client),
            "::",
            stringify!(set_device_scale_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_refresh_rate_changed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_client),
            "::",
            stringify!(target_refresh_rate_changed)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_set_size(arg1: *mut wpe_view_backend, arg2: u32, arg3: u32);
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_frame_displayed(arg1: *mut wpe_view_backend);
}
unsafe extern "C" {
    pub fn wpe_view_backend_add_activity_state(arg1: *mut wpe_view_backend, arg2: u32);
}
unsafe extern "C" {
    pub fn wpe_view_backend_remove_activity_state(arg1: *mut wpe_view_backend, arg2: u32);
}
unsafe extern "C" {
    pub fn wpe_view_backend_get_activity_state(arg1: *mut wpe_view_backend) -> u32;
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_get_accessible(
        backend: *mut wpe_view_backend,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    /// wpe_view_backend_dispatch_set_device_scale_factor:
    /// @view_backend: (transfer none): The view backend to configure.
    /// @factor: Scaling factor to apply.
    ///
    /// Configure the device scaling factor applied to rendered content.
    ///
    /// Set the @factor by which sizes of content rendered to a web view will be
    /// multiplied by. The typical reason to set a value other than `1.0` (the
    /// default) is to produce output that will display at the intended physical
    /// size in displays with a high density of pixels.
    ///
    /// Only values from `0.05` up to `5.0` are allowed. Setting a value outside
    /// this range will be ignored, and in debug builds execution will be
    /// aborted.
    ///
    /// For example, a display that has a physical resolution of 3840x2160 with
    /// a scaling factor of `2.0` will make web content behave as if the screen
    /// had a size of 1920x1080, and content will be rendered at twice the size:
    /// each “logical” pixel will occupy four “physical” pixels (a 2x2 box) on
    /// the output.
    ///
    /// Since: 1.4
    pub fn wpe_view_backend_dispatch_set_device_scale_factor(
        arg1: *mut wpe_view_backend,
        arg2: f32,
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_get_target_refresh_rate(arg1: *mut wpe_view_backend) -> u32;
}
unsafe extern "C" {
    pub fn wpe_view_backend_set_target_refresh_rate(arg1: *mut wpe_view_backend, arg2: u32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_input_client {
    pub handle_keyboard_event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut wpe_input_keyboard_event,
        ),
    >,
    pub handle_pointer_event: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut wpe_input_pointer_event),
    >,
    pub handle_axis_event: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut wpe_input_axis_event),
    >,
    pub handle_touch_event: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut wpe_input_touch_event),
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_input_client() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_input_client> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_input_client>(),
        64usize,
        concat!("Size of: ", stringify!(wpe_view_backend_input_client))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_input_client>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_view_backend_input_client))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle_keyboard_event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(handle_keyboard_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle_pointer_event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(handle_pointer_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle_axis_event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(handle_axis_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle_touch_event) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(handle_touch_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_input_client),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_keyboard_event(
        arg1: *mut wpe_view_backend,
        arg2: *mut wpe_input_keyboard_event,
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_pointer_event(
        arg1: *mut wpe_view_backend,
        arg2: *mut wpe_input_pointer_event,
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_axis_event(
        arg1: *mut wpe_view_backend,
        arg2: *mut wpe_input_axis_event,
    );
}
unsafe extern "C" {
    pub fn wpe_view_backend_dispatch_touch_event(
        arg1: *mut wpe_view_backend,
        arg2: *mut wpe_input_touch_event,
    );
}
/// wpe_view_backend_fullscreen_client:
/// @did_enter_fullscreen: Invoked after fullscreen has been successfully
/// entered. @did_exit_fullscreen: Invoked after fullscreen has been exited.
/// @request_enter_fullscreen: Invoked after user has requested to enter
/// fullscreen. @request_exit_fullscreen: Invoked after user has requested to
/// exit fullscreen.
///
/// A view backend's fullscreen client provides a series of callback functions
/// which are invoked at different stages when a web view becomes fullscreened
/// and back.
///
/// Since: 1.12
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_view_backend_fullscreen_client {
    pub did_enter_fullscreen:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub did_exit_fullscreen:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub request_enter_fullscreen:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub request_exit_fullscreen:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_view_backend_fullscreen_client() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_view_backend_fullscreen_client> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_view_backend_fullscreen_client>(),
        64usize,
        concat!("Size of: ", stringify!(wpe_view_backend_fullscreen_client))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_view_backend_fullscreen_client>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_view_backend_fullscreen_client))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).did_enter_fullscreen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(did_enter_fullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).did_exit_fullscreen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(did_exit_fullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_enter_fullscreen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(request_enter_fullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_exit_fullscreen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(request_exit_fullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_view_backend_fullscreen_client),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
unsafe extern "C" {
    /// wpe_view_backend_platform_set_fullscreen:
    /// @view_backend: (transfer none): The view backend which fullscreen state
    /// will be changed. @fullscreen: (transfer none): True if fullscreen.
    ///
    /// Returns: a boolean indicating whether the operation was completed.
    ///
    /// DOM content calls this function to request the platform to enter/exit
    /// fullscreen. The platform will attempt to change it's window
    /// fullscreen state.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_platform_set_fullscreen(
        arg1: *mut wpe_view_backend,
        arg2: bool,
    ) -> bool;
}
unsafe extern "C" {
    /// wpe_view_backend_dispatch_did_enter_fullscreen:
    /// @view_backend: (transfer none): The view backend that triggered the
    /// event.
    ///
    /// Dispatchs the event that indicates fullscreen has been successfully
    /// entered.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_dispatch_did_enter_fullscreen(arg1: *mut wpe_view_backend);
}
unsafe extern "C" {
    /// wpe_view_backend_dispatch_did_exit_fullscreen:
    /// @view_backend: (transfer none): The view backend that triggered the
    /// event.
    ///
    /// Dispatchs the event that indicated fullscreen has been successfully
    /// entered.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_dispatch_did_exit_fullscreen(arg1: *mut wpe_view_backend);
}
unsafe extern "C" {
    /// wpe_view_backend_dispatch_request_enter_fullscreen:
    /// @view_backend: (transfer none): The view backend that triggered the
    /// event.
    ///
    /// Dispatchs the event that indicates user wants to enter DOM fullscreen
    /// state.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_dispatch_request_enter_fullscreen(arg1: *mut wpe_view_backend);
}
unsafe extern "C" {
    /// wpe_view_backend_dispatch_request_exit_fullscreen:
    /// @view_backend: (transfer none): The view backend that triggered the
    /// event.
    ///
    /// Dispatchs the event that indicates user wants to exit DOM fullscreen
    /// state.
    ///
    /// Since: 1.12
    pub fn wpe_view_backend_dispatch_request_exit_fullscreen(arg1: *mut wpe_view_backend);
}
pub type khronos_int32_t = i32;
pub type khronos_uint32_t = u32;
pub type khronos_int64_t = i64;
pub type khronos_uint64_t = u64;
pub type khronos_int8_t = ::std::os::raw::c_schar;
pub type khronos_uint8_t = ::std::os::raw::c_uchar;
pub type khronos_int16_t = ::std::os::raw::c_short;
pub type khronos_uint16_t = ::std::os::raw::c_ushort;
pub type khronos_intptr_t = ::std::os::raw::c_long;
pub type khronos_uintptr_t = ::std::os::raw::c_ulong;
pub type khronos_ssize_t = ::std::os::raw::c_long;
pub type khronos_usize_t = ::std::os::raw::c_ulong;
pub type khronos_float_t = f32;
pub type khronos_utime_nanoseconds_t = khronos_uint64_t;
pub type khronos_stime_nanoseconds_t = khronos_int64_t;
pub const khronos_boolean_enum_t_KHRONOS_FALSE: khronos_boolean_enum_t = 0;
pub const khronos_boolean_enum_t_KHRONOS_TRUE: khronos_boolean_enum_t = 1;
pub const khronos_boolean_enum_t_KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: khronos_boolean_enum_t =
    2147483647;
pub type khronos_boolean_enum_t = ::std::os::raw::c_uint;
pub type EGLNativeDisplayType = *mut ::std::os::raw::c_void;
pub type EGLNativePixmapType = khronos_uintptr_t;
pub type EGLNativeWindowType = khronos_uintptr_t;
pub type NativeDisplayType = EGLNativeDisplayType;
pub type NativePixmapType = EGLNativePixmapType;
pub type NativeWindowType = EGLNativeWindowType;
pub type EGLint = khronos_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_target {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_offscreen_target {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_interface {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub get_native_display: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> EGLNativeDisplayType,
    >,
    pub get_platform:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> u32>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_interface>(),
        56usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_native_display) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(get_native_display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_platform) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(get_platform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_base {
    pub interface: *const wpe_renderer_backend_egl_interface,
    pub interface_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_base() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_base>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_base))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_base>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_base),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_base),
            "::",
            stringify!(interface_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_target_interface {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut wpe_renderer_backend_egl_target,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_void,
            arg3: u32,
            arg4: u32,
        ),
    >,
    pub get_native_window: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> EGLNativeWindowType,
    >,
    pub resize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: u32, arg3: u32),
    >,
    pub frame_will_render:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub frame_rendered:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub deinitialize:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_target_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_target_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_target_interface>(),
        88usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_target_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_target_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_target_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_native_window) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(get_native_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_will_render) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(frame_will_render)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_rendered) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(frame_rendered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinitialize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(deinitialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_target_base {
    pub interface: *const wpe_renderer_backend_egl_target_interface,
    pub interface_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_target_base() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_target_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_target_base>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_target_base))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_target_base>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_target_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_base),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_base),
            "::",
            stringify!(interface_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_offscreen_target_interface {
    pub create: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void),
    >,
    pub get_native_window: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> EGLNativeWindowType,
    >,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_offscreen_target_interface() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_offscreen_target_interface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_offscreen_target_interface>(),
        64usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_offscreen_target_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_offscreen_target_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_offscreen_target_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_native_window) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(get_native_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_interface),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_offscreen_target_base {
    pub interface: *const wpe_renderer_backend_egl_offscreen_target_interface,
    pub interface_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_offscreen_target_base() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_offscreen_target_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_offscreen_target_base>(),
        16usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_offscreen_target_base))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_offscreen_target_base>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_offscreen_target_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_base),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_offscreen_target_base),
            "::",
            stringify!(interface_data)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_create(
        arg1: ::std::os::raw::c_int,
    ) -> *mut wpe_renderer_backend_egl;
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_destroy(arg1: *mut wpe_renderer_backend_egl);
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_get_native_display(
        arg1: *mut wpe_renderer_backend_egl,
    ) -> EGLNativeDisplayType;
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_get_platform(arg1: *mut wpe_renderer_backend_egl) -> u32;
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_create(
        arg1: ::std::os::raw::c_int,
    ) -> *mut wpe_renderer_backend_egl_target;
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_destroy(arg1: *mut wpe_renderer_backend_egl_target);
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_set_client(
        arg1: *mut wpe_renderer_backend_egl_target,
        arg2: *const wpe_renderer_backend_egl_target_client,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_initialize(
        arg1: *mut wpe_renderer_backend_egl_target,
        arg2: *mut wpe_renderer_backend_egl,
        arg3: u32,
        arg4: u32,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_get_native_window(
        arg1: *mut wpe_renderer_backend_egl_target,
    ) -> EGLNativeWindowType;
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_resize(
        arg1: *mut wpe_renderer_backend_egl_target,
        arg2: u32,
        arg3: u32,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_frame_will_render(
        arg1: *mut wpe_renderer_backend_egl_target,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_frame_rendered(
        arg1: *mut wpe_renderer_backend_egl_target,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_deinitialize(arg1: *mut wpe_renderer_backend_egl_target);
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_offscreen_target_create()
    -> *mut wpe_renderer_backend_egl_offscreen_target;
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_offscreen_target_destroy(
        arg1: *mut wpe_renderer_backend_egl_offscreen_target,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_offscreen_target_initialize(
        arg1: *mut wpe_renderer_backend_egl_offscreen_target,
        arg2: *mut wpe_renderer_backend_egl,
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_offscreen_target_get_native_window(
        arg1: *mut wpe_renderer_backend_egl_offscreen_target,
    ) -> EGLNativeWindowType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpe_renderer_backend_egl_target_client {
    pub frame_complete:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub _wpe_reserved0: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _wpe_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_wpe_renderer_backend_egl_target_client() {
    const UNINIT: ::std::mem::MaybeUninit<wpe_renderer_backend_egl_target_client> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wpe_renderer_backend_egl_target_client>(),
        40usize,
        concat!("Size of: ", stringify!(wpe_renderer_backend_egl_target_client))
    );
    assert_eq!(
        ::std::mem::align_of::<wpe_renderer_backend_egl_target_client>(),
        8usize,
        concat!("Alignment of ", stringify!(wpe_renderer_backend_egl_target_client))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_complete) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_client),
            "::",
            stringify!(frame_complete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_client),
            "::",
            stringify!(_wpe_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_client),
            "::",
            stringify!(_wpe_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_client),
            "::",
            stringify!(_wpe_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wpe_reserved3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpe_renderer_backend_egl_target_client),
            "::",
            stringify!(_wpe_reserved3)
        )
    );
}
unsafe extern "C" {
    pub fn wpe_renderer_backend_egl_target_dispatch_frame_complete(
        arg1: *mut wpe_renderer_backend_egl_target,
    );
}

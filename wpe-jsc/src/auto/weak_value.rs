// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::prelude::*;
use glib::signal::{connect_raw, SignalHandlerId};
use glib::translate::*;

use crate::{ffi, Value};

glib::wrapper! {
    #[doc(alias = "JSCWeakValue")]
    pub struct WeakValue(Object<ffi::JSCWeakValue, ffi::JSCWeakValueClass>);

    match fn {
        type_ => || ffi::jsc_weak_value_get_type(),
    }
}

impl WeakValue {
    #[doc(alias = "jsc_weak_value_new")]
    pub fn new(value: &Value) -> WeakValue {
        unsafe { from_glib_full(ffi::jsc_weak_value_new(value.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`WeakValue`]
    /// objects.
    ///
    /// This method returns an instance of
    /// [`WeakValueBuilder`](crate::builders::WeakValueBuilder) which can be
    /// used to create [`WeakValue`] objects.
    pub fn builder() -> WeakValueBuilder {
        WeakValueBuilder::new()
    }

    #[doc(alias = "jsc_weak_value_get_value")]
    #[doc(alias = "get_value")]
    pub fn value(&self) -> Option<Value> {
        unsafe { from_glib_full(ffi::jsc_weak_value_get_value(self.to_glib_none().0)) }
    }

    #[doc(alias = "cleared")]
    pub fn connect_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cleared_trampoline<F: Fn(&WeakValue) + 'static>(
            this: *mut ffi::JSCWeakValue,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"cleared\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    cleared_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for WeakValue {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`WeakValue`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct WeakValueBuilder {
    builder: glib::object::ObjectBuilder<'static, WeakValue>,
}

impl WeakValueBuilder {
    fn new() -> Self {
        Self { builder: glib::object::Object::builder() }
    }

    pub fn value(self, value: &Value) -> Self {
        Self { builder: self.builder.property("value", value.clone()) }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`WeakValue`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to \
                  have side effects"]
    pub fn build(self) -> WeakValue {
        self.builder.build()
    }
}

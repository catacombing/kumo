// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, View};

glib::wrapper! {
    #[doc(alias = "WPEBuffer")]
    pub struct Buffer(Object<ffi::WPEBuffer, ffi::WPEBufferClass>);

    match fn {
        type_ => || ffi::wpe_buffer_get_type(),
    }
}

impl Buffer {
    pub const NONE: Option<&'static Buffer> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Buffer>> Sealed for T {}
}

pub trait BufferExt: IsA<Buffer> + sealed::Sealed + 'static {
    #[doc(alias = "wpe_buffer_get_height")]
    #[doc(alias = "get_height")]
    fn height(&self) -> i32 {
        unsafe { ffi::wpe_buffer_get_height(self.as_ref().to_glib_none().0) }
    }

    //#[doc(alias = "wpe_buffer_get_user_data")]
    //#[doc(alias = "get_user_data")]
    // fn user_data(&self) -> /*Unimplemented*/Option<Basic: Pointer> {
    //    unsafe { TODO: call ffi:wpe_buffer_get_user_data() }
    //}

    #[doc(alias = "wpe_buffer_get_view")]
    #[doc(alias = "get_view")]
    fn view(&self) -> Option<View> {
        unsafe { from_glib_none(ffi::wpe_buffer_get_view(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_buffer_get_width")]
    #[doc(alias = "get_width")]
    fn width(&self) -> i32 {
        unsafe { ffi::wpe_buffer_get_width(self.as_ref().to_glib_none().0) }
    }

    //#[doc(alias = "wpe_buffer_import_to_egl_image")]
    // fn import_to_egl_image(&self) -> Result</*Unimplemented*/Option<Basic:
    // Pointer>, glib::Error> {    unsafe { TODO: call
    // ffi:wpe_buffer_import_to_egl_image() }
    //}

    #[doc(alias = "wpe_buffer_import_to_pixels")]
    fn import_to_pixels(&self) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_buffer_import_to_pixels(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_none(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[doc(alias = "wpe_buffer_set_user_data")]
    // fn set_user_data(&self, user_data: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:wpe_buffer_set_user_data() }
    //}
}

impl<O: IsA<Buffer>> BufferExt for O {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;

use crate::{ffi, BufferDMABufFormatUsage};

glib::wrapper! {
    #[doc(alias = "WPEBufferDMABufFormats")]
    pub struct BufferDMABufFormats(Object<ffi::WPEBufferDMABufFormats, ffi::WPEBufferDMABufFormatsClass>);

    match fn {
        type_ => || ffi::wpe_buffer_dma_buf_formats_get_type(),
    }
}

impl BufferDMABufFormats {
    #[doc(alias = "wpe_buffer_dma_buf_formats_new")]
    pub fn new() -> BufferDMABufFormats {
        unsafe { from_glib_full(ffi::wpe_buffer_dma_buf_formats_new()) }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_get_device")]
    #[doc(alias = "get_device")]
    pub fn device(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::wpe_buffer_dma_buf_formats_get_device(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_get_format_fourcc")]
    #[doc(alias = "get_format_fourcc")]
    pub fn format_fourcc(&self, group: u32, format: u32) -> u32 {
        unsafe {
            ffi::wpe_buffer_dma_buf_formats_get_format_fourcc(self.to_glib_none().0, group, format)
        }
    }

    //#[doc(alias = "wpe_buffer_dma_buf_formats_get_format_modifiers")]
    //#[doc(alias = "get_format_modifiers")]
    // pub fn format_modifiers(&self, group: u32, format: u32) -> /*Unknown
    // conversion*//*Unimplemented*/Array TypeId { ns_id: 0, id: 9 } {    unsafe
    // { TODO: call ffi:wpe_buffer_dma_buf_formats_get_format_modifiers() }
    //}

    #[doc(alias = "wpe_buffer_dma_buf_formats_get_group_device")]
    #[doc(alias = "get_group_device")]
    pub fn group_device(&self, group: u32) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wpe_buffer_dma_buf_formats_get_group_device(
                self.to_glib_none().0,
                group,
            ))
        }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_get_group_n_formats")]
    #[doc(alias = "get_group_n_formats")]
    pub fn group_n_formats(&self, group: u32) -> u32 {
        unsafe { ffi::wpe_buffer_dma_buf_formats_get_group_n_formats(self.to_glib_none().0, group) }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_get_group_usage")]
    #[doc(alias = "get_group_usage")]
    pub fn group_usage(&self, group: u32) -> BufferDMABufFormatUsage {
        unsafe {
            from_glib(ffi::wpe_buffer_dma_buf_formats_get_group_usage(self.to_glib_none().0, group))
        }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_get_n_groups")]
    #[doc(alias = "get_n_groups")]
    pub fn n_groups(&self) -> u32 {
        unsafe { ffi::wpe_buffer_dma_buf_formats_get_n_groups(self.to_glib_none().0) }
    }
}

impl Default for BufferDMABufFormats {
    fn default() -> Self {
        Self::new()
    }
}

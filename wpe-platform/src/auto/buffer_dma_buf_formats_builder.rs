// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;

use crate::{ffi, BufferDMABufFormatUsage, BufferDMABufFormats};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct BufferDMABufFormatsBuilder(Shared<ffi::WPEBufferDMABufFormatsBuilder>);

    match fn {
        ref => |ptr| ffi::wpe_buffer_dma_buf_formats_builder_ref(ptr),
        unref => |ptr| ffi::wpe_buffer_dma_buf_formats_builder_unref(ptr),
        type_ => || ffi::wpe_buffer_dma_buf_formats_builder_get_type(),
    }
}

impl BufferDMABufFormatsBuilder {
    #[doc(alias = "wpe_buffer_dma_buf_formats_builder_new")]
    pub fn new(device: Option<&str>) -> BufferDMABufFormatsBuilder {
        unsafe {
            from_glib_full(ffi::wpe_buffer_dma_buf_formats_builder_new(device.to_glib_none().0))
        }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_builder_append_format")]
    pub fn append_format(&self, fourcc: u32, modifier: u64) {
        unsafe {
            ffi::wpe_buffer_dma_buf_formats_builder_append_format(
                self.to_glib_none().0,
                fourcc,
                modifier,
            );
        }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_builder_append_group")]
    pub fn append_group(&self, device: Option<&str>, usage: BufferDMABufFormatUsage) {
        unsafe {
            ffi::wpe_buffer_dma_buf_formats_builder_append_group(
                self.to_glib_none().0,
                device.to_glib_none().0,
                usage.into_glib(),
            );
        }
    }

    #[doc(alias = "wpe_buffer_dma_buf_formats_builder_end")]
    pub fn end(&self) -> Option<BufferDMABufFormats> {
        unsafe {
            from_glib_full(ffi::wpe_buffer_dma_buf_formats_builder_end(self.to_glib_none().0))
        }
    }
}

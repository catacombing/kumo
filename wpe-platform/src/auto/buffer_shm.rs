// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, Buffer, PixelFormat, View};

glib::wrapper! {
    #[doc(alias = "WPEBufferSHM")]
    pub struct BufferSHM(Object<ffi::WPEBufferSHM, ffi::WPEBufferSHMClass>) @extends Buffer;

    match fn {
        type_ => || ffi::wpe_buffer_shm_get_type(),
    }
}

impl BufferSHM {
    #[doc(alias = "wpe_buffer_shm_new")]
    pub fn new(
        view: &impl IsA<View>,
        width: i32,
        height: i32,
        format: PixelFormat,
        data: &glib::Bytes,
        stride: u32,
    ) -> BufferSHM {
        unsafe {
            from_glib_full(ffi::wpe_buffer_shm_new(
                view.as_ref().to_glib_none().0,
                width,
                height,
                format.into_glib(),
                data.to_glib_none().0,
                stride,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`BufferSHM`]
    /// objects.
    ///
    /// This method returns an instance of
    /// [`BufferSHMBuilder`](crate::builders::BufferSHMBuilder) which can be
    /// used to create [`BufferSHM`] objects.
    pub fn builder() -> BufferSHMBuilder {
        BufferSHMBuilder::new()
    }

    #[doc(alias = "wpe_buffer_shm_get_data")]
    #[doc(alias = "get_data")]
    pub fn data(&self) -> Option<glib::Bytes> {
        unsafe { from_glib_none(ffi::wpe_buffer_shm_get_data(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_buffer_shm_get_format")]
    #[doc(alias = "get_format")]
    pub fn format(&self) -> PixelFormat {
        unsafe { from_glib(ffi::wpe_buffer_shm_get_format(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_buffer_shm_get_stride")]
    #[doc(alias = "get_stride")]
    pub fn stride(&self) -> u32 {
        unsafe { ffi::wpe_buffer_shm_get_stride(self.to_glib_none().0) }
    }
}

impl Default for BufferSHM {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`BufferSHM`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct BufferSHMBuilder {
    builder: glib::object::ObjectBuilder<'static, BufferSHM>,
}

impl BufferSHMBuilder {
    fn new() -> Self {
        Self { builder: glib::object::Object::builder() }
    }

    pub fn data(self, data: &glib::Bytes) -> Self {
        Self { builder: self.builder.property("data", data.clone()) }
    }

    pub fn format(self, format: PixelFormat) -> Self {
        Self { builder: self.builder.property("format", format) }
    }

    pub fn stride(self, stride: u32) -> Self {
        Self { builder: self.builder.property("stride", stride) }
    }

    pub fn height(self, height: i32) -> Self {
        Self { builder: self.builder.property("height", height) }
    }

    pub fn view(self, view: &impl IsA<View>) -> Self {
        Self { builder: self.builder.property("view", view.clone().upcast()) }
    }

    pub fn width(self, width: i32) -> Self {
        Self { builder: self.builder.property("width", width) }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`BufferSHM`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to \
                  have side effects"]
    pub fn build(self) -> BufferSHM {
        self.builder.build()
    }
}

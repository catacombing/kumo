// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::prelude::*;
use glib::signal::{SignalHandlerId, connect_raw};
use glib::translate::*;

use crate::{ClipboardContent, Display, ffi};

glib::wrapper! {
    #[doc(alias = "WPEClipboard")]
    pub struct Clipboard(Object<ffi::WPEClipboard, ffi::WPEClipboardClass>);

    match fn {
        type_ => || ffi::wpe_clipboard_get_type(),
    }
}

impl Clipboard {
    pub const NONE: Option<&'static Clipboard> = None;

    #[doc(alias = "wpe_clipboard_new")]
    pub fn new(display: &impl IsA<Display>) -> Clipboard {
        unsafe { from_glib_full(ffi::wpe_clipboard_new(display.as_ref().to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Clipboard`]
    /// objects.
    ///
    /// This method returns an instance of
    /// [`ClipboardBuilder`](crate::builders::ClipboardBuilder) which can be
    /// used to create [`Clipboard`] objects.
    pub fn builder() -> ClipboardBuilder {
        ClipboardBuilder::new()
    }
}

impl Default for Clipboard {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Clipboard`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ClipboardBuilder {
    builder: glib::object::ObjectBuilder<'static, Clipboard>,
}

impl ClipboardBuilder {
    fn new() -> Self {
        Self { builder: glib::object::Object::builder() }
    }

    pub fn display(self, display: &impl IsA<Display>) -> Self {
        Self { builder: self.builder.property("display", display.clone().upcast()) }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Clipboard`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to \
                  have side effects"]
    pub fn build(self) -> Clipboard {
        self.builder.build()
    }
}

pub trait ClipboardExt: IsA<Clipboard> + 'static {
    #[doc(alias = "wpe_clipboard_get_change_count")]
    #[doc(alias = "get_change_count")]
    #[doc(alias = "change-count")]
    fn change_count(&self) -> i64 {
        unsafe { ffi::wpe_clipboard_get_change_count(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_clipboard_get_content")]
    #[doc(alias = "get_content")]
    fn content(&self) -> Option<ClipboardContent> {
        unsafe { from_glib_none(ffi::wpe_clipboard_get_content(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_clipboard_get_display")]
    #[doc(alias = "get_display")]
    fn display(&self) -> Option<Display> {
        unsafe { from_glib_none(ffi::wpe_clipboard_get_display(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_clipboard_get_formats")]
    #[doc(alias = "get_formats")]
    fn formats(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::wpe_clipboard_get_formats(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "wpe_clipboard_read_bytes")]
    fn read_bytes(&self, format: &str) -> Option<glib::Bytes> {
        unsafe {
            from_glib_full(ffi::wpe_clipboard_read_bytes(
                self.as_ref().to_glib_none().0,
                format.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "wpe_clipboard_read_text")]
    fn read_text(&self, format: &str) -> (Option<glib::GString>, usize) {
        unsafe {
            let mut size = std::mem::MaybeUninit::uninit();
            let ret = from_glib_full(ffi::wpe_clipboard_read_text(
                self.as_ref().to_glib_none().0,
                format.to_glib_none().0,
                size.as_mut_ptr(),
            ));
            (ret, size.assume_init())
        }
    }

    #[doc(alias = "wpe_clipboard_set_content")]
    fn set_content(&self, content: Option<&ClipboardContent>) {
        unsafe {
            ffi::wpe_clipboard_set_content(
                self.as_ref().to_glib_none().0,
                content.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "change-count")]
    fn connect_change_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_change_count_trampoline<
            P: IsA<Clipboard>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::WPEClipboard,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Clipboard::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::change-count".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_change_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Clipboard>> ClipboardExt for O {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::ffi;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ClipboardContent(Shared<ffi::WPEClipboardContent>);

    match fn {
        ref => |ptr| ffi::wpe_clipboard_content_ref(ptr),
        unref => |ptr| ffi::wpe_clipboard_content_unref(ptr),
        type_ => || ffi::wpe_clipboard_content_get_type(),
    }
}

impl ClipboardContent {
    #[doc(alias = "wpe_clipboard_content_new")]
    pub fn new() -> ClipboardContent {
        unsafe { from_glib_full(ffi::wpe_clipboard_content_new()) }
    }

    #[doc(alias = "wpe_clipboard_content_serialize")]
    pub fn serialize(&self, format: &str, stream: &impl IsA<gio::OutputStream>) -> bool {
        unsafe {
            from_glib(ffi::wpe_clipboard_content_serialize(
                self.to_glib_none().0,
                format.to_glib_none().0,
                stream.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "wpe_clipboard_content_set_bytes")]
    pub fn set_bytes(&self, format: &str, bytes: &glib::Bytes) {
        unsafe {
            ffi::wpe_clipboard_content_set_bytes(
                self.to_glib_none().0,
                format.to_glib_none().0,
                bytes.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "wpe_clipboard_content_set_text")]
    pub fn set_text(&self, text: &str) {
        unsafe {
            ffi::wpe_clipboard_content_set_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }
}

impl Default for ClipboardContent {
    fn default() -> Self {
        Self::new()
    }
}

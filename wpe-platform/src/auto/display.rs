// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, BufferDMABufFormats, Keymap};

glib::wrapper! {
    #[doc(alias = "WPEDisplay")]
    pub struct Display(Object<ffi::WPEDisplay, ffi::WPEDisplayClass>);

    match fn {
        type_ => || ffi::wpe_display_get_type(),
    }
}

impl Display {
    pub const NONE: Option<&'static Display> = None;

    #[doc(alias = "wpe_display_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]
    pub fn default() -> Option<Display> {
        unsafe { from_glib_none(ffi::wpe_display_get_default()) }
    }

    #[doc(alias = "wpe_display_get_primary")]
    #[doc(alias = "get_primary")]
    pub fn primary() -> Option<Display> {
        unsafe { from_glib_none(ffi::wpe_display_get_primary()) }
    }
}

pub trait DisplayExt: IsA<Display> + 'static {
    #[doc(alias = "wpe_display_connect")]
    fn connect(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_display_connect(self.as_ref().to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "wpe_display_get_drm_device")]
    #[doc(alias = "get_drm_device")]
    fn drm_device(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::wpe_display_get_drm_device(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_display_get_drm_render_node")]
    #[doc(alias = "get_drm_render_node")]
    fn drm_render_node(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wpe_display_get_drm_render_node(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "wpe_display_get_egl_display")]
    //#[doc(alias = "get_egl_display")]
    // fn egl_display(&self) -> Result</*Unimplemented*/Option<Basic: Pointer>,
    // glib::Error> {    unsafe { TODO: call ffi:wpe_display_get_egl_display() }
    //}

    #[doc(alias = "wpe_display_get_keymap")]
    #[doc(alias = "get_keymap")]
    fn keymap(&self) -> Result<Keymap, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_display_get_keymap(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_none(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "wpe_display_get_n_screens")]
    #[doc(alias = "get_n_screens")]
    fn n_screens(&self) -> u32 {
        unsafe { ffi::wpe_display_get_n_screens(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_display_get_preferred_dma_buf_formats")]
    #[doc(alias = "get_preferred_dma_buf_formats")]
    fn preferred_dma_buf_formats(&self) -> Option<BufferDMABufFormats> {
        unsafe {
            from_glib_none(ffi::wpe_display_get_preferred_dma_buf_formats(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //#[doc(alias = "wpe_display_get_screen")]
    //#[doc(alias = "get_screen")]
    // fn screen(&self, index: u32) -> /*Ignored*/Option<Screen> {
    //    unsafe { TODO: call ffi:wpe_display_get_screen() }
    //}

    //#[doc(alias = "wpe_display_get_settings")]
    //#[doc(alias = "get_settings")]
    // fn settings(&self) -> /*Ignored*/Option<Settings> {
    //    unsafe { TODO: call ffi:wpe_display_get_settings() }
    //}

    //#[doc(alias = "wpe_display_screen_added")]
    // fn screen_added(&self, screen: /*Ignored*/&Screen) {
    //    unsafe { TODO: call ffi:wpe_display_screen_added() }
    //}

    //#[doc(alias = "wpe_display_screen_removed")]
    // fn screen_removed(&self, screen: /*Ignored*/&Screen) {
    //    unsafe { TODO: call ffi:wpe_display_screen_removed() }
    //}

    #[doc(alias = "wpe_display_set_primary")]
    fn set_primary(&self) {
        unsafe {
            ffi::wpe_display_set_primary(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wpe_display_use_explicit_sync")]
    fn use_explicit_sync(&self) -> bool {
        unsafe { from_glib(ffi::wpe_display_use_explicit_sync(self.as_ref().to_glib_none().0)) }
    }

    //#[doc(alias = "screen-added")]
    // fn connect_screen_added<Unsupported or ignored types>(&self, f: F) ->
    // SignalHandlerId {    Ignored screen: WPEPlatform.Screen
    //}

    //#[doc(alias = "screen-removed")]
    // fn connect_screen_removed<Unsupported or ignored types>(&self, f: F) ->
    // SignalHandlerId {    Ignored screen: WPEPlatform.Screen
    //}
}

impl<O: IsA<Display>> DisplayExt for O {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;

use crate::ffi;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct DRMDevice(Shared<ffi::WPEDRMDevice>);

    match fn {
        ref => |ptr| ffi::wpe_drm_device_ref(ptr),
        unref => |ptr| ffi::wpe_drm_device_unref(ptr),
        type_ => || ffi::wpe_drm_device_get_type(),
    }
}

impl DRMDevice {
    #[doc(alias = "wpe_drm_device_new")]
    pub fn new(primary_node: &str, render_node: Option<&str>) -> DRMDevice {
        unsafe {
            from_glib_full(ffi::wpe_drm_device_new(
                primary_node.to_glib_none().0,
                render_node.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "wpe_drm_device_get_primary_node")]
    #[doc(alias = "get_primary_node")]
    pub fn primary_node(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::wpe_drm_device_get_primary_node(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_drm_device_get_render_node")]
    #[doc(alias = "get_render_node")]
    pub fn render_node(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::wpe_drm_device_get_render_node(self.to_glib_none().0)) }
    }
}

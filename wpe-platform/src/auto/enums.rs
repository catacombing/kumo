// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::ffi;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEBufferDMABufFormatUsage")]
pub enum BufferDMABufFormatUsage {
    #[doc(alias = "WPE_BUFFER_DMA_BUF_FORMAT_USAGE_RENDERING")]
    Rendering,
    #[doc(alias = "WPE_BUFFER_DMA_BUF_FORMAT_USAGE_MAPPING")]
    Mapping,
    #[doc(alias = "WPE_BUFFER_DMA_BUF_FORMAT_USAGE_SCANOUT")]
    Scanout,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for BufferDMABufFormatUsage {
    type GlibType = ffi::WPEBufferDMABufFormatUsage;

    #[inline]
    fn into_glib(self) -> ffi::WPEBufferDMABufFormatUsage {
        match self {
            Self::Rendering => ffi::WPE_BUFFER_DMA_BUF_FORMAT_USAGE_RENDERING,
            Self::Mapping => ffi::WPE_BUFFER_DMA_BUF_FORMAT_USAGE_MAPPING,
            Self::Scanout => ffi::WPE_BUFFER_DMA_BUF_FORMAT_USAGE_SCANOUT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEBufferDMABufFormatUsage> for BufferDMABufFormatUsage {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEBufferDMABufFormatUsage) -> Self {
        match value {
            ffi::WPE_BUFFER_DMA_BUF_FORMAT_USAGE_RENDERING => Self::Rendering,
            ffi::WPE_BUFFER_DMA_BUF_FORMAT_USAGE_MAPPING => Self::Mapping,
            ffi::WPE_BUFFER_DMA_BUF_FORMAT_USAGE_SCANOUT => Self::Scanout,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for BufferDMABufFormatUsage {
    #[inline]
    #[doc(alias = "wpe_buffer_dma_buf_format_usage_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_buffer_dma_buf_format_usage_get_type()) }
    }
}

impl glib::HasParamSpec for BufferDMABufFormatUsage {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for BufferDMABufFormatUsage {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for BufferDMABufFormatUsage {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for BufferDMABufFormatUsage {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<BufferDMABufFormatUsage> for glib::Value {
    #[inline]
    fn from(v: BufferDMABufFormatUsage) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEBufferError")]
pub enum BufferError {
    #[doc(alias = "WPE_BUFFER_ERROR_NOT_SUPPORTED")]
    NotSupported,
    #[doc(alias = "WPE_BUFFER_ERROR_IMPORT_FAILED")]
    ImportFailed,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for BufferError {
    type GlibType = ffi::WPEBufferError;

    #[inline]
    fn into_glib(self) -> ffi::WPEBufferError {
        match self {
            Self::NotSupported => ffi::WPE_BUFFER_ERROR_NOT_SUPPORTED,
            Self::ImportFailed => ffi::WPE_BUFFER_ERROR_IMPORT_FAILED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEBufferError> for BufferError {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEBufferError) -> Self {
        match value {
            ffi::WPE_BUFFER_ERROR_NOT_SUPPORTED => Self::NotSupported,
            ffi::WPE_BUFFER_ERROR_IMPORT_FAILED => Self::ImportFailed,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for BufferError {
    #[inline]
    fn domain() -> glib::Quark {
        unsafe { from_glib(ffi::wpe_buffer_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        match unsafe { from_glib(code) } {
            value => Some(value),
        }
    }
}

impl StaticType for BufferError {
    #[inline]
    #[doc(alias = "wpe_buffer_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_buffer_error_get_type()) }
    }
}

impl glib::HasParamSpec for BufferError {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for BufferError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for BufferError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for BufferError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<BufferError> for glib::Value {
    #[inline]
    fn from(v: BufferError) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEDisplayError")]
pub enum DisplayError {
    #[doc(alias = "WPE_DISPLAY_ERROR_NOT_SUPPORTED")]
    NotSupported,
    #[doc(alias = "WPE_DISPLAY_ERROR_CONNECTION_FAILED")]
    ConnectionFailed,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for DisplayError {
    type GlibType = ffi::WPEDisplayError;

    #[inline]
    fn into_glib(self) -> ffi::WPEDisplayError {
        match self {
            Self::NotSupported => ffi::WPE_DISPLAY_ERROR_NOT_SUPPORTED,
            Self::ConnectionFailed => ffi::WPE_DISPLAY_ERROR_CONNECTION_FAILED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEDisplayError> for DisplayError {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEDisplayError) -> Self {
        match value {
            ffi::WPE_DISPLAY_ERROR_NOT_SUPPORTED => Self::NotSupported,
            ffi::WPE_DISPLAY_ERROR_CONNECTION_FAILED => Self::ConnectionFailed,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for DisplayError {
    #[inline]
    fn domain() -> glib::Quark {
        unsafe { from_glib(ffi::wpe_display_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        match unsafe { from_glib(code) } {
            value => Some(value),
        }
    }
}

impl StaticType for DisplayError {
    #[inline]
    #[doc(alias = "wpe_display_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_display_error_get_type()) }
    }
}

impl glib::HasParamSpec for DisplayError {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for DisplayError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for DisplayError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for DisplayError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<DisplayError> for glib::Value {
    #[inline]
    fn from(v: DisplayError) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEEGLError")]
pub enum EGLError {
    #[doc(alias = "WPE_EGL_ERROR_NOT_AVAILABLE")]
    Available,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for EGLError {
    type GlibType = ffi::WPEEGLError;

    #[inline]
    fn into_glib(self) -> ffi::WPEEGLError {
        match self {
            Self::Available => ffi::WPE_EGL_ERROR_NOT_AVAILABLE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEEGLError> for EGLError {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEEGLError) -> Self {
        match value {
            ffi::WPE_EGL_ERROR_NOT_AVAILABLE => Self::Available,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for EGLError {
    #[inline]
    fn domain() -> glib::Quark {
        unsafe { from_glib(ffi::wpe_egl_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        match unsafe { from_glib(code) } {
            value => Some(value),
        }
    }
}

impl StaticType for EGLError {
    #[inline]
    #[doc(alias = "wpe_egl_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_egl_error_get_type()) }
    }
}

impl glib::HasParamSpec for EGLError {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for EGLError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for EGLError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for EGLError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<EGLError> for glib::Value {
    #[inline]
    fn from(v: EGLError) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEEventType")]
pub enum EventType {
    #[doc(alias = "WPE_EVENT_NONE")]
    None,
    #[doc(alias = "WPE_EVENT_POINTER_DOWN")]
    PointerDown,
    #[doc(alias = "WPE_EVENT_POINTER_UP")]
    PointerUp,
    #[doc(alias = "WPE_EVENT_POINTER_MOVE")]
    PointerMove,
    #[doc(alias = "WPE_EVENT_POINTER_ENTER")]
    PointerEnter,
    #[doc(alias = "WPE_EVENT_POINTER_LEAVE")]
    PointerLeave,
    #[doc(alias = "WPE_EVENT_SCROLL")]
    Scroll,
    #[doc(alias = "WPE_EVENT_KEYBOARD_KEY_DOWN")]
    KeyboardKeyDown,
    #[doc(alias = "WPE_EVENT_KEYBOARD_KEY_UP")]
    KeyboardKeyUp,
    #[doc(alias = "WPE_EVENT_TOUCH_DOWN")]
    TouchDown,
    #[doc(alias = "WPE_EVENT_TOUCH_UP")]
    TouchUp,
    #[doc(alias = "WPE_EVENT_TOUCH_MOVE")]
    TouchMove,
    #[doc(alias = "WPE_EVENT_TOUCH_CANCEL")]
    TouchCancel,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for EventType {
    type GlibType = ffi::WPEEventType;

    fn into_glib(self) -> ffi::WPEEventType {
        match self {
            Self::None => ffi::WPE_EVENT_NONE,
            Self::PointerDown => ffi::WPE_EVENT_POINTER_DOWN,
            Self::PointerUp => ffi::WPE_EVENT_POINTER_UP,
            Self::PointerMove => ffi::WPE_EVENT_POINTER_MOVE,
            Self::PointerEnter => ffi::WPE_EVENT_POINTER_ENTER,
            Self::PointerLeave => ffi::WPE_EVENT_POINTER_LEAVE,
            Self::Scroll => ffi::WPE_EVENT_SCROLL,
            Self::KeyboardKeyDown => ffi::WPE_EVENT_KEYBOARD_KEY_DOWN,
            Self::KeyboardKeyUp => ffi::WPE_EVENT_KEYBOARD_KEY_UP,
            Self::TouchDown => ffi::WPE_EVENT_TOUCH_DOWN,
            Self::TouchUp => ffi::WPE_EVENT_TOUCH_UP,
            Self::TouchMove => ffi::WPE_EVENT_TOUCH_MOVE,
            Self::TouchCancel => ffi::WPE_EVENT_TOUCH_CANCEL,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEEventType> for EventType {
    unsafe fn from_glib(value: ffi::WPEEventType) -> Self {
        match value {
            ffi::WPE_EVENT_NONE => Self::None,
            ffi::WPE_EVENT_POINTER_DOWN => Self::PointerDown,
            ffi::WPE_EVENT_POINTER_UP => Self::PointerUp,
            ffi::WPE_EVENT_POINTER_MOVE => Self::PointerMove,
            ffi::WPE_EVENT_POINTER_ENTER => Self::PointerEnter,
            ffi::WPE_EVENT_POINTER_LEAVE => Self::PointerLeave,
            ffi::WPE_EVENT_SCROLL => Self::Scroll,
            ffi::WPE_EVENT_KEYBOARD_KEY_DOWN => Self::KeyboardKeyDown,
            ffi::WPE_EVENT_KEYBOARD_KEY_UP => Self::KeyboardKeyUp,
            ffi::WPE_EVENT_TOUCH_DOWN => Self::TouchDown,
            ffi::WPE_EVENT_TOUCH_UP => Self::TouchUp,
            ffi::WPE_EVENT_TOUCH_MOVE => Self::TouchMove,
            ffi::WPE_EVENT_TOUCH_CANCEL => Self::TouchCancel,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for EventType {
    #[inline]
    #[doc(alias = "wpe_event_type_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_event_type_get_type()) }
    }
}

impl glib::HasParamSpec for EventType {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for EventType {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for EventType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for EventType {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<EventType> for glib::Value {
    #[inline]
    fn from(v: EventType) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEGamepadAxis")]
pub enum GamepadAxis {
    #[doc(alias = "WPE_GAMEPAD_AXIS_LEFT_X")]
    LeftX,
    #[doc(alias = "WPE_GAMEPAD_AXIS_LEFT_Y")]
    LeftY,
    #[doc(alias = "WPE_GAMEPAD_AXIS_RIGHT_X")]
    RightX,
    #[doc(alias = "WPE_GAMEPAD_AXIS_RIGHT_Y")]
    RightY,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for GamepadAxis {
    type GlibType = ffi::WPEGamepadAxis;

    #[inline]
    fn into_glib(self) -> ffi::WPEGamepadAxis {
        match self {
            Self::LeftX => ffi::WPE_GAMEPAD_AXIS_LEFT_X,
            Self::LeftY => ffi::WPE_GAMEPAD_AXIS_LEFT_Y,
            Self::RightX => ffi::WPE_GAMEPAD_AXIS_RIGHT_X,
            Self::RightY => ffi::WPE_GAMEPAD_AXIS_RIGHT_Y,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEGamepadAxis> for GamepadAxis {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEGamepadAxis) -> Self {
        match value {
            ffi::WPE_GAMEPAD_AXIS_LEFT_X => Self::LeftX,
            ffi::WPE_GAMEPAD_AXIS_LEFT_Y => Self::LeftY,
            ffi::WPE_GAMEPAD_AXIS_RIGHT_X => Self::RightX,
            ffi::WPE_GAMEPAD_AXIS_RIGHT_Y => Self::RightY,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for GamepadAxis {
    #[inline]
    #[doc(alias = "wpe_gamepad_axis_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_gamepad_axis_get_type()) }
    }
}

impl glib::HasParamSpec for GamepadAxis {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for GamepadAxis {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for GamepadAxis {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for GamepadAxis {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<GamepadAxis> for glib::Value {
    #[inline]
    fn from(v: GamepadAxis) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEGamepadButton")]
pub enum GamepadButton {
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_BOTTOM")]
    RightClusterBottom,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_RIGHT")]
    RightClusterRight,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_LEFT")]
    RightClusterLeft,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_TOP")]
    RightClusterTop,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_SHOULDER_FRONT")]
    LeftShoulderFront,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER_FRONT")]
    RightShoulderFront,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_SHOULDER_BACK")]
    LeftShoulderBack,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER_BACK")]
    RightShoulderBack,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_LEFT")]
    CenterClusterLeft,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_RIGHT")]
    CenterClusterRight,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_THUMB")]
    LeftThumb,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_RIGHT_THUMB")]
    RightThumb,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_TOP")]
    LeftClusterTop,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_BOTTOM")]
    LeftClusterBottom,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_LEFT")]
    LeftClusterLeft,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_RIGHT")]
    LeftClusterRight,
    #[doc(alias = "WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_CENTER")]
    CenterClusterCenter,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for GamepadButton {
    type GlibType = ffi::WPEGamepadButton;

    fn into_glib(self) -> ffi::WPEGamepadButton {
        match self {
            Self::RightClusterBottom => ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_BOTTOM,
            Self::RightClusterRight => ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_RIGHT,
            Self::RightClusterLeft => ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_LEFT,
            Self::RightClusterTop => ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_TOP,
            Self::LeftShoulderFront => ffi::WPE_GAMEPAD_BUTTON_LEFT_SHOULDER_FRONT,
            Self::RightShoulderFront => ffi::WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER_FRONT,
            Self::LeftShoulderBack => ffi::WPE_GAMEPAD_BUTTON_LEFT_SHOULDER_BACK,
            Self::RightShoulderBack => ffi::WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER_BACK,
            Self::CenterClusterLeft => ffi::WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_LEFT,
            Self::CenterClusterRight => ffi::WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_RIGHT,
            Self::LeftThumb => ffi::WPE_GAMEPAD_BUTTON_LEFT_THUMB,
            Self::RightThumb => ffi::WPE_GAMEPAD_BUTTON_RIGHT_THUMB,
            Self::LeftClusterTop => ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_TOP,
            Self::LeftClusterBottom => ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_BOTTOM,
            Self::LeftClusterLeft => ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_LEFT,
            Self::LeftClusterRight => ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_RIGHT,
            Self::CenterClusterCenter => ffi::WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_CENTER,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEGamepadButton> for GamepadButton {
    unsafe fn from_glib(value: ffi::WPEGamepadButton) -> Self {
        match value {
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_BOTTOM => Self::RightClusterBottom,
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_RIGHT => Self::RightClusterRight,
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_LEFT => Self::RightClusterLeft,
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_CLUSTER_TOP => Self::RightClusterTop,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_SHOULDER_FRONT => Self::LeftShoulderFront,
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER_FRONT => Self::RightShoulderFront,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_SHOULDER_BACK => Self::LeftShoulderBack,
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_SHOULDER_BACK => Self::RightShoulderBack,
            ffi::WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_LEFT => Self::CenterClusterLeft,
            ffi::WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_RIGHT => Self::CenterClusterRight,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_THUMB => Self::LeftThumb,
            ffi::WPE_GAMEPAD_BUTTON_RIGHT_THUMB => Self::RightThumb,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_TOP => Self::LeftClusterTop,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_BOTTOM => Self::LeftClusterBottom,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_LEFT => Self::LeftClusterLeft,
            ffi::WPE_GAMEPAD_BUTTON_LEFT_CLUSTER_RIGHT => Self::LeftClusterRight,
            ffi::WPE_GAMEPAD_BUTTON_CENTER_CLUSTER_CENTER => Self::CenterClusterCenter,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for GamepadButton {
    #[inline]
    #[doc(alias = "wpe_gamepad_button_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_gamepad_button_get_type()) }
    }
}

impl glib::HasParamSpec for GamepadButton {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for GamepadButton {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for GamepadButton {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for GamepadButton {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<GamepadButton> for glib::Value {
    #[inline]
    fn from(v: GamepadButton) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEGesture")]
pub enum Gesture {
    #[doc(alias = "WPE_GESTURE_NONE")]
    None,
    #[doc(alias = "WPE_GESTURE_TAP")]
    Tap,
    #[doc(alias = "WPE_GESTURE_DRAG")]
    Drag,
    #[doc(alias = "WPE_GESTURE_ZOOM")]
    Zoom,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Gesture {
    type GlibType = ffi::WPEGesture;

    #[inline]
    fn into_glib(self) -> ffi::WPEGesture {
        match self {
            Self::None => ffi::WPE_GESTURE_NONE,
            Self::Tap => ffi::WPE_GESTURE_TAP,
            Self::Drag => ffi::WPE_GESTURE_DRAG,
            Self::Zoom => ffi::WPE_GESTURE_ZOOM,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEGesture> for Gesture {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEGesture) -> Self {
        match value {
            ffi::WPE_GESTURE_NONE => Self::None,
            ffi::WPE_GESTURE_TAP => Self::Tap,
            ffi::WPE_GESTURE_DRAG => Self::Drag,
            ffi::WPE_GESTURE_ZOOM => Self::Zoom,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for Gesture {
    #[inline]
    #[doc(alias = "wpe_gesture_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_gesture_get_type()) }
    }
}

impl glib::HasParamSpec for Gesture {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for Gesture {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Gesture {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Gesture {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Gesture> for glib::Value {
    #[inline]
    fn from(v: Gesture) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEInputPurpose")]
pub enum InputPurpose {
    #[doc(alias = "WPE_INPUT_PURPOSE_FREE_FORM")]
    FreeForm,
    #[doc(alias = "WPE_INPUT_PURPOSE_ALPHA")]
    Alpha,
    #[doc(alias = "WPE_INPUT_PURPOSE_DIGITS")]
    Digits,
    #[doc(alias = "WPE_INPUT_PURPOSE_NUMBER")]
    Number,
    #[doc(alias = "WPE_INPUT_PURPOSE_PHONE")]
    Phone,
    #[doc(alias = "WPE_INPUT_PURPOSE_URL")]
    Url,
    #[doc(alias = "WPE_INPUT_PURPOSE_EMAIL")]
    Email,
    #[doc(alias = "WPE_INPUT_PURPOSE_NAME")]
    Name,
    #[doc(alias = "WPE_INPUT_PURPOSE_PASSWORD")]
    Password,
    #[doc(alias = "WPE_INPUT_PURPOSE_PIN")]
    Pin,
    #[doc(alias = "WPE_INPUT_PURPOSE_TERMINAL")]
    Terminal,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for InputPurpose {
    type GlibType = ffi::WPEInputPurpose;

    #[inline]
    fn into_glib(self) -> ffi::WPEInputPurpose {
        match self {
            Self::FreeForm => ffi::WPE_INPUT_PURPOSE_FREE_FORM,
            Self::Alpha => ffi::WPE_INPUT_PURPOSE_ALPHA,
            Self::Digits => ffi::WPE_INPUT_PURPOSE_DIGITS,
            Self::Number => ffi::WPE_INPUT_PURPOSE_NUMBER,
            Self::Phone => ffi::WPE_INPUT_PURPOSE_PHONE,
            Self::Url => ffi::WPE_INPUT_PURPOSE_URL,
            Self::Email => ffi::WPE_INPUT_PURPOSE_EMAIL,
            Self::Name => ffi::WPE_INPUT_PURPOSE_NAME,
            Self::Password => ffi::WPE_INPUT_PURPOSE_PASSWORD,
            Self::Pin => ffi::WPE_INPUT_PURPOSE_PIN,
            Self::Terminal => ffi::WPE_INPUT_PURPOSE_TERMINAL,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEInputPurpose> for InputPurpose {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEInputPurpose) -> Self {
        match value {
            ffi::WPE_INPUT_PURPOSE_FREE_FORM => Self::FreeForm,
            ffi::WPE_INPUT_PURPOSE_ALPHA => Self::Alpha,
            ffi::WPE_INPUT_PURPOSE_DIGITS => Self::Digits,
            ffi::WPE_INPUT_PURPOSE_NUMBER => Self::Number,
            ffi::WPE_INPUT_PURPOSE_PHONE => Self::Phone,
            ffi::WPE_INPUT_PURPOSE_URL => Self::Url,
            ffi::WPE_INPUT_PURPOSE_EMAIL => Self::Email,
            ffi::WPE_INPUT_PURPOSE_NAME => Self::Name,
            ffi::WPE_INPUT_PURPOSE_PASSWORD => Self::Password,
            ffi::WPE_INPUT_PURPOSE_PIN => Self::Pin,
            ffi::WPE_INPUT_PURPOSE_TERMINAL => Self::Terminal,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for InputPurpose {
    #[inline]
    #[doc(alias = "wpe_input_purpose_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_input_purpose_get_type()) }
    }
}

impl glib::HasParamSpec for InputPurpose {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for InputPurpose {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for InputPurpose {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for InputPurpose {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<InputPurpose> for glib::Value {
    #[inline]
    fn from(v: InputPurpose) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEInputSource")]
pub enum InputSource {
    #[doc(alias = "WPE_INPUT_SOURCE_MOUSE")]
    Mouse,
    #[doc(alias = "WPE_INPUT_SOURCE_PEN")]
    Pen,
    #[doc(alias = "WPE_INPUT_SOURCE_KEYBOARD")]
    Keyboard,
    #[doc(alias = "WPE_INPUT_SOURCE_TOUCHSCREEN")]
    Touchscreen,
    #[doc(alias = "WPE_INPUT_SOURCE_TOUCHPAD")]
    Touchpad,
    #[doc(alias = "WPE_INPUT_SOURCE_TRACKPOINT")]
    Trackpoint,
    #[doc(alias = "WPE_INPUT_SOURCE_TABLET_PAD")]
    TabletPad,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for InputSource {
    type GlibType = ffi::WPEInputSource;

    #[inline]
    fn into_glib(self) -> ffi::WPEInputSource {
        match self {
            Self::Mouse => ffi::WPE_INPUT_SOURCE_MOUSE,
            Self::Pen => ffi::WPE_INPUT_SOURCE_PEN,
            Self::Keyboard => ffi::WPE_INPUT_SOURCE_KEYBOARD,
            Self::Touchscreen => ffi::WPE_INPUT_SOURCE_TOUCHSCREEN,
            Self::Touchpad => ffi::WPE_INPUT_SOURCE_TOUCHPAD,
            Self::Trackpoint => ffi::WPE_INPUT_SOURCE_TRACKPOINT,
            Self::TabletPad => ffi::WPE_INPUT_SOURCE_TABLET_PAD,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEInputSource> for InputSource {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEInputSource) -> Self {
        match value {
            ffi::WPE_INPUT_SOURCE_MOUSE => Self::Mouse,
            ffi::WPE_INPUT_SOURCE_PEN => Self::Pen,
            ffi::WPE_INPUT_SOURCE_KEYBOARD => Self::Keyboard,
            ffi::WPE_INPUT_SOURCE_TOUCHSCREEN => Self::Touchscreen,
            ffi::WPE_INPUT_SOURCE_TOUCHPAD => Self::Touchpad,
            ffi::WPE_INPUT_SOURCE_TRACKPOINT => Self::Trackpoint,
            ffi::WPE_INPUT_SOURCE_TABLET_PAD => Self::TabletPad,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for InputSource {
    #[inline]
    #[doc(alias = "wpe_input_source_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_input_source_get_type()) }
    }
}

impl glib::HasParamSpec for InputSource {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for InputSource {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for InputSource {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for InputSource {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<InputSource> for glib::Value {
    #[inline]
    fn from(v: InputSource) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEPixelFormat")]
pub enum PixelFormat {
    #[doc(alias = "WPE_PIXEL_FORMAT_ARGB8888")]
    Argb8888,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for PixelFormat {
    type GlibType = ffi::WPEPixelFormat;

    #[inline]
    fn into_glib(self) -> ffi::WPEPixelFormat {
        match self {
            Self::Argb8888 => ffi::WPE_PIXEL_FORMAT_ARGB8888,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEPixelFormat> for PixelFormat {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEPixelFormat) -> Self {
        match value {
            ffi::WPE_PIXEL_FORMAT_ARGB8888 => Self::Argb8888,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for PixelFormat {
    #[inline]
    #[doc(alias = "wpe_pixel_format_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_pixel_format_get_type()) }
    }
}

impl glib::HasParamSpec for PixelFormat {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for PixelFormat {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for PixelFormat {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for PixelFormat {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<PixelFormat> for glib::Value {
    #[inline]
    fn from(v: PixelFormat) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPESettingsError")]
pub enum SettingsError {
    #[doc(alias = "WPE_SETTINGS_ERROR_INCORRECT_TYPE")]
    IncorrectType,
    #[doc(alias = "WPE_SETTINGS_ERROR_NOT_REGISTERED")]
    NotRegistered,
    #[doc(alias = "WPE_SETTINGS_ERROR_ALREADY_REGISTERED")]
    AlreadyRegistered,
    #[doc(alias = "WPE_SETTINGS_ERROR_INVALID_VALUE")]
    InvalidValue,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for SettingsError {
    type GlibType = ffi::WPESettingsError;

    #[inline]
    fn into_glib(self) -> ffi::WPESettingsError {
        match self {
            Self::IncorrectType => ffi::WPE_SETTINGS_ERROR_INCORRECT_TYPE,
            Self::NotRegistered => ffi::WPE_SETTINGS_ERROR_NOT_REGISTERED,
            Self::AlreadyRegistered => ffi::WPE_SETTINGS_ERROR_ALREADY_REGISTERED,
            Self::InvalidValue => ffi::WPE_SETTINGS_ERROR_INVALID_VALUE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPESettingsError> for SettingsError {
    #[inline]
    unsafe fn from_glib(value: ffi::WPESettingsError) -> Self {
        match value {
            ffi::WPE_SETTINGS_ERROR_INCORRECT_TYPE => Self::IncorrectType,
            ffi::WPE_SETTINGS_ERROR_NOT_REGISTERED => Self::NotRegistered,
            ffi::WPE_SETTINGS_ERROR_ALREADY_REGISTERED => Self::AlreadyRegistered,
            ffi::WPE_SETTINGS_ERROR_INVALID_VALUE => Self::InvalidValue,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for SettingsError {
    #[inline]
    fn domain() -> glib::Quark {
        unsafe { from_glib(ffi::wpe_settings_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        match unsafe { from_glib(code) } {
            value => Some(value),
        }
    }
}

impl StaticType for SettingsError {
    #[inline]
    #[doc(alias = "wpe_settings_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_settings_error_get_type()) }
    }
}

impl glib::HasParamSpec for SettingsError {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for SettingsError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for SettingsError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SettingsError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<SettingsError> for glib::Value {
    #[inline]
    fn from(v: SettingsError) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPESettingsHintingStyle")]
pub enum SettingsHintingStyle {
    #[doc(alias = "WPE_SETTINGS_HINTING_STYLE_NONE")]
    None,
    #[doc(alias = "WPE_SETTINGS_HINTING_STYLE_SLIGHT")]
    Slight,
    #[doc(alias = "WPE_SETTINGS_HINTING_STYLE_MEDIUM")]
    Medium,
    #[doc(alias = "WPE_SETTINGS_HINTING_STYLE_FULL")]
    Full,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for SettingsHintingStyle {
    type GlibType = ffi::WPESettingsHintingStyle;

    #[inline]
    fn into_glib(self) -> ffi::WPESettingsHintingStyle {
        match self {
            Self::None => ffi::WPE_SETTINGS_HINTING_STYLE_NONE,
            Self::Slight => ffi::WPE_SETTINGS_HINTING_STYLE_SLIGHT,
            Self::Medium => ffi::WPE_SETTINGS_HINTING_STYLE_MEDIUM,
            Self::Full => ffi::WPE_SETTINGS_HINTING_STYLE_FULL,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPESettingsHintingStyle> for SettingsHintingStyle {
    #[inline]
    unsafe fn from_glib(value: ffi::WPESettingsHintingStyle) -> Self {
        match value {
            ffi::WPE_SETTINGS_HINTING_STYLE_NONE => Self::None,
            ffi::WPE_SETTINGS_HINTING_STYLE_SLIGHT => Self::Slight,
            ffi::WPE_SETTINGS_HINTING_STYLE_MEDIUM => Self::Medium,
            ffi::WPE_SETTINGS_HINTING_STYLE_FULL => Self::Full,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SettingsHintingStyle {
    #[inline]
    #[doc(alias = "wpe_settings_hinting_style_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_settings_hinting_style_get_type()) }
    }
}

impl glib::HasParamSpec for SettingsHintingStyle {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for SettingsHintingStyle {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for SettingsHintingStyle {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SettingsHintingStyle {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<SettingsHintingStyle> for glib::Value {
    #[inline]
    fn from(v: SettingsHintingStyle) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPESettingsSource")]
pub enum SettingsSource {
    #[doc(alias = "WPE_SETTINGS_SOURCE_PLATFORM")]
    Platform,
    #[doc(alias = "WPE_SETTINGS_SOURCE_APPLICATION")]
    Application,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for SettingsSource {
    type GlibType = ffi::WPESettingsSource;

    #[inline]
    fn into_glib(self) -> ffi::WPESettingsSource {
        match self {
            Self::Platform => ffi::WPE_SETTINGS_SOURCE_PLATFORM,
            Self::Application => ffi::WPE_SETTINGS_SOURCE_APPLICATION,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPESettingsSource> for SettingsSource {
    #[inline]
    unsafe fn from_glib(value: ffi::WPESettingsSource) -> Self {
        match value {
            ffi::WPE_SETTINGS_SOURCE_PLATFORM => Self::Platform,
            ffi::WPE_SETTINGS_SOURCE_APPLICATION => Self::Application,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SettingsSource {
    #[inline]
    #[doc(alias = "wpe_settings_source_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_settings_source_get_type()) }
    }
}

impl glib::HasParamSpec for SettingsSource {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for SettingsSource {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for SettingsSource {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SettingsSource {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<SettingsSource> for glib::Value {
    #[inline]
    fn from(v: SettingsSource) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPESettingsSubpixelLayout")]
pub enum SettingsSubpixelLayout {
    #[doc(alias = "WPE_SETTINGS_SUBPIXEL_LAYOUT_RGB")]
    Rgb,
    #[doc(alias = "WPE_SETTINGS_SUBPIXEL_LAYOUT_BGR")]
    Bgr,
    #[doc(alias = "WPE_SETTINGS_SUBPIXEL_LAYOUT_VRGB")]
    Vrgb,
    #[doc(alias = "WPE_SETTINGS_SUBPIXEL_LAYOUT_VBGR")]
    Vbgr,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for SettingsSubpixelLayout {
    type GlibType = ffi::WPESettingsSubpixelLayout;

    #[inline]
    fn into_glib(self) -> ffi::WPESettingsSubpixelLayout {
        match self {
            Self::Rgb => ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_RGB,
            Self::Bgr => ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_BGR,
            Self::Vrgb => ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_VRGB,
            Self::Vbgr => ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_VBGR,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPESettingsSubpixelLayout> for SettingsSubpixelLayout {
    #[inline]
    unsafe fn from_glib(value: ffi::WPESettingsSubpixelLayout) -> Self {
        match value {
            ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_RGB => Self::Rgb,
            ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_BGR => Self::Bgr,
            ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_VRGB => Self::Vrgb,
            ffi::WPE_SETTINGS_SUBPIXEL_LAYOUT_VBGR => Self::Vbgr,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SettingsSubpixelLayout {
    #[inline]
    #[doc(alias = "wpe_settings_subpixel_layout_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_settings_subpixel_layout_get_type()) }
    }
}

impl glib::HasParamSpec for SettingsSubpixelLayout {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for SettingsSubpixelLayout {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for SettingsSubpixelLayout {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SettingsSubpixelLayout {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<SettingsSubpixelLayout> for glib::Value {
    #[inline]
    fn from(v: SettingsSubpixelLayout) -> Self {
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "WPEViewError")]
pub enum ViewError {
    #[doc(alias = "WPE_VIEW_ERROR_RENDER_FAILED")]
    Failed,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for ViewError {
    type GlibType = ffi::WPEViewError;

    #[inline]
    fn into_glib(self) -> ffi::WPEViewError {
        match self {
            Self::Failed => ffi::WPE_VIEW_ERROR_RENDER_FAILED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEViewError> for ViewError {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEViewError) -> Self {
        match value {
            ffi::WPE_VIEW_ERROR_RENDER_FAILED => Self::Failed,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for ViewError {
    #[inline]
    fn domain() -> glib::Quark {
        unsafe { from_glib(ffi::wpe_view_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        match unsafe { from_glib(code) } {
            Self::__Unknown(_) => Some(Self::Failed),
            value => Some(value),
        }
    }
}

impl StaticType for ViewError {
    #[inline]
    #[doc(alias = "wpe_view_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_view_error_get_type()) }
    }
}

impl glib::HasParamSpec for ViewError {
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for ViewError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for ViewError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for ViewError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<ViewError> for glib::Value {
    #[inline]
    fn from(v: ViewError) -> Self {
        ToValue::to_value(&v)
    }
}

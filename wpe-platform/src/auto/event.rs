// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, EventType, InputSource, Modifiers, View};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Event(Shared<ffi::WPEEvent>);

    match fn {
        ref => |ptr| ffi::wpe_event_ref(ptr),
        unref => |ptr| ffi::wpe_event_unref(ptr),
        type_ => || ffi::wpe_event_get_type(),
    }
}

impl Event {
    #[doc(alias = "wpe_event_keyboard_new")]
    pub fn keyboard_new(
        type_: EventType,
        view: &impl IsA<View>,
        source: InputSource,
        time: u32,
        modifiers: Modifiers,
        keycode: u32,
        keyval: u32,
    ) -> Event {
        unsafe {
            from_glib_full(ffi::wpe_event_keyboard_new(
                type_.into_glib(),
                view.as_ref().to_glib_none().0,
                source.into_glib(),
                time,
                modifiers.into_glib(),
                keycode,
                keyval,
            ))
        }
    }

    #[doc(alias = "wpe_event_pointer_button_new")]
    pub fn pointer_button_new(
        type_: EventType,
        view: &impl IsA<View>,
        source: InputSource,
        time: u32,
        modifiers: Modifiers,
        button: u32,
        x: f64,
        y: f64,
        press_count: u32,
    ) -> Event {
        unsafe {
            from_glib_full(ffi::wpe_event_pointer_button_new(
                type_.into_glib(),
                view.as_ref().to_glib_none().0,
                source.into_glib(),
                time,
                modifiers.into_glib(),
                button,
                x,
                y,
                press_count,
            ))
        }
    }

    #[doc(alias = "wpe_event_pointer_move_new")]
    pub fn pointer_move_new(
        type_: EventType,
        view: &impl IsA<View>,
        source: InputSource,
        time: u32,
        modifiers: Modifiers,
        x: f64,
        y: f64,
        delta_x: f64,
        delta_y: f64,
    ) -> Event {
        unsafe {
            from_glib_full(ffi::wpe_event_pointer_move_new(
                type_.into_glib(),
                view.as_ref().to_glib_none().0,
                source.into_glib(),
                time,
                modifiers.into_glib(),
                x,
                y,
                delta_x,
                delta_y,
            ))
        }
    }

    #[doc(alias = "wpe_event_scroll_new")]
    pub fn scroll_new(
        view: &impl IsA<View>,
        source: InputSource,
        time: u32,
        modifiers: Modifiers,
        delta_x: f64,
        delta_y: f64,
        precise_deltas: bool,
        is_stop: bool,
        x: f64,
        y: f64,
    ) -> Event {
        unsafe {
            from_glib_full(ffi::wpe_event_scroll_new(
                view.as_ref().to_glib_none().0,
                source.into_glib(),
                time,
                modifiers.into_glib(),
                delta_x,
                delta_y,
                precise_deltas.into_glib(),
                is_stop.into_glib(),
                x,
                y,
            ))
        }
    }

    #[doc(alias = "wpe_event_touch_new")]
    pub fn touch_new(
        type_: EventType,
        view: &impl IsA<View>,
        source: InputSource,
        time: u32,
        modifiers: Modifiers,
        sequence_id: u32,
        x: f64,
        y: f64,
    ) -> Event {
        unsafe {
            from_glib_full(ffi::wpe_event_touch_new(
                type_.into_glib(),
                view.as_ref().to_glib_none().0,
                source.into_glib(),
                time,
                modifiers.into_glib(),
                sequence_id,
                x,
                y,
            ))
        }
    }

    #[doc(alias = "wpe_event_get_event_type")]
    #[doc(alias = "get_event_type")]
    pub fn event_type(&self) -> EventType {
        unsafe { from_glib(ffi::wpe_event_get_event_type(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_event_get_input_source")]
    #[doc(alias = "get_input_source")]
    pub fn input_source(&self) -> InputSource {
        unsafe { from_glib(ffi::wpe_event_get_input_source(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_event_get_modifiers")]
    #[doc(alias = "get_modifiers")]
    pub fn modifiers(&self) -> Modifiers {
        unsafe { from_glib(ffi::wpe_event_get_modifiers(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_event_get_position")]
    #[doc(alias = "get_position")]
    pub fn position(&self) -> Option<(f64, f64)> {
        unsafe {
            let mut x = std::mem::MaybeUninit::uninit();
            let mut y = std::mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::wpe_event_get_position(
                self.to_glib_none().0,
                x.as_mut_ptr(),
                y.as_mut_ptr(),
            ));
            if ret {
                Some((x.assume_init(), y.assume_init()))
            } else {
                None
            }
        }
    }

    #[doc(alias = "wpe_event_get_time")]
    #[doc(alias = "get_time")]
    pub fn time(&self) -> u32 {
        unsafe { ffi::wpe_event_get_time(self.to_glib_none().0) }
    }

    #[doc(alias = "wpe_event_get_view")]
    #[doc(alias = "get_view")]
    pub fn view(&self) -> Option<View> {
        unsafe { from_glib_none(ffi::wpe_event_get_view(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_event_keyboard_get_keycode")]
    pub fn keyboard_get_keycode(&self) -> u32 {
        unsafe { ffi::wpe_event_keyboard_get_keycode(self.to_glib_none().0) }
    }

    #[doc(alias = "wpe_event_keyboard_get_keyval")]
    pub fn keyboard_get_keyval(&self) -> u32 {
        unsafe { ffi::wpe_event_keyboard_get_keyval(self.to_glib_none().0) }
    }

    #[doc(alias = "wpe_event_pointer_button_get_button")]
    pub fn pointer_button_get_button(&self) -> u32 {
        unsafe { ffi::wpe_event_pointer_button_get_button(self.to_glib_none().0) }
    }

    #[doc(alias = "wpe_event_pointer_button_get_press_count")]
    pub fn pointer_button_get_press_count(&self) -> u32 {
        unsafe { ffi::wpe_event_pointer_button_get_press_count(self.to_glib_none().0) }
    }

    #[doc(alias = "wpe_event_pointer_move_get_delta")]
    pub fn pointer_move_get_delta(&self) -> (f64, f64) {
        unsafe {
            let mut delta_x = std::mem::MaybeUninit::uninit();
            let mut delta_y = std::mem::MaybeUninit::uninit();
            ffi::wpe_event_pointer_move_get_delta(
                self.to_glib_none().0,
                delta_x.as_mut_ptr(),
                delta_y.as_mut_ptr(),
            );
            (delta_x.assume_init(), delta_y.assume_init())
        }
    }

    #[doc(alias = "wpe_event_scroll_get_deltas")]
    pub fn scroll_get_deltas(&self) -> (f64, f64) {
        unsafe {
            let mut delta_x = std::mem::MaybeUninit::uninit();
            let mut delta_y = std::mem::MaybeUninit::uninit();
            ffi::wpe_event_scroll_get_deltas(
                self.to_glib_none().0,
                delta_x.as_mut_ptr(),
                delta_y.as_mut_ptr(),
            );
            (delta_x.assume_init(), delta_y.assume_init())
        }
    }

    #[doc(alias = "wpe_event_scroll_has_precise_deltas")]
    pub fn scroll_has_precise_deltas(&self) -> bool {
        unsafe { from_glib(ffi::wpe_event_scroll_has_precise_deltas(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_event_scroll_is_stop")]
    pub fn scroll_is_stop(&self) -> bool {
        unsafe { from_glib(ffi::wpe_event_scroll_is_stop(self.to_glib_none().0)) }
    }

    #[doc(alias = "wpe_event_touch_get_sequence_id")]
    pub fn touch_get_sequence_id(&self) -> u32 {
        unsafe { ffi::wpe_event_touch_get_sequence_id(self.to_glib_none().0) }
    }
}

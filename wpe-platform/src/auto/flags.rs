// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::bitflags::bitflags;
use glib::prelude::*;
use glib::translate::*;

use crate::ffi;

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "WPEInputHints")]
    pub struct InputHints: u32 {
        #[doc(alias = "WPE_INPUT_HINT_NONE")]
        const NONE = ffi::WPE_INPUT_HINT_NONE as _;
        #[doc(alias = "WPE_INPUT_HINT_SPELLCHECK")]
        const SPELLCHECK = ffi::WPE_INPUT_HINT_SPELLCHECK as _;
        #[doc(alias = "WPE_INPUT_HINT_NO_SPELLCHECK")]
        const NO_SPELLCHECK = ffi::WPE_INPUT_HINT_NO_SPELLCHECK as _;
        #[doc(alias = "WPE_INPUT_HINT_WORD_COMPLETION")]
        const WORD_COMPLETION = ffi::WPE_INPUT_HINT_WORD_COMPLETION as _;
        #[doc(alias = "WPE_INPUT_HINT_LOWERCASE")]
        const LOWERCASE = ffi::WPE_INPUT_HINT_LOWERCASE as _;
        #[doc(alias = "WPE_INPUT_HINT_UPPERCASE_CHARS")]
        const UPPERCASE_CHARS = ffi::WPE_INPUT_HINT_UPPERCASE_CHARS as _;
        #[doc(alias = "WPE_INPUT_HINT_UPPERCASE_WORDS")]
        const UPPERCASE_WORDS = ffi::WPE_INPUT_HINT_UPPERCASE_WORDS as _;
        #[doc(alias = "WPE_INPUT_HINT_UPPERCASE_SENTENCES")]
        const UPPERCASE_SENTENCES = ffi::WPE_INPUT_HINT_UPPERCASE_SENTENCES as _;
        #[doc(alias = "WPE_INPUT_HINT_INHIBIT_OSK")]
        const INHIBIT_OSK = ffi::WPE_INPUT_HINT_INHIBIT_OSK as _;
        #[doc(alias = "WPE_INPUT_HINT_VERTICAL_WRITING")]
        const VERTICAL_WRITING = ffi::WPE_INPUT_HINT_VERTICAL_WRITING as _;
        #[doc(alias = "WPE_INPUT_HINT_EMOJI")]
        const EMOJI = ffi::WPE_INPUT_HINT_EMOJI as _;
        #[doc(alias = "WPE_INPUT_HINT_NO_EMOJI")]
        const NO_EMOJI = ffi::WPE_INPUT_HINT_NO_EMOJI as _;
        #[doc(alias = "WPE_INPUT_HINT_PRIVATE")]
        const PRIVATE = ffi::WPE_INPUT_HINT_PRIVATE as _;
    }
}

#[doc(hidden)]
impl IntoGlib for InputHints {
    type GlibType = ffi::WPEInputHints;

    #[inline]
    fn into_glib(self) -> ffi::WPEInputHints {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEInputHints> for InputHints {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEInputHints) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for InputHints {
    #[inline]
    #[doc(alias = "wpe_input_hints_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_input_hints_get_type()) }
    }
}

impl glib::HasParamSpec for InputHints {
    type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    type ParamSpec = glib::ParamSpecFlags;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder
    }
}

impl glib::value::ValueType for InputHints {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for InputHints {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for InputHints {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<InputHints> for glib::Value {
    #[inline]
    fn from(v: InputHints) -> Self {
        ToValue::to_value(&v)
    }
}

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "WPEModifiers")]
    pub struct Modifiers: u32 {
        #[doc(alias = "WPE_MODIFIER_KEYBOARD_CONTROL")]
        const KEYBOARD_CONTROL = ffi::WPE_MODIFIER_KEYBOARD_CONTROL as _;
        #[doc(alias = "WPE_MODIFIER_KEYBOARD_SHIFT")]
        const KEYBOARD_SHIFT = ffi::WPE_MODIFIER_KEYBOARD_SHIFT as _;
        #[doc(alias = "WPE_MODIFIER_KEYBOARD_ALT")]
        const KEYBOARD_ALT = ffi::WPE_MODIFIER_KEYBOARD_ALT as _;
        #[doc(alias = "WPE_MODIFIER_KEYBOARD_META")]
        const KEYBOARD_META = ffi::WPE_MODIFIER_KEYBOARD_META as _;
        #[doc(alias = "WPE_MODIFIER_KEYBOARD_CAPS_LOCK")]
        const KEYBOARD_CAPS_LOCK = ffi::WPE_MODIFIER_KEYBOARD_CAPS_LOCK as _;
        #[doc(alias = "WPE_MODIFIER_POINTER_BUTTON1")]
        const POINTER_BUTTON1 = ffi::WPE_MODIFIER_POINTER_BUTTON1 as _;
        #[doc(alias = "WPE_MODIFIER_POINTER_BUTTON2")]
        const POINTER_BUTTON2 = ffi::WPE_MODIFIER_POINTER_BUTTON2 as _;
        #[doc(alias = "WPE_MODIFIER_POINTER_BUTTON3")]
        const POINTER_BUTTON3 = ffi::WPE_MODIFIER_POINTER_BUTTON3 as _;
        #[doc(alias = "WPE_MODIFIER_POINTER_BUTTON4")]
        const POINTER_BUTTON4 = ffi::WPE_MODIFIER_POINTER_BUTTON4 as _;
        #[doc(alias = "WPE_MODIFIER_POINTER_BUTTON5")]
        const POINTER_BUTTON5 = ffi::WPE_MODIFIER_POINTER_BUTTON5 as _;
    }
}

#[doc(hidden)]
impl IntoGlib for Modifiers {
    type GlibType = ffi::WPEModifiers;

    #[inline]
    fn into_glib(self) -> ffi::WPEModifiers {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEModifiers> for Modifiers {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEModifiers) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for Modifiers {
    #[inline]
    #[doc(alias = "wpe_modifiers_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_modifiers_get_type()) }
    }
}

impl glib::HasParamSpec for Modifiers {
    type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    type ParamSpec = glib::ParamSpecFlags;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder
    }
}

impl glib::value::ValueType for Modifiers {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Modifiers {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for Modifiers {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Modifiers> for glib::Value {
    #[inline]
    fn from(v: Modifiers) -> Self {
        ToValue::to_value(&v)
    }
}

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "WPEToplevelState")]
    pub struct ToplevelState: u32 {
        #[doc(alias = "WPE_TOPLEVEL_STATE_NONE")]
        const NONE = ffi::WPE_TOPLEVEL_STATE_NONE as _;
        #[doc(alias = "WPE_TOPLEVEL_STATE_FULLSCREEN")]
        const FULLSCREEN = ffi::WPE_TOPLEVEL_STATE_FULLSCREEN as _;
        #[doc(alias = "WPE_TOPLEVEL_STATE_MAXIMIZED")]
        const MAXIMIZED = ffi::WPE_TOPLEVEL_STATE_MAXIMIZED as _;
        #[doc(alias = "WPE_TOPLEVEL_STATE_ACTIVE")]
        const ACTIVE = ffi::WPE_TOPLEVEL_STATE_ACTIVE as _;
    }
}

#[doc(hidden)]
impl IntoGlib for ToplevelState {
    type GlibType = ffi::WPEToplevelState;

    #[inline]
    fn into_glib(self) -> ffi::WPEToplevelState {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WPEToplevelState> for ToplevelState {
    #[inline]
    unsafe fn from_glib(value: ffi::WPEToplevelState) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for ToplevelState {
    #[inline]
    #[doc(alias = "wpe_toplevel_state_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::wpe_toplevel_state_get_type()) }
    }
}

impl glib::HasParamSpec for ToplevelState {
    type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    type ParamSpec = glib::ParamSpecFlags;
    type SetValue = Self;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder
    }
}

impl glib::value::ValueType for ToplevelState {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for ToplevelState {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for ToplevelState {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<ToplevelState> for glib::Value {
    #[inline]
    fn from(v: ToplevelState) -> Self {
        ToValue::to_value(&v)
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::object::ObjectType as _;
use glib::prelude::*;
use glib::signal::{SignalHandlerId, connect_raw};
use glib::translate::*;

use crate::{GamepadAxis, GamepadButton, ffi};

glib::wrapper! {
    #[doc(alias = "WPEGamepad")]
    pub struct Gamepad(Object<ffi::WPEGamepad, ffi::WPEGamepadClass>);

    match fn {
        type_ => || ffi::wpe_gamepad_get_type(),
    }
}

impl Gamepad {
    pub const NONE: Option<&'static Gamepad> = None;
}

pub trait GamepadExt: IsA<Gamepad> + 'static {
    #[doc(alias = "wpe_gamepad_axis_event")]
    fn axis_event(&self, axis: GamepadAxis, value: f64) {
        unsafe {
            ffi::wpe_gamepad_axis_event(self.as_ref().to_glib_none().0, axis.into_glib(), value);
        }
    }

    #[doc(alias = "wpe_gamepad_button_event")]
    fn button_event(&self, button: GamepadButton, is_pressed: bool) {
        unsafe {
            ffi::wpe_gamepad_button_event(
                self.as_ref().to_glib_none().0,
                button.into_glib(),
                is_pressed.into_glib(),
            );
        }
    }

    #[doc(alias = "wpe_gamepad_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::wpe_gamepad_get_name(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_gamepad_start_input_monitor")]
    fn start_input_monitor(&self) {
        unsafe {
            ffi::wpe_gamepad_start_input_monitor(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wpe_gamepad_stop_input_monitor")]
    fn stop_input_monitor(&self) {
        unsafe {
            ffi::wpe_gamepad_stop_input_monitor(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "axis-event")]
    fn connect_axis_event<F: Fn(&Self, GamepadAxis, f64) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn axis_event_trampoline<
            P: IsA<Gamepad>,
            F: Fn(&P, GamepadAxis, f64) + 'static,
        >(
            this: *mut ffi::WPEGamepad,
            axis: ffi::WPEGamepadAxis,
            value: std::ffi::c_double,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Gamepad::from_glib_borrow(this).unsafe_cast_ref(), from_glib(axis), value)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"axis-event".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    axis_event_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "button-event")]
    fn connect_button_event<F: Fn(&Self, GamepadButton, bool) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn button_event_trampoline<
            P: IsA<Gamepad>,
            F: Fn(&P, GamepadButton, bool) + 'static,
        >(
            this: *mut ffi::WPEGamepad,
            button: ffi::WPEGamepadButton,
            is_pressed: glib::ffi::gboolean,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                Gamepad::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(button),
                from_glib(is_pressed),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"button-event".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    button_event_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Gamepad>> GamepadExt for O {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::object::ObjectType as _;
use glib::prelude::*;
use glib::signal::{SignalHandlerId, connect_raw};
use glib::translate::*;

use crate::{Gamepad, ffi};

glib::wrapper! {
    #[doc(alias = "WPEGamepadManager")]
    pub struct GamepadManager(Object<ffi::WPEGamepadManager, ffi::WPEGamepadManagerClass>);

    match fn {
        type_ => || ffi::wpe_gamepad_manager_get_type(),
    }
}

impl GamepadManager {
    pub const NONE: Option<&'static GamepadManager> = None;
}

pub trait GamepadManagerExt: IsA<GamepadManager> + 'static {
    #[doc(alias = "wpe_gamepad_manager_add_device")]
    fn add_device(&self, gamepad: &impl IsA<Gamepad>) {
        unsafe {
            ffi::wpe_gamepad_manager_add_device(
                self.as_ref().to_glib_none().0,
                gamepad.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "wpe_gamepad_manager_list_devices")]
    fn list_devices(&self) -> Vec<Gamepad> {
        unsafe {
            let mut n_devices = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_container_num(
                ffi::wpe_gamepad_manager_list_devices(
                    self.as_ref().to_glib_none().0,
                    n_devices.as_mut_ptr(),
                ),
                n_devices.assume_init() as _,
            );
            ret
        }
    }

    #[doc(alias = "wpe_gamepad_manager_remove_device")]
    fn remove_device(&self, gamepad: &impl IsA<Gamepad>) {
        unsafe {
            ffi::wpe_gamepad_manager_remove_device(
                self.as_ref().to_glib_none().0,
                gamepad.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "device-added")]
    fn connect_device_added<F: Fn(&Self, &Gamepad) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_added_trampoline<
            P: IsA<GamepadManager>,
            F: Fn(&P, &Gamepad) + 'static,
        >(
            this: *mut ffi::WPEGamepadManager,
            gamepad: *mut ffi::WPEGamepad,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(GamepadManager::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(gamepad))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"device-added".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    device_added_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "device-removed")]
    fn connect_device_removed<F: Fn(&Self, &Gamepad) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_removed_trampoline<
            P: IsA<GamepadManager>,
            F: Fn(&P, &Gamepad) + 'static,
        >(
            this: *mut ffi::WPEGamepadManager,
            gamepad: *mut ffi::WPEGamepad,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(GamepadManager::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(gamepad))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"device-removed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    device_removed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<GamepadManager>> GamepadManagerExt for O {}

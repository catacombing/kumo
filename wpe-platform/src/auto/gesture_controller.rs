// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, Event, Gesture};

glib::wrapper! {
    #[doc(alias = "WPEGestureController")]
    pub struct GestureController(Interface<ffi::WPEGestureController, ffi::WPEGestureControllerInterface>);

    match fn {
        type_ => || ffi::wpe_gesture_controller_get_type(),
    }
}

impl GestureController {
    pub const NONE: Option<&'static GestureController> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::GestureController>> Sealed for T {}
}

pub trait GestureControllerExt: IsA<GestureController> + sealed::Sealed + 'static {
    #[doc(alias = "wpe_gesture_controller_cancel")]
    fn cancel(&self) {
        unsafe {
            ffi::wpe_gesture_controller_cancel(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wpe_gesture_controller_get_gesture")]
    #[doc(alias = "get_gesture")]
    fn gesture(&self) -> Gesture {
        unsafe {
            from_glib(ffi::wpe_gesture_controller_get_gesture(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "wpe_gesture_controller_get_gesture_delta")]
    #[doc(alias = "get_gesture_delta")]
    fn gesture_delta(&self) -> Option<(f64, f64)> {
        unsafe {
            let mut x = std::mem::MaybeUninit::uninit();
            let mut y = std::mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::wpe_gesture_controller_get_gesture_delta(
                self.as_ref().to_glib_none().0,
                x.as_mut_ptr(),
                y.as_mut_ptr(),
            ));
            if ret {
                Some((x.assume_init(), y.assume_init()))
            } else {
                None
            }
        }
    }

    #[doc(alias = "wpe_gesture_controller_get_gesture_position")]
    #[doc(alias = "get_gesture_position")]
    fn gesture_position(&self) -> Option<(f64, f64)> {
        unsafe {
            let mut x = std::mem::MaybeUninit::uninit();
            let mut y = std::mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::wpe_gesture_controller_get_gesture_position(
                self.as_ref().to_glib_none().0,
                x.as_mut_ptr(),
                y.as_mut_ptr(),
            ));
            if ret {
                Some((x.assume_init(), y.assume_init()))
            } else {
                None
            }
        }
    }

    #[doc(alias = "wpe_gesture_controller_handle_event")]
    fn handle_event(&self, event: &Event) {
        unsafe {
            ffi::wpe_gesture_controller_handle_event(
                self.as_ref().to_glib_none().0,
                event.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "wpe_gesture_controller_is_drag_begin")]
    fn is_drag_begin(&self) -> bool {
        unsafe {
            from_glib(ffi::wpe_gesture_controller_is_drag_begin(self.as_ref().to_glib_none().0))
        }
    }
}

impl<O: IsA<GestureController>> GestureControllerExt for O {}

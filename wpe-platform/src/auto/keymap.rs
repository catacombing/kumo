// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, Modifiers};

glib::wrapper! {
    #[doc(alias = "WPEKeymap")]
    pub struct Keymap(Object<ffi::WPEKeymap, ffi::WPEKeymapClass>);

    match fn {
        type_ => || ffi::wpe_keymap_get_type(),
    }
}

impl Keymap {
    pub const NONE: Option<&'static Keymap> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Keymap>> Sealed for T {}
}

pub trait KeymapExt: IsA<Keymap> + sealed::Sealed + 'static {
    //#[doc(alias = "wpe_keymap_get_entries_for_keyval")]
    //#[doc(alias = "get_entries_for_keyval")]
    // fn is_entries_for_keyval(&self, keyval: u32, entries: /*Ignored*/&mut
    // KeymapEntry, n_entries: u32) -> bool {    unsafe { TODO: call
    // ffi:wpe_keymap_get_entries_for_keyval() }
    //}

    #[doc(alias = "wpe_keymap_get_modifiers")]
    #[doc(alias = "get_modifiers")]
    fn modifiers(&self) -> Modifiers {
        unsafe { from_glib(ffi::wpe_keymap_get_modifiers(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_keymap_translate_keyboard_state")]
    fn translate_keyboard_state(
        &self,
        keycode: u32,
        modifiers: Modifiers,
        group: i32,
    ) -> Option<(u32, i32, i32, Modifiers)> {
        unsafe {
            let mut keyval = std::mem::MaybeUninit::uninit();
            let mut effective_group = std::mem::MaybeUninit::uninit();
            let mut level = std::mem::MaybeUninit::uninit();
            let mut consumed_modifiers = std::mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::wpe_keymap_translate_keyboard_state(
                self.as_ref().to_glib_none().0,
                keycode,
                modifiers.into_glib(),
                group,
                keyval.as_mut_ptr(),
                effective_group.as_mut_ptr(),
                level.as_mut_ptr(),
                consumed_modifiers.as_mut_ptr(),
            ));
            if ret {
                Some((
                    keyval.assume_init(),
                    effective_group.assume_init(),
                    level.assume_init(),
                    from_glib(consumed_modifiers.assume_init()),
                ))
            } else {
                None
            }
        }
    }
}

impl<O: IsA<Keymap>> KeymapExt for O {}

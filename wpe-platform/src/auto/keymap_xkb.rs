// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, Keymap};

glib::wrapper! {
    #[doc(alias = "WPEKeymapXKB")]
    pub struct KeymapXKB(Object<ffi::WPEKeymapXKB, ffi::WPEKeymapXKBClass>) @extends Keymap;

    match fn {
        type_ => || ffi::wpe_keymap_xkb_get_type(),
    }
}

impl KeymapXKB {
    #[doc(alias = "wpe_keymap_xkb_new")]
    pub fn new() -> KeymapXKB {
        unsafe { Keymap::from_glib_full(ffi::wpe_keymap_xkb_new()).unsafe_cast() }
    }

    //#[doc(alias = "wpe_keymap_xkb_get_xkb_keymap")]
    //#[doc(alias = "get_xkb_keymap")]
    // pub fn xkb_keymap(&self) -> /*Unimplemented*/Option<Basic: Pointer> {
    //    unsafe { TODO: call ffi:wpe_keymap_xkb_get_xkb_keymap() }
    //}

    //#[doc(alias = "wpe_keymap_xkb_get_xkb_state")]
    //#[doc(alias = "get_xkb_state")]
    // pub fn xkb_state(&self) -> /*Unimplemented*/Option<Basic: Pointer> {
    //    unsafe { TODO: call ffi:wpe_keymap_xkb_get_xkb_state() }
    //}

    #[doc(alias = "wpe_keymap_xkb_update")]
    pub fn update(&self, format: u32, fd: i32, size: u32) {
        unsafe {
            ffi::wpe_keymap_xkb_update(self.to_glib_none().0, format, fd, size);
        }
    }
}

impl Default for KeymapXKB {
    fn default() -> Self {
        Self::new()
    }
}

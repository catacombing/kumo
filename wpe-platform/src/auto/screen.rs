// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::prelude::*;
use glib::signal::{SignalHandlerId, connect_raw};
use glib::translate::*;

use crate::{ScreenSyncObserver, ffi};

glib::wrapper! {
    #[doc(alias = "WPEScreen")]
    pub struct Screen(Object<ffi::WPEScreen, ffi::WPEScreenClass>);

    match fn {
        type_ => || ffi::wpe_screen_get_type(),
    }
}

impl Screen {
    pub const NONE: Option<&'static Screen> = None;
}

pub trait ScreenExt: IsA<Screen> + 'static {
    #[doc(alias = "wpe_screen_get_height")]
    #[doc(alias = "get_height")]
    fn height(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_height(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> u32 {
        unsafe { ffi::wpe_screen_get_id(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_physical_height")]
    #[doc(alias = "get_physical_height")]
    #[doc(alias = "physical-height")]
    fn physical_height(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_physical_height(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_physical_width")]
    #[doc(alias = "get_physical_width")]
    #[doc(alias = "physical-width")]
    fn physical_width(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_physical_width(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_refresh_rate")]
    #[doc(alias = "get_refresh_rate")]
    #[doc(alias = "refresh-rate")]
    fn refresh_rate(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_refresh_rate(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_scale")]
    #[doc(alias = "get_scale")]
    fn scale(&self) -> f64 {
        unsafe { ffi::wpe_screen_get_scale(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_sync_observer")]
    #[doc(alias = "get_sync_observer")]
    fn sync_observer(&self) -> Option<ScreenSyncObserver> {
        unsafe { from_glib_none(ffi::wpe_screen_get_sync_observer(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "wpe_screen_get_width")]
    #[doc(alias = "get_width")]
    fn width(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_width(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_x")]
    #[doc(alias = "get_x")]
    fn x(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_x(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_get_y")]
    #[doc(alias = "get_y")]
    fn y(&self) -> i32 {
        unsafe { ffi::wpe_screen_get_y(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "wpe_screen_invalidate")]
    fn invalidate(&self) {
        unsafe {
            ffi::wpe_screen_invalidate(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wpe_screen_set_physical_size")]
    fn set_physical_size(&self, width: i32, height: i32) {
        unsafe {
            ffi::wpe_screen_set_physical_size(self.as_ref().to_glib_none().0, width, height);
        }
    }

    #[doc(alias = "wpe_screen_set_position")]
    fn set_position(&self, x: i32, y: i32) {
        unsafe {
            ffi::wpe_screen_set_position(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[doc(alias = "wpe_screen_set_refresh_rate")]
    #[doc(alias = "refresh-rate")]
    fn set_refresh_rate(&self, refresh_rate: i32) {
        unsafe {
            ffi::wpe_screen_set_refresh_rate(self.as_ref().to_glib_none().0, refresh_rate);
        }
    }

    #[doc(alias = "wpe_screen_set_scale")]
    #[doc(alias = "scale")]
    fn set_scale(&self, scale: f64) {
        unsafe {
            ffi::wpe_screen_set_scale(self.as_ref().to_glib_none().0, scale);
        }
    }

    #[doc(alias = "wpe_screen_set_size")]
    fn set_size(&self, width: i32, height: i32) {
        unsafe {
            ffi::wpe_screen_set_size(self.as_ref().to_glib_none().0, width, height);
        }
    }

    fn set_height(&self, height: i32) {
        ObjectExt::set_property(self.as_ref(), "height", height)
    }

    #[doc(alias = "physical-height")]
    fn set_physical_height(&self, physical_height: i32) {
        ObjectExt::set_property(self.as_ref(), "physical-height", physical_height)
    }

    #[doc(alias = "physical-width")]
    fn set_physical_width(&self, physical_width: i32) {
        ObjectExt::set_property(self.as_ref(), "physical-width", physical_width)
    }

    fn set_width(&self, width: i32) {
        ObjectExt::set_property(self.as_ref(), "width", width)
    }

    fn set_x(&self, x: i32) {
        ObjectExt::set_property(self.as_ref(), "x", x)
    }

    fn set_y(&self, y: i32) {
        ObjectExt::set_property(self.as_ref(), "y", y)
    }

    #[doc(alias = "height")]
    fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_trampoline<P: IsA<Screen>, F: Fn(&P) + 'static>(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::height".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_height_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "physical-height")]
    fn connect_physical_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_physical_height_trampoline<
            P: IsA<Screen>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::physical-height".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_physical_height_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "physical-width")]
    fn connect_physical_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_physical_width_trampoline<
            P: IsA<Screen>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::physical-width".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_physical_width_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "refresh-rate")]
    fn connect_refresh_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_refresh_rate_trampoline<P: IsA<Screen>, F: Fn(&P) + 'static>(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::refresh-rate".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_refresh_rate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "scale")]
    fn connect_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scale_trampoline<P: IsA<Screen>, F: Fn(&P) + 'static>(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::scale".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_scale_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "width")]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<P: IsA<Screen>, F: Fn(&P) + 'static>(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::width".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_width_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "x")]
    fn connect_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_x_trampoline<P: IsA<Screen>, F: Fn(&P) + 'static>(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::x".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_x_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "y")]
    fn connect_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_y_trampoline<P: IsA<Screen>, F: Fn(&P) + 'static>(
            this: *mut ffi::WPEScreen,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Screen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::y".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_y_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Screen>> ScreenExt for O {}

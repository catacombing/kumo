// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::object::ObjectType as _;
use glib::prelude::*;
use glib::signal::{SignalHandlerId, connect_raw};
use glib::translate::*;

use crate::{SettingsSource, ffi};

glib::wrapper! {
    #[doc(alias = "WPESettings")]
    pub struct Settings(Object<ffi::WPESettings, ffi::WPESettingsClass>);

    match fn {
        type_ => || ffi::wpe_settings_get_type(),
    }
}

impl Settings {
    #[doc(alias = "wpe_settings_get_boolean")]
    #[doc(alias = "get_boolean")]
    pub fn boolean(&self, key: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_get_boolean(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_byte")]
    #[doc(alias = "get_byte")]
    pub fn byte(&self, key: &str) -> Result<u8, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret =
                ffi::wpe_settings_get_byte(self.to_glib_none().0, key.to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_double")]
    #[doc(alias = "get_double")]
    pub fn double(&self, key: &str) -> Result<f64, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_double(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_int32")]
    #[doc(alias = "get_int32")]
    pub fn int32(&self, key: &str) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_int32(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_int64")]
    #[doc(alias = "get_int64")]
    pub fn int64(&self, key: &str) -> Result<i64, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_int64(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_string")]
    #[doc(alias = "get_string")]
    pub fn string(&self, key: &str) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_string(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_uint32")]
    #[doc(alias = "get_uint32")]
    pub fn uint32(&self, key: &str) -> Result<u32, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_uint32(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_uint64")]
    #[doc(alias = "get_uint64")]
    pub fn uint64(&self, key: &str) -> Result<u64, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_uint64(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_get_value")]
    #[doc(alias = "get_value")]
    pub fn value(&self, key: &str) -> Result<glib::Variant, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wpe_settings_get_value(
                self.to_glib_none().0,
                key.to_glib_none().0,
                &mut error,
            );
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_load_from_keyfile")]
    pub fn load_from_keyfile(&self, keyfile: &glib::KeyFile) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_load_from_keyfile(
                self.to_glib_none().0,
                keyfile.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_register")]
    pub fn register(
        &self,
        key: &str,
        type_: &glib::VariantTy,
        default_value: &glib::Variant,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_register(
                self.to_glib_none().0,
                key.to_glib_none().0,
                type_.to_glib_none().0,
                default_value.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_save_to_keyfile")]
    pub fn save_to_keyfile(&self, keyfile: &glib::KeyFile) {
        unsafe {
            ffi::wpe_settings_save_to_keyfile(self.to_glib_none().0, keyfile.to_glib_none().0);
        }
    }

    #[doc(alias = "wpe_settings_set_boolean")]
    pub fn set_boolean(
        &self,
        key: &str,
        value: bool,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_boolean(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value.into_glib(),
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_byte")]
    pub fn set_byte(
        &self,
        key: &str,
        value: u8,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_byte(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_double")]
    pub fn set_double(
        &self,
        key: &str,
        value: f64,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_double(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_int32")]
    pub fn set_int32(
        &self,
        key: &str,
        value: i32,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_int32(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_int64")]
    pub fn set_int64(
        &self,
        key: &str,
        value: i64,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_int64(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_string")]
    pub fn set_string(
        &self,
        key: &str,
        value: &str,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_string(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value.to_glib_none().0,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_uint32")]
    pub fn set_uint32(
        &self,
        key: &str,
        value: u32,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_uint32(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_uint64")]
    pub fn set_uint64(
        &self,
        key: &str,
        value: u64,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_uint64(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wpe_settings_set_value")]
    pub fn set_value(
        &self,
        key: &str,
        value: Option<&glib::Variant>,
        source: SettingsSource,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wpe_settings_set_value(
                self.to_glib_none().0,
                key.to_glib_none().0,
                value.to_glib_none().0,
                source.into_glib(),
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "changed")]
    pub fn connect_changed<F: Fn(&Self, &str, &glib::Variant) + 'static>(
        &self,
        detail: Option<&str>,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<
            F: Fn(&Settings, &str, &glib::Variant) + 'static,
        >(
            this: *mut ffi::WPESettings,
            key: *mut std::ffi::c_char,
            value: *mut glib::ffi::GVariant,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &glib::GString::from_glib_borrow(key),
                &from_glib_borrow(value),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            let detailed_signal_name = detail.map(|name| format!("changed::{name}\0"));
            let signal_name: &[u8] =
                detailed_signal_name.as_ref().map_or(c"changed".to_bytes(), |n| n.as_bytes());
            connect_raw(
                self.as_ptr() as *mut _,
                signal_name.as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

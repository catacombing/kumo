// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};
#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, off_t, size_t, ssize_t, time_t, uintptr_t, FILE,
};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t};
use wpe::wpe_view_backend;
use {
    gio_sys as gio, glib_sys as glib, gobject_sys as gobject, soup_sys as soup,
    wpe_java_script_core_sys as wpe_java_script_core, wpe_platform_sys as wpe_platform,
    wpe_sys as wpe,
};

// Enums
pub type WebKitAuthenticationScheme = c_int;
pub const WEBKIT_AUTHENTICATION_SCHEME_DEFAULT: WebKitAuthenticationScheme = 1;
pub const WEBKIT_AUTHENTICATION_SCHEME_HTTP_BASIC: WebKitAuthenticationScheme = 2;
pub const WEBKIT_AUTHENTICATION_SCHEME_HTTP_DIGEST: WebKitAuthenticationScheme = 3;
pub const WEBKIT_AUTHENTICATION_SCHEME_HTML_FORM: WebKitAuthenticationScheme = 4;
pub const WEBKIT_AUTHENTICATION_SCHEME_NTLM: WebKitAuthenticationScheme = 5;
pub const WEBKIT_AUTHENTICATION_SCHEME_NEGOTIATE: WebKitAuthenticationScheme = 6;
pub const WEBKIT_AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE_REQUESTED: WebKitAuthenticationScheme = 7;
pub const WEBKIT_AUTHENTICATION_SCHEME_SERVER_TRUST_EVALUATION_REQUESTED:
    WebKitAuthenticationScheme = 8;
pub const WEBKIT_AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE_PIN_REQUESTED:
    WebKitAuthenticationScheme = 9;
pub const WEBKIT_AUTHENTICATION_SCHEME_UNKNOWN: WebKitAuthenticationScheme = 100;

pub type WebKitAutomationBrowsingContextPresentation = c_int;
pub const WEBKIT_AUTOMATION_BROWSING_CONTEXT_PRESENTATION_WINDOW:
    WebKitAutomationBrowsingContextPresentation = 0;
pub const WEBKIT_AUTOMATION_BROWSING_CONTEXT_PRESENTATION_TAB:
    WebKitAutomationBrowsingContextPresentation = 1;

pub type WebKitAutoplayPolicy = c_int;
pub const WEBKIT_AUTOPLAY_ALLOW: WebKitAutoplayPolicy = 0;
pub const WEBKIT_AUTOPLAY_ALLOW_WITHOUT_SOUND: WebKitAutoplayPolicy = 1;
pub const WEBKIT_AUTOPLAY_DENY: WebKitAutoplayPolicy = 2;

pub type WebKitCacheModel = c_int;
pub const WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER: WebKitCacheModel = 0;
pub const WEBKIT_CACHE_MODEL_WEB_BROWSER: WebKitCacheModel = 1;
pub const WEBKIT_CACHE_MODEL_DOCUMENT_BROWSER: WebKitCacheModel = 2;

pub type WebKitContextMenuAction = c_int;
pub const WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION: WebKitContextMenuAction = 0;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK: WebKitContextMenuAction = 1;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW: WebKitContextMenuAction = 2;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK: WebKitContextMenuAction = 3;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD: WebKitContextMenuAction = 4;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW: WebKitContextMenuAction = 5;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK: WebKitContextMenuAction = 6;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD: WebKitContextMenuAction = 7;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW: WebKitContextMenuAction = 8;
pub const WEBKIT_CONTEXT_MENU_ACTION_GO_BACK: WebKitContextMenuAction = 9;
pub const WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD: WebKitContextMenuAction = 10;
pub const WEBKIT_CONTEXT_MENU_ACTION_STOP: WebKitContextMenuAction = 11;
pub const WEBKIT_CONTEXT_MENU_ACTION_RELOAD: WebKitContextMenuAction = 12;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY: WebKitContextMenuAction = 13;
pub const WEBKIT_CONTEXT_MENU_ACTION_CUT: WebKitContextMenuAction = 14;
pub const WEBKIT_CONTEXT_MENU_ACTION_PASTE: WebKitContextMenuAction = 15;
pub const WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS: WebKitContextMenuAction = 16;
pub const WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND: WebKitContextMenuAction = 17;
pub const WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING: WebKitContextMenuAction = 18;
pub const WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING: WebKitContextMenuAction = 19;
pub const WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR: WebKitContextMenuAction = 20;
pub const WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU: WebKitContextMenuAction = 21;
pub const WEBKIT_CONTEXT_MENU_ACTION_BOLD: WebKitContextMenuAction = 22;
pub const WEBKIT_CONTEXT_MENU_ACTION_ITALIC: WebKitContextMenuAction = 23;
pub const WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE: WebKitContextMenuAction = 24;
pub const WEBKIT_CONTEXT_MENU_ACTION_OUTLINE: WebKitContextMenuAction = 25;
pub const WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT: WebKitContextMenuAction = 26;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_VIDEO_IN_NEW_WINDOW: WebKitContextMenuAction = 27;
pub const WEBKIT_CONTEXT_MENU_ACTION_OPEN_AUDIO_IN_NEW_WINDOW: WebKitContextMenuAction = 28;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_VIDEO_LINK_TO_CLIPBOARD: WebKitContextMenuAction = 29;
pub const WEBKIT_CONTEXT_MENU_ACTION_COPY_AUDIO_LINK_TO_CLIPBOARD: WebKitContextMenuAction = 30;
pub const WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS: WebKitContextMenuAction = 31;
pub const WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP: WebKitContextMenuAction = 32;
pub const WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN: WebKitContextMenuAction = 33;
pub const WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY: WebKitContextMenuAction = 34;
pub const WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PAUSE: WebKitContextMenuAction = 35;
pub const WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE: WebKitContextMenuAction = 36;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_VIDEO_TO_DISK: WebKitContextMenuAction = 37;
pub const WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_AUDIO_TO_DISK: WebKitContextMenuAction = 38;
pub const WEBKIT_CONTEXT_MENU_ACTION_CUSTOM: WebKitContextMenuAction = 10000;

pub type WebKitCookieAcceptPolicy = c_int;
pub const WEBKIT_COOKIE_POLICY_ACCEPT_ALWAYS: WebKitCookieAcceptPolicy = 0;
pub const WEBKIT_COOKIE_POLICY_ACCEPT_NEVER: WebKitCookieAcceptPolicy = 1;
pub const WEBKIT_COOKIE_POLICY_ACCEPT_NO_THIRD_PARTY: WebKitCookieAcceptPolicy = 2;

pub type WebKitCookiePersistentStorage = c_int;
pub const WEBKIT_COOKIE_PERSISTENT_STORAGE_TEXT: WebKitCookiePersistentStorage = 0;
pub const WEBKIT_COOKIE_PERSISTENT_STORAGE_SQLITE: WebKitCookiePersistentStorage = 1;

pub type WebKitCredentialPersistence = c_int;
pub const WEBKIT_CREDENTIAL_PERSISTENCE_NONE: WebKitCredentialPersistence = 0;
pub const WEBKIT_CREDENTIAL_PERSISTENCE_FOR_SESSION: WebKitCredentialPersistence = 1;
pub const WEBKIT_CREDENTIAL_PERSISTENCE_PERMANENT: WebKitCredentialPersistence = 2;

pub type WebKitDownloadError = c_int;
pub const WEBKIT_DOWNLOAD_ERROR_NETWORK: WebKitDownloadError = 499;
pub const WEBKIT_DOWNLOAD_ERROR_CANCELLED_BY_USER: WebKitDownloadError = 400;
pub const WEBKIT_DOWNLOAD_ERROR_DESTINATION: WebKitDownloadError = 401;

pub type WebKitFeatureStatus = c_int;
pub const WEBKIT_FEATURE_STATUS_EMBEDDER: WebKitFeatureStatus = 0;
pub const WEBKIT_FEATURE_STATUS_UNSTABLE: WebKitFeatureStatus = 1;
pub const WEBKIT_FEATURE_STATUS_INTERNAL: WebKitFeatureStatus = 2;
pub const WEBKIT_FEATURE_STATUS_DEVELOPER: WebKitFeatureStatus = 3;
pub const WEBKIT_FEATURE_STATUS_TESTABLE: WebKitFeatureStatus = 4;
pub const WEBKIT_FEATURE_STATUS_PREVIEW: WebKitFeatureStatus = 5;
pub const WEBKIT_FEATURE_STATUS_STABLE: WebKitFeatureStatus = 6;
pub const WEBKIT_FEATURE_STATUS_MATURE: WebKitFeatureStatus = 7;

pub type WebKitInputPurpose = c_int;
pub const WEBKIT_INPUT_PURPOSE_FREE_FORM: WebKitInputPurpose = 0;
pub const WEBKIT_INPUT_PURPOSE_DIGITS: WebKitInputPurpose = 1;
pub const WEBKIT_INPUT_PURPOSE_NUMBER: WebKitInputPurpose = 2;
pub const WEBKIT_INPUT_PURPOSE_PHONE: WebKitInputPurpose = 3;
pub const WEBKIT_INPUT_PURPOSE_URL: WebKitInputPurpose = 4;
pub const WEBKIT_INPUT_PURPOSE_EMAIL: WebKitInputPurpose = 5;
pub const WEBKIT_INPUT_PURPOSE_PASSWORD: WebKitInputPurpose = 6;

pub type WebKitInsecureContentEvent = c_int;
pub const WEBKIT_INSECURE_CONTENT_RUN: WebKitInsecureContentEvent = 0;
pub const WEBKIT_INSECURE_CONTENT_DISPLAYED: WebKitInsecureContentEvent = 1;

pub type WebKitJavascriptError = c_int;
pub const WEBKIT_JAVASCRIPT_ERROR_SCRIPT_FAILED: WebKitJavascriptError = 699;
pub const WEBKIT_JAVASCRIPT_ERROR_INVALID_PARAMETER: WebKitJavascriptError = 600;
pub const WEBKIT_JAVASCRIPT_ERROR_INVALID_RESULT: WebKitJavascriptError = 601;

pub type WebKitLoadEvent = c_int;
pub const WEBKIT_LOAD_STARTED: WebKitLoadEvent = 0;
pub const WEBKIT_LOAD_REDIRECTED: WebKitLoadEvent = 1;
pub const WEBKIT_LOAD_COMMITTED: WebKitLoadEvent = 2;
pub const WEBKIT_LOAD_FINISHED: WebKitLoadEvent = 3;

pub type WebKitMediaCaptureState = c_int;
pub const WEBKIT_MEDIA_CAPTURE_STATE_NONE: WebKitMediaCaptureState = 0;
pub const WEBKIT_MEDIA_CAPTURE_STATE_ACTIVE: WebKitMediaCaptureState = 1;
pub const WEBKIT_MEDIA_CAPTURE_STATE_MUTED: WebKitMediaCaptureState = 2;

pub type WebKitMediaError = c_int;
pub const WEBKIT_MEDIA_ERROR_WILL_HANDLE_LOAD: WebKitMediaError = 204;

pub type WebKitNavigationType = c_int;
pub const WEBKIT_NAVIGATION_TYPE_LINK_CLICKED: WebKitNavigationType = 0;
pub const WEBKIT_NAVIGATION_TYPE_FORM_SUBMITTED: WebKitNavigationType = 1;
pub const WEBKIT_NAVIGATION_TYPE_BACK_FORWARD: WebKitNavigationType = 2;
pub const WEBKIT_NAVIGATION_TYPE_RELOAD: WebKitNavigationType = 3;
pub const WEBKIT_NAVIGATION_TYPE_FORM_RESUBMITTED: WebKitNavigationType = 4;
pub const WEBKIT_NAVIGATION_TYPE_OTHER: WebKitNavigationType = 5;

pub type WebKitNetworkError = c_int;
pub const WEBKIT_NETWORK_ERROR_FAILED: WebKitNetworkError = 399;
pub const WEBKIT_NETWORK_ERROR_TRANSPORT: WebKitNetworkError = 300;
pub const WEBKIT_NETWORK_ERROR_UNKNOWN_PROTOCOL: WebKitNetworkError = 301;
pub const WEBKIT_NETWORK_ERROR_CANCELLED: WebKitNetworkError = 302;
pub const WEBKIT_NETWORK_ERROR_FILE_DOES_NOT_EXIST: WebKitNetworkError = 303;

pub type WebKitNetworkProxyMode = c_int;
pub const WEBKIT_NETWORK_PROXY_MODE_DEFAULT: WebKitNetworkProxyMode = 0;
pub const WEBKIT_NETWORK_PROXY_MODE_NO_PROXY: WebKitNetworkProxyMode = 1;
pub const WEBKIT_NETWORK_PROXY_MODE_CUSTOM: WebKitNetworkProxyMode = 2;

pub type WebKitPermissionState = c_int;
pub const WEBKIT_PERMISSION_STATE_GRANTED: WebKitPermissionState = 0;
pub const WEBKIT_PERMISSION_STATE_DENIED: WebKitPermissionState = 1;
pub const WEBKIT_PERMISSION_STATE_PROMPT: WebKitPermissionState = 2;

pub type WebKitPolicyDecisionType = c_int;
pub const WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION: WebKitPolicyDecisionType = 0;
pub const WEBKIT_POLICY_DECISION_TYPE_NEW_WINDOW_ACTION: WebKitPolicyDecisionType = 1;
pub const WEBKIT_POLICY_DECISION_TYPE_RESPONSE: WebKitPolicyDecisionType = 2;

pub type WebKitPolicyError = c_int;
pub const WEBKIT_POLICY_ERROR_FAILED: WebKitPolicyError = 199;
pub const WEBKIT_POLICY_ERROR_CANNOT_SHOW_MIME_TYPE: WebKitPolicyError = 100;
pub const WEBKIT_POLICY_ERROR_CANNOT_SHOW_URI: WebKitPolicyError = 101;
pub const WEBKIT_POLICY_ERROR_FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE: WebKitPolicyError = 102;
pub const WEBKIT_POLICY_ERROR_CANNOT_USE_RESTRICTED_PORT: WebKitPolicyError = 103;

pub type WebKitSaveMode = c_int;
pub const WEBKIT_SAVE_MODE_MHTML: WebKitSaveMode = 0;

pub type WebKitScriptDialogType = c_int;
pub const WEBKIT_SCRIPT_DIALOG_ALERT: WebKitScriptDialogType = 0;
pub const WEBKIT_SCRIPT_DIALOG_CONFIRM: WebKitScriptDialogType = 1;
pub const WEBKIT_SCRIPT_DIALOG_PROMPT: WebKitScriptDialogType = 2;
pub const WEBKIT_SCRIPT_DIALOG_BEFORE_UNLOAD_CONFIRM: WebKitScriptDialogType = 3;

pub type WebKitSnapshotError = c_int;
pub const WEBKIT_SNAPSHOT_ERROR_FAILED_TO_CREATE: WebKitSnapshotError = 799;

pub type WebKitTLSErrorsPolicy = c_int;
pub const WEBKIT_TLS_ERRORS_POLICY_IGNORE: WebKitTLSErrorsPolicy = 0;
pub const WEBKIT_TLS_ERRORS_POLICY_FAIL: WebKitTLSErrorsPolicy = 1;

pub type WebKitUserContentFilterError = c_int;
pub const WEBKIT_USER_CONTENT_FILTER_ERROR_INVALID_SOURCE: WebKitUserContentFilterError = 0;
pub const WEBKIT_USER_CONTENT_FILTER_ERROR_NOT_FOUND: WebKitUserContentFilterError = 1;

pub type WebKitUserContentInjectedFrames = c_int;
pub const WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES: WebKitUserContentInjectedFrames = 0;
pub const WEBKIT_USER_CONTENT_INJECT_TOP_FRAME: WebKitUserContentInjectedFrames = 1;

pub type WebKitUserMessageError = c_int;
pub const WEBKIT_USER_MESSAGE_UNHANDLED_MESSAGE: WebKitUserMessageError = 0;

pub type WebKitUserScriptInjectionTime = c_int;
pub const WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_START: WebKitUserScriptInjectionTime = 0;
pub const WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END: WebKitUserScriptInjectionTime = 1;

pub type WebKitUserStyleLevel = c_int;
pub const WEBKIT_USER_STYLE_LEVEL_USER: WebKitUserStyleLevel = 0;
pub const WEBKIT_USER_STYLE_LEVEL_AUTHOR: WebKitUserStyleLevel = 1;

pub type WebKitWebExtensionMode = c_int;
pub const WEBKIT_WEB_EXTENSION_MODE_NONE: WebKitWebExtensionMode = 0;
pub const WEBKIT_WEB_EXTENSION_MODE_MANIFESTV2: WebKitWebExtensionMode = 1;
pub const WEBKIT_WEB_EXTENSION_MODE_MANIFESTV3: WebKitWebExtensionMode = 2;

pub type WebKitWebProcessTerminationReason = c_int;
pub const WEBKIT_WEB_PROCESS_CRASHED: WebKitWebProcessTerminationReason = 0;
pub const WEBKIT_WEB_PROCESS_EXCEEDED_MEMORY_LIMIT: WebKitWebProcessTerminationReason = 1;
pub const WEBKIT_WEB_PROCESS_TERMINATED_BY_API: WebKitWebProcessTerminationReason = 2;

// Constants
pub const WEBKIT_EDITING_COMMAND_COPY: &[u8] = b"Copy\0";
pub const WEBKIT_EDITING_COMMAND_CREATE_LINK: &[u8] = b"CreateLink\0";
pub const WEBKIT_EDITING_COMMAND_CUT: &[u8] = b"Cut\0";
pub const WEBKIT_EDITING_COMMAND_INSERT_IMAGE: &[u8] = b"InsertImage\0";
pub const WEBKIT_EDITING_COMMAND_PASTE: &[u8] = b"Paste\0";
pub const WEBKIT_EDITING_COMMAND_PASTE_AS_PLAIN_TEXT: &[u8] = b"PasteAsPlainText\0";
pub const WEBKIT_EDITING_COMMAND_REDO: &[u8] = b"Redo\0";
pub const WEBKIT_EDITING_COMMAND_SELECT_ALL: &[u8] = b"SelectAll\0";
pub const WEBKIT_EDITING_COMMAND_UNDO: &[u8] = b"Undo\0";
pub const WEBKIT_MAJOR_VERSION: c_int = 2;
pub const WEBKIT_MICRO_VERSION: c_int = 3;
pub const WEBKIT_MINOR_VERSION: c_int = 45;

// Flags
pub type WebKitEditorTypingAttributes = c_uint;
pub const WEBKIT_EDITOR_TYPING_ATTRIBUTE_NONE: WebKitEditorTypingAttributes = 2;
pub const WEBKIT_EDITOR_TYPING_ATTRIBUTE_BOLD: WebKitEditorTypingAttributes = 4;
pub const WEBKIT_EDITOR_TYPING_ATTRIBUTE_ITALIC: WebKitEditorTypingAttributes = 8;
pub const WEBKIT_EDITOR_TYPING_ATTRIBUTE_UNDERLINE: WebKitEditorTypingAttributes = 16;
pub const WEBKIT_EDITOR_TYPING_ATTRIBUTE_STRIKETHROUGH: WebKitEditorTypingAttributes = 32;

pub type WebKitFindOptions = c_uint;
pub const WEBKIT_FIND_OPTIONS_NONE: WebKitFindOptions = 0;
pub const WEBKIT_FIND_OPTIONS_CASE_INSENSITIVE: WebKitFindOptions = 1;
pub const WEBKIT_FIND_OPTIONS_AT_WORD_STARTS: WebKitFindOptions = 2;
pub const WEBKIT_FIND_OPTIONS_TREAT_MEDIAL_CAPITAL_AS_WORD_START: WebKitFindOptions = 4;
pub const WEBKIT_FIND_OPTIONS_BACKWARDS: WebKitFindOptions = 8;
pub const WEBKIT_FIND_OPTIONS_WRAP_AROUND: WebKitFindOptions = 16;

pub type WebKitHitTestResultContext = c_uint;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT: WebKitHitTestResultContext = 2;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK: WebKitHitTestResultContext = 4;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE: WebKitHitTestResultContext = 8;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA: WebKitHitTestResultContext = 16;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE: WebKitHitTestResultContext = 32;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR: WebKitHitTestResultContext = 64;
pub const WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION: WebKitHitTestResultContext = 128;

pub type WebKitInputHints = c_uint;
pub const WEBKIT_INPUT_HINT_NONE: WebKitInputHints = 0;
pub const WEBKIT_INPUT_HINT_SPELLCHECK: WebKitInputHints = 1;
pub const WEBKIT_INPUT_HINT_LOWERCASE: WebKitInputHints = 2;
pub const WEBKIT_INPUT_HINT_UPPERCASE_CHARS: WebKitInputHints = 4;
pub const WEBKIT_INPUT_HINT_UPPERCASE_WORDS: WebKitInputHints = 8;
pub const WEBKIT_INPUT_HINT_UPPERCASE_SENTENCES: WebKitInputHints = 16;
pub const WEBKIT_INPUT_HINT_INHIBIT_OSK: WebKitInputHints = 32;

pub type WebKitWebsiteDataTypes = c_uint;
pub const WEBKIT_WEBSITE_DATA_MEMORY_CACHE: WebKitWebsiteDataTypes = 1;
pub const WEBKIT_WEBSITE_DATA_DISK_CACHE: WebKitWebsiteDataTypes = 2;
pub const WEBKIT_WEBSITE_DATA_OFFLINE_APPLICATION_CACHE: WebKitWebsiteDataTypes = 4;
pub const WEBKIT_WEBSITE_DATA_SESSION_STORAGE: WebKitWebsiteDataTypes = 8;
pub const WEBKIT_WEBSITE_DATA_LOCAL_STORAGE: WebKitWebsiteDataTypes = 16;
pub const WEBKIT_WEBSITE_DATA_INDEXEDDB_DATABASES: WebKitWebsiteDataTypes = 32;
pub const WEBKIT_WEBSITE_DATA_COOKIES: WebKitWebsiteDataTypes = 64;
pub const WEBKIT_WEBSITE_DATA_DEVICE_ID_HASH_SALT: WebKitWebsiteDataTypes = 128;
pub const WEBKIT_WEBSITE_DATA_HSTS_CACHE: WebKitWebsiteDataTypes = 256;
pub const WEBKIT_WEBSITE_DATA_ITP: WebKitWebsiteDataTypes = 512;
pub const WEBKIT_WEBSITE_DATA_SERVICE_WORKER_REGISTRATIONS: WebKitWebsiteDataTypes = 1024;
pub const WEBKIT_WEBSITE_DATA_DOM_CACHE: WebKitWebsiteDataTypes = 2048;
pub const WEBKIT_WEBSITE_DATA_ALL: WebKitWebsiteDataTypes = 4095;

// Callbacks
pub type WebKitFrameDisplayedCallback = Option<unsafe extern "C" fn(*mut WebKitWebView, gpointer)>;
pub type WebKitURISchemeRequestCallback =
    Option<unsafe extern "C" fn(*mut WebKitURISchemeRequest, gpointer)>;

// Records
#[repr(C)]
#[allow(dead_code)]
pub struct WebKitApplicationInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitApplicationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitApplicationInfo @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitAuthenticationRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitAuthenticationRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitAuthenticationRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitAutomationSessionClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitAutomationSessionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitAutomationSessionClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitBackForwardListClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitBackForwardListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitBackForwardListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitBackForwardListItemClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
}

impl ::std::fmt::Debug for WebKitBackForwardListItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitBackForwardListItemClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitColor {
    pub red: c_double,
    pub green: c_double,
    pub blue: c_double,
    pub alpha: c_double,
}

impl ::std::fmt::Debug for WebKitColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitColor @ {self:p}"))
            .field("red", &self.red)
            .field("green", &self.green)
            .field("blue", &self.blue)
            .field("alpha", &self.alpha)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitContextMenuClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitContextMenuClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenuClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitContextMenuItemClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
}

impl ::std::fmt::Debug for WebKitContextMenuItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenuItemClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitCookieManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitCookieManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitCookieManagerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitCredential {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitCredential @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitDeviceInfoPermissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitDeviceInfoPermissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitDeviceInfoPermissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitDownloadClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitDownloadClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitDownloadClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitEditorStateClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitEditorStateClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitEditorStateClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitFeature {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitFeature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFeature @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitFeatureList {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitFeatureList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFeatureList @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitFileChooserRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitFileChooserRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFileChooserRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitFindControllerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitFindControllerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFindControllerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitFormSubmissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitFormSubmissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFormSubmissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitGeolocationManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitGeolocationManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitGeolocationManagerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitGeolocationPermissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitGeolocationPermissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitGeolocationPermissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitGeolocationPosition {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitGeolocationPosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitGeolocationPosition @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitHitTestResultClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitHitTestResultClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitHitTestResultClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitITPFirstParty {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitITPFirstParty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitITPFirstParty @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitITPThirdParty {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitITPThirdParty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitITPThirdParty @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitInputMethodContextClass {
    pub parent_class: gobject::GObjectClass,
    pub preedit_started: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext)>,
    pub preedit_changed: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext)>,
    pub preedit_finished: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext)>,
    pub committed: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext, *const c_char)>,
    pub delete_surrounding:
        Option<unsafe extern "C" fn(*mut WebKitInputMethodContext, c_int, c_uint)>,
    pub set_enable_preedit: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext, gboolean)>,
    pub get_preedit: Option<
        unsafe extern "C" fn(
            *mut WebKitInputMethodContext,
            *mut *mut c_char,
            *mut *mut glib::GList,
            *mut c_uint,
        ),
    >,
    pub filter_key_event:
        Option<unsafe extern "C" fn(*mut WebKitInputMethodContext, gpointer) -> gboolean>,
    pub notify_focus_in: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext)>,
    pub notify_focus_out: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext)>,
    pub notify_cursor_area:
        Option<unsafe extern "C" fn(*mut WebKitInputMethodContext, c_int, c_int, c_int, c_int)>,
    pub notify_surrounding: Option<
        unsafe extern "C" fn(*mut WebKitInputMethodContext, *const c_char, c_uint, c_uint, c_uint),
    >,
    pub reset: Option<unsafe extern "C" fn(*mut WebKitInputMethodContext)>,
    pub _webkit_reserved0: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved1: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved2: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved3: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved4: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved5: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved6: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved7: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved8: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved9: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved10: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved11: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved12: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved13: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved14: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved15: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for WebKitInputMethodContextClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitInputMethodContextClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .field("preedit_started", &self.preedit_started)
            .field("preedit_changed", &self.preedit_changed)
            .field("preedit_finished", &self.preedit_finished)
            .field("committed", &self.committed)
            .field("delete_surrounding", &self.delete_surrounding)
            .field("set_enable_preedit", &self.set_enable_preedit)
            .field("get_preedit", &self.get_preedit)
            .field("filter_key_event", &self.filter_key_event)
            .field("notify_focus_in", &self.notify_focus_in)
            .field("notify_focus_out", &self.notify_focus_out)
            .field("notify_cursor_area", &self.notify_cursor_area)
            .field("notify_surrounding", &self.notify_surrounding)
            .field("reset", &self.reset)
            .field("_webkit_reserved0", &self._webkit_reserved0)
            .field("_webkit_reserved1", &self._webkit_reserved1)
            .field("_webkit_reserved2", &self._webkit_reserved2)
            .field("_webkit_reserved3", &self._webkit_reserved3)
            .field("_webkit_reserved4", &self._webkit_reserved4)
            .field("_webkit_reserved5", &self._webkit_reserved5)
            .field("_webkit_reserved6", &self._webkit_reserved6)
            .field("_webkit_reserved7", &self._webkit_reserved7)
            .field("_webkit_reserved8", &self._webkit_reserved8)
            .field("_webkit_reserved9", &self._webkit_reserved9)
            .field("_webkit_reserved10", &self._webkit_reserved10)
            .field("_webkit_reserved11", &self._webkit_reserved11)
            .field("_webkit_reserved12", &self._webkit_reserved12)
            .field("_webkit_reserved13", &self._webkit_reserved13)
            .field("_webkit_reserved14", &self._webkit_reserved14)
            .field("_webkit_reserved15", &self._webkit_reserved15)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _WebKitInputMethodContextPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type WebKitInputMethodContextPrivate = _WebKitInputMethodContextPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitInputMethodUnderline {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitInputMethodUnderline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitInputMethodUnderline @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitMediaKeySystemPermissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitMediaKeySystemPermissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitMediaKeySystemPermissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitMemoryPressureSettings {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitMemoryPressureSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitMemoryPressureSettings @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitNavigationAction {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitNavigationAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNavigationAction @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitNavigationPolicyDecisionClass {
    pub parent_class: WebKitPolicyDecisionClass,
}

impl ::std::fmt::Debug for WebKitNavigationPolicyDecisionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNavigationPolicyDecisionClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitNetworkProxySettings {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitNetworkProxySettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNetworkProxySettings @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitNetworkSessionClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitNetworkSessionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNetworkSessionClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitNotificationClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitNotificationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNotificationClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitNotificationPermissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitNotificationPermissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNotificationPermissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitOptionMenuClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitOptionMenuClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitOptionMenuClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitOptionMenuItem {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitOptionMenuItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitOptionMenuItem @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitPermissionRequestInterface {
    pub parent_interface: gobject::GTypeInterface,
    pub allow: Option<unsafe extern "C" fn(*mut WebKitPermissionRequest)>,
    pub deny: Option<unsafe extern "C" fn(*mut WebKitPermissionRequest)>,
}

impl ::std::fmt::Debug for WebKitPermissionRequestInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitPermissionRequestInterface @ {self:p}"))
            .field("parent_interface", &self.parent_interface)
            .field("allow", &self.allow)
            .field("deny", &self.deny)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitPermissionStateQuery {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitPermissionStateQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitPermissionStateQuery @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitPolicyDecisionClass {
    pub parent_class: gobject::GObjectClass,
    pub _webkit_reserved0: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved1: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved2: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved3: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved4: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved5: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved6: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved7: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for WebKitPolicyDecisionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitPolicyDecisionClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .field("_webkit_reserved0", &self._webkit_reserved0)
            .field("_webkit_reserved1", &self._webkit_reserved1)
            .field("_webkit_reserved2", &self._webkit_reserved2)
            .field("_webkit_reserved3", &self._webkit_reserved3)
            .field("_webkit_reserved4", &self._webkit_reserved4)
            .field("_webkit_reserved5", &self._webkit_reserved5)
            .field("_webkit_reserved6", &self._webkit_reserved6)
            .field("_webkit_reserved7", &self._webkit_reserved7)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _WebKitPolicyDecisionPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type WebKitPolicyDecisionPrivate = _WebKitPolicyDecisionPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _WebKitPrintOperation {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type WebKitPrintOperation = _WebKitPrintOperation;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitRectangle {
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}

impl ::std::fmt::Debug for WebKitRectangle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitRectangle @ {self:p}"))
            .field("x", &self.x)
            .field("y", &self.y)
            .field("width", &self.width)
            .field("height", &self.height)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitResponsePolicyDecisionClass {
    pub parent_class: WebKitPolicyDecisionClass,
}

impl ::std::fmt::Debug for WebKitResponsePolicyDecisionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitResponsePolicyDecisionClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitScriptDialog {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitScriptDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitScriptDialog @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitScriptMessageReply {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitScriptMessageReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitScriptMessageReply @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitSecurityManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitSecurityManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitSecurityManagerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitSecurityOrigin {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitSecurityOrigin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitSecurityOrigin @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitSettingsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitSettingsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitSettingsClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitURIRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitURIRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitURIResponseClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitURIResponseClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIResponseClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitURISchemeRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitURISchemeRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURISchemeRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitURISchemeResponseClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitURISchemeResponseClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURISchemeResponseClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserContentFilter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserContentFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserContentFilter @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitUserContentFilterStoreClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitUserContentFilterStoreClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserContentFilterStoreClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitUserContentManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitUserContentManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserContentManagerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitUserMediaPermissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitUserMediaPermissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserMediaPermissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitUserMessageClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
}

impl ::std::fmt::Debug for WebKitUserMessageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserMessageClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserScript {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserScript {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserScript @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserStyleSheet {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserStyleSheet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserStyleSheet @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebContextClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebContextClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebContextClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebResourceClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebResourceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebResourceClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebViewBackend {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebViewBackend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebViewBackend @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebViewClass {
    pub parent: gobject::GObjectClass,
    pub load_changed: Option<unsafe extern "C" fn(*mut WebKitWebView, WebKitLoadEvent)>,
    pub load_failed: Option<
        unsafe extern "C" fn(
            *mut WebKitWebView,
            WebKitLoadEvent,
            *const c_char,
            *mut glib::GError,
        ) -> gboolean,
    >,
    pub create: Option<
        unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitNavigationAction) -> *mut WebKitWebView,
    >,
    pub ready_to_show: Option<unsafe extern "C" fn(*mut WebKitWebView)>,
    pub run_as_modal: Option<unsafe extern "C" fn(*mut WebKitWebView)>,
    pub close: Option<unsafe extern "C" fn(*mut WebKitWebView)>,
    pub script_dialog:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitScriptDialog) -> gboolean>,
    pub decide_policy: Option<
        unsafe extern "C" fn(
            *mut WebKitWebView,
            *mut WebKitPolicyDecision,
            WebKitPolicyDecisionType,
        ) -> gboolean,
    >,
    pub permission_request:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitPermissionRequest) -> gboolean>,
    pub mouse_target_changed:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitHitTestResult, c_uint)>,
    pub resource_load_started: Option<
        unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitWebResource, *mut WebKitURIRequest),
    >,
    pub enter_fullscreen: Option<unsafe extern "C" fn(*mut WebKitWebView) -> gboolean>,
    pub leave_fullscreen: Option<unsafe extern "C" fn(*mut WebKitWebView) -> gboolean>,
    pub run_file_chooser:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitFileChooserRequest) -> gboolean>,
    pub context_menu: Option<
        unsafe extern "C" fn(
            *mut WebKitWebView,
            *mut WebKitContextMenu,
            *mut WebKitHitTestResult,
        ) -> gboolean,
    >,
    pub context_menu_dismissed: Option<unsafe extern "C" fn(*mut WebKitWebView)>,
    pub submit_form:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitFormSubmissionRequest)>,
    pub insecure_content_detected:
        Option<unsafe extern "C" fn(*mut WebKitWebView, WebKitInsecureContentEvent)>,
    pub web_process_crashed: Option<unsafe extern "C" fn(*mut WebKitWebView) -> gboolean>,
    pub authenticate: Option<
        unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitAuthenticationRequest) -> gboolean,
    >,
    pub load_failed_with_tls_errors: Option<
        unsafe extern "C" fn(
            *mut WebKitWebView,
            *const c_char,
            *mut gio::GTlsCertificate,
            gio::GTlsCertificateFlags,
        ) -> gboolean,
    >,
    pub show_notification:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitNotification) -> gboolean>,
    pub web_process_terminated:
        Option<unsafe extern "C" fn(*mut WebKitWebView, WebKitWebProcessTerminationReason)>,
    pub user_message_received:
        Option<unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitUserMessage) -> gboolean>,
    pub show_option_menu: Option<
        unsafe extern "C" fn(
            *mut WebKitWebView,
            *mut WebKitOptionMenu,
            *mut WebKitRectangle,
        ) -> gboolean,
    >,
    pub query_permission_state: Option<
        unsafe extern "C" fn(*mut WebKitWebView, *mut WebKitPermissionStateQuery) -> gboolean,
    >,
    pub _webkit_reserved0: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved1: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved2: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved3: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved4: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved5: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved6: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved7: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved8: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved9: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved10: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved11: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved12: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved13: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved14: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved15: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved16: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved17: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved18: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved19: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved20: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved21: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved22: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved23: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved24: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved25: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved26: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved27: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved28: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved29: Option<unsafe extern "C" fn()>,
    pub _webkit_reserved30: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for WebKitWebViewClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebViewClass @ {self:p}"))
            .field("parent", &self.parent)
            .field("load_changed", &self.load_changed)
            .field("load_failed", &self.load_failed)
            .field("create", &self.create)
            .field("ready_to_show", &self.ready_to_show)
            .field("run_as_modal", &self.run_as_modal)
            .field("close", &self.close)
            .field("script_dialog", &self.script_dialog)
            .field("decide_policy", &self.decide_policy)
            .field("permission_request", &self.permission_request)
            .field("mouse_target_changed", &self.mouse_target_changed)
            .field("resource_load_started", &self.resource_load_started)
            .field("enter_fullscreen", &self.enter_fullscreen)
            .field("leave_fullscreen", &self.leave_fullscreen)
            .field("run_file_chooser", &self.run_file_chooser)
            .field("context_menu", &self.context_menu)
            .field("context_menu_dismissed", &self.context_menu_dismissed)
            .field("submit_form", &self.submit_form)
            .field("insecure_content_detected", &self.insecure_content_detected)
            .field("web_process_crashed", &self.web_process_crashed)
            .field("authenticate", &self.authenticate)
            .field("load_failed_with_tls_errors", &self.load_failed_with_tls_errors)
            .field("show_notification", &self.show_notification)
            .field("web_process_terminated", &self.web_process_terminated)
            .field("user_message_received", &self.user_message_received)
            .field("show_option_menu", &self.show_option_menu)
            .field("query_permission_state", &self.query_permission_state)
            .field("_webkit_reserved0", &self._webkit_reserved0)
            .field("_webkit_reserved1", &self._webkit_reserved1)
            .field("_webkit_reserved2", &self._webkit_reserved2)
            .field("_webkit_reserved3", &self._webkit_reserved3)
            .field("_webkit_reserved4", &self._webkit_reserved4)
            .field("_webkit_reserved5", &self._webkit_reserved5)
            .field("_webkit_reserved6", &self._webkit_reserved6)
            .field("_webkit_reserved7", &self._webkit_reserved7)
            .field("_webkit_reserved8", &self._webkit_reserved8)
            .field("_webkit_reserved9", &self._webkit_reserved9)
            .field("_webkit_reserved10", &self._webkit_reserved10)
            .field("_webkit_reserved11", &self._webkit_reserved11)
            .field("_webkit_reserved12", &self._webkit_reserved12)
            .field("_webkit_reserved13", &self._webkit_reserved13)
            .field("_webkit_reserved14", &self._webkit_reserved14)
            .field("_webkit_reserved15", &self._webkit_reserved15)
            .field("_webkit_reserved16", &self._webkit_reserved16)
            .field("_webkit_reserved17", &self._webkit_reserved17)
            .field("_webkit_reserved18", &self._webkit_reserved18)
            .field("_webkit_reserved19", &self._webkit_reserved19)
            .field("_webkit_reserved20", &self._webkit_reserved20)
            .field("_webkit_reserved21", &self._webkit_reserved21)
            .field("_webkit_reserved22", &self._webkit_reserved22)
            .field("_webkit_reserved23", &self._webkit_reserved23)
            .field("_webkit_reserved24", &self._webkit_reserved24)
            .field("_webkit_reserved25", &self._webkit_reserved25)
            .field("_webkit_reserved26", &self._webkit_reserved26)
            .field("_webkit_reserved27", &self._webkit_reserved27)
            .field("_webkit_reserved28", &self._webkit_reserved28)
            .field("_webkit_reserved29", &self._webkit_reserved29)
            .field("_webkit_reserved30", &self._webkit_reserved30)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _WebKitWebViewPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type WebKitWebViewPrivate = _WebKitWebViewPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebViewSessionState {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebViewSessionState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebViewSessionState @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebsiteData {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebsiteData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsiteData @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebsiteDataAccessPermissionRequestClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebsiteDataAccessPermissionRequestClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsiteDataAccessPermissionRequestClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebsiteDataManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebsiteDataManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsiteDataManagerClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebsitePoliciesClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWebsitePoliciesClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsitePoliciesClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWindowPropertiesClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WebKitWindowPropertiesClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWindowPropertiesClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

// Classes
#[repr(C)]
#[allow(dead_code)]
pub struct WebKitAuthenticationRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitAuthenticationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitAuthenticationRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitAutomationSession {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitAutomationSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitAutomationSession @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitBackForwardList {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitBackForwardList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitBackForwardList @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitBackForwardListItem {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitBackForwardListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitBackForwardListItem @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitContextMenu {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitContextMenu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenu @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitContextMenuItem {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitContextMenuItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitContextMenuItem @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitCookieManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitCookieManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitCookieManager @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitDeviceInfoPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitDeviceInfoPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitDeviceInfoPermissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitDownload {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitDownload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitDownload @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitEditorState {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitEditorState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitEditorState @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitFileChooserRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitFileChooserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFileChooserRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitFindController {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitFindController {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFindController @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitFormSubmissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitFormSubmissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitFormSubmissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitGeolocationManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitGeolocationManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitGeolocationManager @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitGeolocationPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitGeolocationPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitGeolocationPermissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitHitTestResult {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitHitTestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitHitTestResult @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitInputMethodContext {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut WebKitInputMethodContextPrivate,
}

impl ::std::fmt::Debug for WebKitInputMethodContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitInputMethodContext @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitMediaKeySystemPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitMediaKeySystemPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitMediaKeySystemPermissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitNavigationPolicyDecision {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitNavigationPolicyDecision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNavigationPolicyDecision @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitNetworkSession {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitNetworkSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNetworkSession @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitNotification {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNotification @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitNotificationPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitNotificationPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitNotificationPermissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitOptionMenu {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitOptionMenu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitOptionMenu @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitPolicyDecision {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut WebKitPolicyDecisionPrivate,
}

impl ::std::fmt::Debug for WebKitPolicyDecision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitPolicyDecision @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitResponsePolicyDecision {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitResponsePolicyDecision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitResponsePolicyDecision @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitSecurityManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitSecurityManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitSecurityManager @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitSettings {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitSettings @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitURIRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitURIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitURIResponse {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitURIResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURIResponse @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitURISchemeRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitURISchemeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURISchemeRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitURISchemeResponse {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitURISchemeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitURISchemeResponse @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserContentFilterStore {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserContentFilterStore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserContentFilterStore @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserContentManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserContentManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserContentManager @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserMediaPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserMediaPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserMediaPermissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitUserMessage {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitUserMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitUserMessage @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebContext {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebContext @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebResource {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebResource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebResource @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WebKitWebView {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut WebKitWebViewPrivate,
}

impl ::std::fmt::Debug for WebKitWebView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebView @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebsiteDataAccessPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebsiteDataAccessPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsiteDataAccessPermissionRequest @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebsiteDataManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebsiteDataManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsiteDataManager @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWebsitePolicies {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWebsitePolicies {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWebsitePolicies @ {self:p}")).finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct WebKitWindowProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitWindowProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WebKitWindowProperties @ {self:p}")).finish()
    }
}

// Interfaces
#[repr(C)]
#[allow(dead_code)]
pub struct WebKitPermissionRequest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WebKitPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WebKitPermissionRequest @ {self:p}")
    }
}

#[link(name = "WPEWebKit-2.0")]
#[link(name = "WPEPlatform-2.0")]
extern "C" {

    //=========================================================================
    // WebKitAuthenticationScheme
    //=========================================================================
    pub fn webkit_authentication_scheme_get_type() -> GType;

    //=========================================================================
    // WebKitAutomationBrowsingContextPresentation
    //=========================================================================
    pub fn webkit_automation_browsing_context_presentation_get_type() -> GType;

    //=========================================================================
    // WebKitAutoplayPolicy
    //=========================================================================
    pub fn webkit_autoplay_policy_get_type() -> GType;

    //=========================================================================
    // WebKitCacheModel
    //=========================================================================
    pub fn webkit_cache_model_get_type() -> GType;

    //=========================================================================
    // WebKitContextMenuAction
    //=========================================================================
    pub fn webkit_context_menu_action_get_type() -> GType;

    //=========================================================================
    // WebKitCookieAcceptPolicy
    //=========================================================================
    pub fn webkit_cookie_accept_policy_get_type() -> GType;

    //=========================================================================
    // WebKitCookiePersistentStorage
    //=========================================================================
    pub fn webkit_cookie_persistent_storage_get_type() -> GType;

    //=========================================================================
    // WebKitCredentialPersistence
    //=========================================================================
    pub fn webkit_credential_persistence_get_type() -> GType;

    //=========================================================================
    // WebKitDownloadError
    //=========================================================================
    pub fn webkit_download_error_get_type() -> GType;
    pub fn webkit_download_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitFeatureStatus
    //=========================================================================
    pub fn webkit_feature_status_get_type() -> GType;

    //=========================================================================
    // WebKitInputPurpose
    //=========================================================================
    pub fn webkit_input_purpose_get_type() -> GType;

    //=========================================================================
    // WebKitInsecureContentEvent
    //=========================================================================
    pub fn webkit_insecure_content_event_get_type() -> GType;

    //=========================================================================
    // WebKitJavascriptError
    //=========================================================================
    pub fn webkit_javascript_error_get_type() -> GType;
    pub fn webkit_javascript_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitLoadEvent
    //=========================================================================
    pub fn webkit_load_event_get_type() -> GType;

    //=========================================================================
    // WebKitMediaCaptureState
    //=========================================================================
    pub fn webkit_media_capture_state_get_type() -> GType;

    //=========================================================================
    // WebKitMediaError
    //=========================================================================
    pub fn webkit_media_error_get_type() -> GType;
    pub fn webkit_media_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitNavigationType
    //=========================================================================
    pub fn webkit_navigation_type_get_type() -> GType;

    //=========================================================================
    // WebKitNetworkError
    //=========================================================================
    pub fn webkit_network_error_get_type() -> GType;
    pub fn webkit_network_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitNetworkProxyMode
    //=========================================================================
    pub fn webkit_network_proxy_mode_get_type() -> GType;

    //=========================================================================
    // WebKitPermissionState
    //=========================================================================
    pub fn webkit_permission_state_get_type() -> GType;

    //=========================================================================
    // WebKitPolicyDecisionType
    //=========================================================================
    pub fn webkit_policy_decision_type_get_type() -> GType;

    //=========================================================================
    // WebKitPolicyError
    //=========================================================================
    pub fn webkit_policy_error_get_type() -> GType;
    pub fn webkit_policy_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitSaveMode
    //=========================================================================
    pub fn webkit_save_mode_get_type() -> GType;

    //=========================================================================
    // WebKitScriptDialogType
    //=========================================================================
    pub fn webkit_script_dialog_type_get_type() -> GType;

    //=========================================================================
    // WebKitSnapshotError
    //=========================================================================
    pub fn webkit_snapshot_error_get_type() -> GType;
    pub fn webkit_snapshot_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitTLSErrorsPolicy
    //=========================================================================
    pub fn webkit_tls_errors_policy_get_type() -> GType;

    //=========================================================================
    // WebKitUserContentFilterError
    //=========================================================================
    pub fn webkit_user_content_filter_error_get_type() -> GType;
    pub fn webkit_user_content_filter_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitUserContentInjectedFrames
    //=========================================================================
    pub fn webkit_user_content_injected_frames_get_type() -> GType;

    //=========================================================================
    // WebKitUserMessageError
    //=========================================================================
    pub fn webkit_user_message_error_get_type() -> GType;
    pub fn webkit_user_message_error_quark() -> glib::GQuark;

    //=========================================================================
    // WebKitUserScriptInjectionTime
    //=========================================================================
    pub fn webkit_user_script_injection_time_get_type() -> GType;

    //=========================================================================
    // WebKitUserStyleLevel
    //=========================================================================
    pub fn webkit_user_style_level_get_type() -> GType;

    //=========================================================================
    // WebKitWebExtensionMode
    //=========================================================================
    pub fn webkit_web_extension_mode_get_type() -> GType;

    //=========================================================================
    // WebKitWebProcessTerminationReason
    //=========================================================================
    pub fn webkit_web_process_termination_reason_get_type() -> GType;

    //=========================================================================
    // WebKitEditorTypingAttributes
    //=========================================================================
    pub fn webkit_editor_typing_attributes_get_type() -> GType;

    //=========================================================================
    // WebKitFindOptions
    //=========================================================================
    pub fn webkit_find_options_get_type() -> GType;

    //=========================================================================
    // WebKitHitTestResultContext
    //=========================================================================
    pub fn webkit_hit_test_result_context_get_type() -> GType;

    //=========================================================================
    // WebKitInputHints
    //=========================================================================
    pub fn webkit_input_hints_get_type() -> GType;

    //=========================================================================
    // WebKitWebsiteDataTypes
    //=========================================================================
    pub fn webkit_website_data_types_get_type() -> GType;

    //=========================================================================
    // WebKitApplicationInfo
    //=========================================================================
    pub fn webkit_application_info_get_type() -> GType;
    pub fn webkit_application_info_new() -> *mut WebKitApplicationInfo;
    pub fn webkit_application_info_get_name(info: *mut WebKitApplicationInfo) -> *const c_char;
    pub fn webkit_application_info_get_version(
        info: *mut WebKitApplicationInfo,
        major: *mut u64,
        minor: *mut u64,
        micro: *mut u64,
    );
    pub fn webkit_application_info_ref(
        info: *mut WebKitApplicationInfo,
    ) -> *mut WebKitApplicationInfo;
    pub fn webkit_application_info_set_name(info: *mut WebKitApplicationInfo, name: *const c_char);
    pub fn webkit_application_info_set_version(
        info: *mut WebKitApplicationInfo,
        major: u64,
        minor: u64,
        micro: u64,
    );
    pub fn webkit_application_info_unref(info: *mut WebKitApplicationInfo);

    //=========================================================================
    // WebKitColor
    //=========================================================================
    pub fn webkit_color_get_type() -> GType;
    pub fn webkit_color_parse(color: *mut WebKitColor, color_string: *const c_char) -> gboolean;

    //=========================================================================
    // WebKitCredential
    //=========================================================================
    pub fn webkit_credential_get_type() -> GType;
    pub fn webkit_credential_new(
        username: *const c_char,
        password: *const c_char,
        persistence: WebKitCredentialPersistence,
    ) -> *mut WebKitCredential;
    pub fn webkit_credential_new_for_certificate(
        certificate: *mut gio::GTlsCertificate,
        persistence: WebKitCredentialPersistence,
    ) -> *mut WebKitCredential;
    pub fn webkit_credential_new_for_certificate_pin(
        pin: *const c_char,
        persistence: WebKitCredentialPersistence,
    ) -> *mut WebKitCredential;
    pub fn webkit_credential_copy(credential: *mut WebKitCredential) -> *mut WebKitCredential;
    pub fn webkit_credential_free(credential: *mut WebKitCredential);
    pub fn webkit_credential_get_certificate(
        credential: *mut WebKitCredential,
    ) -> *mut gio::GTlsCertificate;
    pub fn webkit_credential_get_password(credential: *mut WebKitCredential) -> *const c_char;
    pub fn webkit_credential_get_persistence(
        credential: *mut WebKitCredential,
    ) -> WebKitCredentialPersistence;
    pub fn webkit_credential_get_username(credential: *mut WebKitCredential) -> *const c_char;
    pub fn webkit_credential_has_password(credential: *mut WebKitCredential) -> gboolean;

    //=========================================================================
    // WebKitFeature
    //=========================================================================
    pub fn webkit_feature_get_type() -> GType;
    pub fn webkit_feature_get_category(feature: *mut WebKitFeature) -> *const c_char;
    pub fn webkit_feature_get_default_value(feature: *mut WebKitFeature) -> gboolean;
    pub fn webkit_feature_get_details(feature: *mut WebKitFeature) -> *const c_char;
    pub fn webkit_feature_get_identifier(feature: *mut WebKitFeature) -> *const c_char;
    pub fn webkit_feature_get_name(feature: *mut WebKitFeature) -> *const c_char;
    pub fn webkit_feature_get_status(feature: *mut WebKitFeature) -> WebKitFeatureStatus;
    pub fn webkit_feature_ref(feature: *mut WebKitFeature) -> *mut WebKitFeature;
    pub fn webkit_feature_unref(feature: *mut WebKitFeature);

    //=========================================================================
    // WebKitFeatureList
    //=========================================================================
    pub fn webkit_feature_list_get_type() -> GType;
    pub fn webkit_feature_list_get(
        feature_list: *mut WebKitFeatureList,
        index: size_t,
    ) -> *mut WebKitFeature;
    pub fn webkit_feature_list_get_length(feature_list: *mut WebKitFeatureList) -> size_t;
    pub fn webkit_feature_list_ref(feature_list: *mut WebKitFeatureList) -> *mut WebKitFeatureList;
    pub fn webkit_feature_list_unref(feature_list: *mut WebKitFeatureList);

    //=========================================================================
    // WebKitGeolocationPosition
    //=========================================================================
    pub fn webkit_geolocation_position_get_type() -> GType;
    pub fn webkit_geolocation_position_new(
        latitude: c_double,
        longitude: c_double,
        accuracy: c_double,
    ) -> *mut WebKitGeolocationPosition;
    pub fn webkit_geolocation_position_copy(
        position: *mut WebKitGeolocationPosition,
    ) -> *mut WebKitGeolocationPosition;
    pub fn webkit_geolocation_position_free(position: *mut WebKitGeolocationPosition);
    pub fn webkit_geolocation_position_set_altitude(
        position: *mut WebKitGeolocationPosition,
        altitude: c_double,
    );
    pub fn webkit_geolocation_position_set_altitude_accuracy(
        position: *mut WebKitGeolocationPosition,
        altitude_accuracy: c_double,
    );
    pub fn webkit_geolocation_position_set_heading(
        position: *mut WebKitGeolocationPosition,
        heading: c_double,
    );
    pub fn webkit_geolocation_position_set_speed(
        position: *mut WebKitGeolocationPosition,
        speed: c_double,
    );
    pub fn webkit_geolocation_position_set_timestamp(
        position: *mut WebKitGeolocationPosition,
        timestamp: u64,
    );

    //=========================================================================
    // WebKitITPFirstParty
    //=========================================================================
    pub fn webkit_itp_first_party_get_type() -> GType;
    pub fn webkit_itp_first_party_get_domain(
        itp_first_party: *mut WebKitITPFirstParty,
    ) -> *const c_char;
    pub fn webkit_itp_first_party_get_last_update_time(
        itp_first_party: *mut WebKitITPFirstParty,
    ) -> *mut glib::GDateTime;
    pub fn webkit_itp_first_party_get_website_data_access_allowed(
        itp_first_party: *mut WebKitITPFirstParty,
    ) -> gboolean;
    pub fn webkit_itp_first_party_ref(
        itp_first_party: *mut WebKitITPFirstParty,
    ) -> *mut WebKitITPFirstParty;
    pub fn webkit_itp_first_party_unref(itp_first_party: *mut WebKitITPFirstParty);

    //=========================================================================
    // WebKitITPThirdParty
    //=========================================================================
    pub fn webkit_itp_third_party_get_type() -> GType;
    pub fn webkit_itp_third_party_get_domain(
        itp_third_party: *mut WebKitITPThirdParty,
    ) -> *const c_char;
    pub fn webkit_itp_third_party_get_first_parties(
        itp_third_party: *mut WebKitITPThirdParty,
    ) -> *mut glib::GList;
    pub fn webkit_itp_third_party_ref(
        itp_third_party: *mut WebKitITPThirdParty,
    ) -> *mut WebKitITPThirdParty;
    pub fn webkit_itp_third_party_unref(itp_third_party: *mut WebKitITPThirdParty);

    //=========================================================================
    // WebKitInputMethodUnderline
    //=========================================================================
    pub fn webkit_input_method_underline_get_type() -> GType;
    pub fn webkit_input_method_underline_new(
        start_offset: c_uint,
        end_offset: c_uint,
    ) -> *mut WebKitInputMethodUnderline;
    pub fn webkit_input_method_underline_copy(
        underline: *mut WebKitInputMethodUnderline,
    ) -> *mut WebKitInputMethodUnderline;
    pub fn webkit_input_method_underline_free(underline: *mut WebKitInputMethodUnderline);
    pub fn webkit_input_method_underline_set_color(
        underline: *mut WebKitInputMethodUnderline,
        color: *mut WebKitColor,
    );

    //=========================================================================
    // WebKitMemoryPressureSettings
    //=========================================================================
    pub fn webkit_memory_pressure_settings_get_type() -> GType;
    pub fn webkit_memory_pressure_settings_new() -> *mut WebKitMemoryPressureSettings;
    pub fn webkit_memory_pressure_settings_copy(
        settings: *mut WebKitMemoryPressureSettings,
    ) -> *mut WebKitMemoryPressureSettings;
    pub fn webkit_memory_pressure_settings_free(settings: *mut WebKitMemoryPressureSettings);
    pub fn webkit_memory_pressure_settings_get_conservative_threshold(
        settings: *mut WebKitMemoryPressureSettings,
    ) -> c_double;
    pub fn webkit_memory_pressure_settings_get_kill_threshold(
        settings: *mut WebKitMemoryPressureSettings,
    ) -> c_double;
    pub fn webkit_memory_pressure_settings_get_memory_limit(
        settings: *mut WebKitMemoryPressureSettings,
    ) -> c_uint;
    pub fn webkit_memory_pressure_settings_get_poll_interval(
        settings: *mut WebKitMemoryPressureSettings,
    ) -> c_double;
    pub fn webkit_memory_pressure_settings_get_strict_threshold(
        settings: *mut WebKitMemoryPressureSettings,
    ) -> c_double;
    pub fn webkit_memory_pressure_settings_set_conservative_threshold(
        settings: *mut WebKitMemoryPressureSettings,
        value: c_double,
    );
    pub fn webkit_memory_pressure_settings_set_kill_threshold(
        settings: *mut WebKitMemoryPressureSettings,
        value: c_double,
    );
    pub fn webkit_memory_pressure_settings_set_memory_limit(
        settings: *mut WebKitMemoryPressureSettings,
        memory_limit: c_uint,
    );
    pub fn webkit_memory_pressure_settings_set_poll_interval(
        settings: *mut WebKitMemoryPressureSettings,
        value: c_double,
    );
    pub fn webkit_memory_pressure_settings_set_strict_threshold(
        settings: *mut WebKitMemoryPressureSettings,
        value: c_double,
    );

    //=========================================================================
    // WebKitNavigationAction
    //=========================================================================
    pub fn webkit_navigation_action_get_type() -> GType;
    pub fn webkit_navigation_action_copy(
        navigation: *mut WebKitNavigationAction,
    ) -> *mut WebKitNavigationAction;
    pub fn webkit_navigation_action_free(navigation: *mut WebKitNavigationAction);
    pub fn webkit_navigation_action_get_frame_name(
        navigation: *mut WebKitNavigationAction,
    ) -> *const c_char;
    pub fn webkit_navigation_action_get_modifiers(
        navigation: *mut WebKitNavigationAction,
    ) -> c_uint;
    pub fn webkit_navigation_action_get_mouse_button(
        navigation: *mut WebKitNavigationAction,
    ) -> c_uint;
    pub fn webkit_navigation_action_get_navigation_type(
        navigation: *mut WebKitNavigationAction,
    ) -> WebKitNavigationType;
    pub fn webkit_navigation_action_get_request(
        navigation: *mut WebKitNavigationAction,
    ) -> *mut WebKitURIRequest;
    pub fn webkit_navigation_action_is_redirect(
        navigation: *mut WebKitNavigationAction,
    ) -> gboolean;
    pub fn webkit_navigation_action_is_user_gesture(
        navigation: *mut WebKitNavigationAction,
    ) -> gboolean;

    //=========================================================================
    // WebKitNetworkProxySettings
    //=========================================================================
    pub fn webkit_network_proxy_settings_get_type() -> GType;
    pub fn webkit_network_proxy_settings_new(
        default_proxy_uri: *const c_char,
        ignore_hosts: *const *const c_char,
    ) -> *mut WebKitNetworkProxySettings;
    pub fn webkit_network_proxy_settings_add_proxy_for_scheme(
        proxy_settings: *mut WebKitNetworkProxySettings,
        scheme: *const c_char,
        proxy_uri: *const c_char,
    );
    pub fn webkit_network_proxy_settings_copy(
        proxy_settings: *mut WebKitNetworkProxySettings,
    ) -> *mut WebKitNetworkProxySettings;
    pub fn webkit_network_proxy_settings_free(proxy_settings: *mut WebKitNetworkProxySettings);

    //=========================================================================
    // WebKitOptionMenuItem
    //=========================================================================
    pub fn webkit_option_menu_item_get_type() -> GType;
    pub fn webkit_option_menu_item_copy(
        item: *mut WebKitOptionMenuItem,
    ) -> *mut WebKitOptionMenuItem;
    pub fn webkit_option_menu_item_free(item: *mut WebKitOptionMenuItem);
    pub fn webkit_option_menu_item_get_label(item: *mut WebKitOptionMenuItem) -> *const c_char;
    pub fn webkit_option_menu_item_get_tooltip(item: *mut WebKitOptionMenuItem) -> *const c_char;
    pub fn webkit_option_menu_item_is_enabled(item: *mut WebKitOptionMenuItem) -> gboolean;
    pub fn webkit_option_menu_item_is_group_child(item: *mut WebKitOptionMenuItem) -> gboolean;
    pub fn webkit_option_menu_item_is_group_label(item: *mut WebKitOptionMenuItem) -> gboolean;
    pub fn webkit_option_menu_item_is_selected(item: *mut WebKitOptionMenuItem) -> gboolean;

    //=========================================================================
    // WebKitPermissionStateQuery
    //=========================================================================
    pub fn webkit_permission_state_query_get_type() -> GType;
    pub fn webkit_permission_state_query_finish(
        query: *mut WebKitPermissionStateQuery,
        state: WebKitPermissionState,
    );
    pub fn webkit_permission_state_query_get_name(
        query: *mut WebKitPermissionStateQuery,
    ) -> *const c_char;
    pub fn webkit_permission_state_query_get_security_origin(
        query: *mut WebKitPermissionStateQuery,
    ) -> *mut WebKitSecurityOrigin;
    pub fn webkit_permission_state_query_ref(
        query: *mut WebKitPermissionStateQuery,
    ) -> *mut WebKitPermissionStateQuery;
    pub fn webkit_permission_state_query_unref(query: *mut WebKitPermissionStateQuery);

    //=========================================================================
    // WebKitRectangle
    //=========================================================================
    pub fn webkit_rectangle_get_type() -> GType;

    //=========================================================================
    // WebKitScriptDialog
    //=========================================================================
    pub fn webkit_script_dialog_get_type() -> GType;
    pub fn webkit_script_dialog_close(dialog: *mut WebKitScriptDialog);
    pub fn webkit_script_dialog_confirm_set_confirmed(
        dialog: *mut WebKitScriptDialog,
        confirmed: gboolean,
    );
    pub fn webkit_script_dialog_get_dialog_type(
        dialog: *mut WebKitScriptDialog,
    ) -> WebKitScriptDialogType;
    pub fn webkit_script_dialog_get_message(dialog: *mut WebKitScriptDialog) -> *const c_char;
    pub fn webkit_script_dialog_prompt_get_default_text(
        dialog: *mut WebKitScriptDialog,
    ) -> *const c_char;
    pub fn webkit_script_dialog_prompt_set_text(
        dialog: *mut WebKitScriptDialog,
        text: *const c_char,
    );
    pub fn webkit_script_dialog_ref(dialog: *mut WebKitScriptDialog) -> *mut WebKitScriptDialog;
    pub fn webkit_script_dialog_unref(dialog: *mut WebKitScriptDialog);

    //=========================================================================
    // WebKitScriptMessageReply
    //=========================================================================
    pub fn webkit_script_message_reply_get_type() -> GType;
    pub fn webkit_script_message_reply_ref(
        script_message_reply: *mut WebKitScriptMessageReply,
    ) -> *mut WebKitScriptMessageReply;
    pub fn webkit_script_message_reply_return_error_message(
        script_message_reply: *mut WebKitScriptMessageReply,
        error_message: *const c_char,
    );
    pub fn webkit_script_message_reply_return_value(
        script_message_reply: *mut WebKitScriptMessageReply,
        reply_value: *mut wpe_java_script_core::JSCValue,
    );
    pub fn webkit_script_message_reply_unref(script_message_reply: *mut WebKitScriptMessageReply);

    //=========================================================================
    // WebKitSecurityOrigin
    //=========================================================================
    pub fn webkit_security_origin_get_type() -> GType;
    pub fn webkit_security_origin_new(
        protocol: *const c_char,
        host: *const c_char,
        port: u16,
    ) -> *mut WebKitSecurityOrigin;
    pub fn webkit_security_origin_new_for_uri(uri: *const c_char) -> *mut WebKitSecurityOrigin;
    pub fn webkit_security_origin_get_host(origin: *mut WebKitSecurityOrigin) -> *const c_char;
    pub fn webkit_security_origin_get_port(origin: *mut WebKitSecurityOrigin) -> u16;
    pub fn webkit_security_origin_get_protocol(origin: *mut WebKitSecurityOrigin) -> *const c_char;
    pub fn webkit_security_origin_ref(
        origin: *mut WebKitSecurityOrigin,
    ) -> *mut WebKitSecurityOrigin;
    pub fn webkit_security_origin_to_string(origin: *mut WebKitSecurityOrigin) -> *mut c_char;
    pub fn webkit_security_origin_unref(origin: *mut WebKitSecurityOrigin);

    //=========================================================================
    // WebKitUserContentFilter
    //=========================================================================
    pub fn webkit_user_content_filter_get_type() -> GType;
    pub fn webkit_user_content_filter_get_identifier(
        user_content_filter: *mut WebKitUserContentFilter,
    ) -> *const c_char;
    pub fn webkit_user_content_filter_ref(
        user_content_filter: *mut WebKitUserContentFilter,
    ) -> *mut WebKitUserContentFilter;
    pub fn webkit_user_content_filter_unref(user_content_filter: *mut WebKitUserContentFilter);

    //=========================================================================
    // WebKitUserScript
    //=========================================================================
    pub fn webkit_user_script_get_type() -> GType;
    pub fn webkit_user_script_new(
        source: *const c_char,
        injected_frames: WebKitUserContentInjectedFrames,
        injection_time: WebKitUserScriptInjectionTime,
        allow_list: *const *const c_char,
        block_list: *const *const c_char,
    ) -> *mut WebKitUserScript;
    pub fn webkit_user_script_new_for_world(
        source: *const c_char,
        injected_frames: WebKitUserContentInjectedFrames,
        injection_time: WebKitUserScriptInjectionTime,
        world_name: *const c_char,
        allow_list: *const *const c_char,
        block_list: *const *const c_char,
    ) -> *mut WebKitUserScript;
    pub fn webkit_user_script_ref(user_script: *mut WebKitUserScript) -> *mut WebKitUserScript;
    pub fn webkit_user_script_unref(user_script: *mut WebKitUserScript);

    //=========================================================================
    // WebKitUserStyleSheet
    //=========================================================================
    pub fn webkit_user_style_sheet_get_type() -> GType;
    pub fn webkit_user_style_sheet_new(
        source: *const c_char,
        injected_frames: WebKitUserContentInjectedFrames,
        level: WebKitUserStyleLevel,
        allow_list: *const *const c_char,
        block_list: *const *const c_char,
    ) -> *mut WebKitUserStyleSheet;
    pub fn webkit_user_style_sheet_new_for_world(
        source: *const c_char,
        injected_frames: WebKitUserContentInjectedFrames,
        level: WebKitUserStyleLevel,
        world_name: *const c_char,
        allow_list: *const *const c_char,
        block_list: *const *const c_char,
    ) -> *mut WebKitUserStyleSheet;
    pub fn webkit_user_style_sheet_ref(
        user_style_sheet: *mut WebKitUserStyleSheet,
    ) -> *mut WebKitUserStyleSheet;
    pub fn webkit_user_style_sheet_unref(user_style_sheet: *mut WebKitUserStyleSheet);

    //=========================================================================
    // WebKitWebViewBackend
    //=========================================================================
    pub fn webkit_web_view_backend_get_type() -> GType;
    pub fn webkit_web_view_backend_new(
        backend: *mut wpe_view_backend,
        notify: glib::GDestroyNotify,
        user_data: gpointer,
    ) -> *mut WebKitWebViewBackend;
    pub fn webkit_web_view_backend_get_wpe_backend(
        view_backend: *mut WebKitWebViewBackend,
    ) -> *mut wpe_view_backend;

    //=========================================================================
    // WebKitWebViewSessionState
    //=========================================================================
    pub fn webkit_web_view_session_state_get_type() -> GType;
    pub fn webkit_web_view_session_state_new(
        data: *mut glib::GBytes,
    ) -> *mut WebKitWebViewSessionState;
    pub fn webkit_web_view_session_state_ref(
        state: *mut WebKitWebViewSessionState,
    ) -> *mut WebKitWebViewSessionState;
    pub fn webkit_web_view_session_state_serialize(
        state: *mut WebKitWebViewSessionState,
    ) -> *mut glib::GBytes;
    pub fn webkit_web_view_session_state_unref(state: *mut WebKitWebViewSessionState);

    //=========================================================================
    // WebKitWebsiteData
    //=========================================================================
    pub fn webkit_website_data_get_type() -> GType;
    pub fn webkit_website_data_get_name(website_data: *mut WebKitWebsiteData) -> *const c_char;
    pub fn webkit_website_data_get_size(
        website_data: *mut WebKitWebsiteData,
        types: WebKitWebsiteDataTypes,
    ) -> u64;
    pub fn webkit_website_data_get_types(
        website_data: *mut WebKitWebsiteData,
    ) -> WebKitWebsiteDataTypes;
    pub fn webkit_website_data_ref(website_data: *mut WebKitWebsiteData) -> *mut WebKitWebsiteData;
    pub fn webkit_website_data_unref(website_data: *mut WebKitWebsiteData);

    //=========================================================================
    // WebKitAuthenticationRequest
    //=========================================================================
    pub fn webkit_authentication_request_get_type() -> GType;
    pub fn webkit_authentication_request_authenticate(
        request: *mut WebKitAuthenticationRequest,
        credential: *mut WebKitCredential,
    );
    pub fn webkit_authentication_request_can_save_credentials(
        request: *mut WebKitAuthenticationRequest,
    ) -> gboolean;
    pub fn webkit_authentication_request_cancel(request: *mut WebKitAuthenticationRequest);
    pub fn webkit_authentication_request_get_certificate_pin_flags(
        request: *mut WebKitAuthenticationRequest,
    ) -> gio::GTlsPasswordFlags;
    pub fn webkit_authentication_request_get_host(
        request: *mut WebKitAuthenticationRequest,
    ) -> *const c_char;
    pub fn webkit_authentication_request_get_port(
        request: *mut WebKitAuthenticationRequest,
    ) -> c_uint;
    pub fn webkit_authentication_request_get_proposed_credential(
        request: *mut WebKitAuthenticationRequest,
    ) -> *mut WebKitCredential;
    pub fn webkit_authentication_request_get_realm(
        request: *mut WebKitAuthenticationRequest,
    ) -> *const c_char;
    pub fn webkit_authentication_request_get_scheme(
        request: *mut WebKitAuthenticationRequest,
    ) -> WebKitAuthenticationScheme;
    pub fn webkit_authentication_request_get_security_origin(
        request: *mut WebKitAuthenticationRequest,
    ) -> *mut WebKitSecurityOrigin;
    pub fn webkit_authentication_request_is_for_proxy(
        request: *mut WebKitAuthenticationRequest,
    ) -> gboolean;
    pub fn webkit_authentication_request_is_retry(
        request: *mut WebKitAuthenticationRequest,
    ) -> gboolean;
    pub fn webkit_authentication_request_set_can_save_credentials(
        request: *mut WebKitAuthenticationRequest,
        enabled: gboolean,
    );
    pub fn webkit_authentication_request_set_proposed_credential(
        request: *mut WebKitAuthenticationRequest,
        credential: *mut WebKitCredential,
    );

    //=========================================================================
    // WebKitAutomationSession
    //=========================================================================
    pub fn webkit_automation_session_get_type() -> GType;
    pub fn webkit_automation_session_get_application_info(
        session: *mut WebKitAutomationSession,
    ) -> *mut WebKitApplicationInfo;
    pub fn webkit_automation_session_get_id(session: *mut WebKitAutomationSession)
        -> *const c_char;
    pub fn webkit_automation_session_set_application_info(
        session: *mut WebKitAutomationSession,
        info: *mut WebKitApplicationInfo,
    );

    //=========================================================================
    // WebKitBackForwardList
    //=========================================================================
    pub fn webkit_back_forward_list_get_type() -> GType;
    pub fn webkit_back_forward_list_get_back_item(
        back_forward_list: *mut WebKitBackForwardList,
    ) -> *mut WebKitBackForwardListItem;
    pub fn webkit_back_forward_list_get_back_list(
        back_forward_list: *mut WebKitBackForwardList,
    ) -> *mut glib::GList;
    pub fn webkit_back_forward_list_get_back_list_with_limit(
        back_forward_list: *mut WebKitBackForwardList,
        limit: c_uint,
    ) -> *mut glib::GList;
    pub fn webkit_back_forward_list_get_current_item(
        back_forward_list: *mut WebKitBackForwardList,
    ) -> *mut WebKitBackForwardListItem;
    pub fn webkit_back_forward_list_get_forward_item(
        back_forward_list: *mut WebKitBackForwardList,
    ) -> *mut WebKitBackForwardListItem;
    pub fn webkit_back_forward_list_get_forward_list(
        back_forward_list: *mut WebKitBackForwardList,
    ) -> *mut glib::GList;
    pub fn webkit_back_forward_list_get_forward_list_with_limit(
        back_forward_list: *mut WebKitBackForwardList,
        limit: c_uint,
    ) -> *mut glib::GList;
    pub fn webkit_back_forward_list_get_length(
        back_forward_list: *mut WebKitBackForwardList,
    ) -> c_uint;
    pub fn webkit_back_forward_list_get_nth_item(
        back_forward_list: *mut WebKitBackForwardList,
        index: c_int,
    ) -> *mut WebKitBackForwardListItem;

    //=========================================================================
    // WebKitBackForwardListItem
    //=========================================================================
    pub fn webkit_back_forward_list_item_get_type() -> GType;
    pub fn webkit_back_forward_list_item_get_original_uri(
        list_item: *mut WebKitBackForwardListItem,
    ) -> *const c_char;
    pub fn webkit_back_forward_list_item_get_title(
        list_item: *mut WebKitBackForwardListItem,
    ) -> *const c_char;
    pub fn webkit_back_forward_list_item_get_uri(
        list_item: *mut WebKitBackForwardListItem,
    ) -> *const c_char;

    //=========================================================================
    // WebKitContextMenu
    //=========================================================================
    pub fn webkit_context_menu_get_type() -> GType;
    pub fn webkit_context_menu_new() -> *mut WebKitContextMenu;
    pub fn webkit_context_menu_new_with_items(items: *mut glib::GList) -> *mut WebKitContextMenu;
    pub fn webkit_context_menu_append(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
    );
    pub fn webkit_context_menu_first(menu: *mut WebKitContextMenu) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_get_item_at_position(
        menu: *mut WebKitContextMenu,
        position: c_uint,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_get_items(menu: *mut WebKitContextMenu) -> *mut glib::GList;
    pub fn webkit_context_menu_get_n_items(menu: *mut WebKitContextMenu) -> c_uint;
    pub fn webkit_context_menu_get_user_data(menu: *mut WebKitContextMenu) -> *mut glib::GVariant;
    pub fn webkit_context_menu_insert(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
        position: c_int,
    );
    pub fn webkit_context_menu_last(menu: *mut WebKitContextMenu) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_move_item(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
        position: c_int,
    );
    pub fn webkit_context_menu_prepend(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
    );
    pub fn webkit_context_menu_remove(
        menu: *mut WebKitContextMenu,
        item: *mut WebKitContextMenuItem,
    );
    pub fn webkit_context_menu_remove_all(menu: *mut WebKitContextMenu);
    pub fn webkit_context_menu_set_user_data(
        menu: *mut WebKitContextMenu,
        user_data: *mut glib::GVariant,
    );

    //=========================================================================
    // WebKitContextMenuItem
    //=========================================================================
    pub fn webkit_context_menu_item_get_type() -> GType;
    pub fn webkit_context_menu_item_new_from_gaction(
        action: *mut gio::GAction,
        label: *const c_char,
        target: *mut glib::GVariant,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_from_stock_action(
        action: WebKitContextMenuAction,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_from_stock_action_with_label(
        action: WebKitContextMenuAction,
        label: *const c_char,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_separator() -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_new_with_submenu(
        label: *const c_char,
        submenu: *mut WebKitContextMenu,
    ) -> *mut WebKitContextMenuItem;
    pub fn webkit_context_menu_item_get_gaction(
        item: *mut WebKitContextMenuItem,
    ) -> *mut gio::GAction;
    pub fn webkit_context_menu_item_get_stock_action(
        item: *mut WebKitContextMenuItem,
    ) -> WebKitContextMenuAction;
    pub fn webkit_context_menu_item_get_submenu(
        item: *mut WebKitContextMenuItem,
    ) -> *mut WebKitContextMenu;
    pub fn webkit_context_menu_item_get_title(item: *mut WebKitContextMenuItem) -> *const c_char;
    pub fn webkit_context_menu_item_is_separator(item: *mut WebKitContextMenuItem) -> gboolean;
    pub fn webkit_context_menu_item_set_submenu(
        item: *mut WebKitContextMenuItem,
        submenu: *mut WebKitContextMenu,
    );

    //=========================================================================
    // WebKitCookieManager
    //=========================================================================
    pub fn webkit_cookie_manager_get_type() -> GType;
    pub fn webkit_cookie_manager_add_cookie(
        cookie_manager: *mut WebKitCookieManager,
        cookie: *mut soup::SoupCookie,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_cookie_manager_add_cookie_finish(
        cookie_manager: *mut WebKitCookieManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_cookie_manager_delete_cookie(
        cookie_manager: *mut WebKitCookieManager,
        cookie: *mut soup::SoupCookie,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_cookie_manager_delete_cookie_finish(
        cookie_manager: *mut WebKitCookieManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_cookie_manager_get_accept_policy(
        cookie_manager: *mut WebKitCookieManager,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_cookie_manager_get_accept_policy_finish(
        cookie_manager: *mut WebKitCookieManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> WebKitCookieAcceptPolicy;
    pub fn webkit_cookie_manager_get_all_cookies(
        cookie_manager: *mut WebKitCookieManager,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_cookie_manager_get_all_cookies_finish(
        cookie_manager: *mut WebKitCookieManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut glib::GList;
    pub fn webkit_cookie_manager_get_cookies(
        cookie_manager: *mut WebKitCookieManager,
        uri: *const c_char,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_cookie_manager_get_cookies_finish(
        cookie_manager: *mut WebKitCookieManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut glib::GList;
    pub fn webkit_cookie_manager_replace_cookies(
        cookie_manager: *mut WebKitCookieManager,
        cookies: *mut glib::GList,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_cookie_manager_replace_cookies_finish(
        cookie_manager: *mut WebKitCookieManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_cookie_manager_set_accept_policy(
        cookie_manager: *mut WebKitCookieManager,
        policy: WebKitCookieAcceptPolicy,
    );
    pub fn webkit_cookie_manager_set_persistent_storage(
        cookie_manager: *mut WebKitCookieManager,
        filename: *const c_char,
        storage: WebKitCookiePersistentStorage,
    );

    //=========================================================================
    // WebKitDeviceInfoPermissionRequest
    //=========================================================================
    pub fn webkit_device_info_permission_request_get_type() -> GType;

    //=========================================================================
    // WebKitDownload
    //=========================================================================
    pub fn webkit_download_get_type() -> GType;
    pub fn webkit_download_cancel(download: *mut WebKitDownload);
    pub fn webkit_download_get_allow_overwrite(download: *mut WebKitDownload) -> gboolean;
    pub fn webkit_download_get_destination(download: *mut WebKitDownload) -> *const c_char;
    pub fn webkit_download_get_elapsed_time(download: *mut WebKitDownload) -> c_double;
    pub fn webkit_download_get_estimated_progress(download: *mut WebKitDownload) -> c_double;
    pub fn webkit_download_get_received_data_length(download: *mut WebKitDownload) -> u64;
    pub fn webkit_download_get_request(download: *mut WebKitDownload) -> *mut WebKitURIRequest;
    pub fn webkit_download_get_response(download: *mut WebKitDownload) -> *mut WebKitURIResponse;
    pub fn webkit_download_get_web_view(download: *mut WebKitDownload) -> *mut WebKitWebView;
    pub fn webkit_download_set_allow_overwrite(download: *mut WebKitDownload, allowed: gboolean);
    pub fn webkit_download_set_destination(
        download: *mut WebKitDownload,
        destination: *const c_char,
    );

    //=========================================================================
    // WebKitEditorState
    //=========================================================================
    pub fn webkit_editor_state_get_type() -> GType;
    pub fn webkit_editor_state_get_typing_attributes(
        editor_state: *mut WebKitEditorState,
    ) -> c_uint;
    pub fn webkit_editor_state_is_copy_available(editor_state: *mut WebKitEditorState) -> gboolean;
    pub fn webkit_editor_state_is_cut_available(editor_state: *mut WebKitEditorState) -> gboolean;
    pub fn webkit_editor_state_is_paste_available(editor_state: *mut WebKitEditorState)
        -> gboolean;
    pub fn webkit_editor_state_is_redo_available(editor_state: *mut WebKitEditorState) -> gboolean;
    pub fn webkit_editor_state_is_undo_available(editor_state: *mut WebKitEditorState) -> gboolean;

    //=========================================================================
    // WebKitFileChooserRequest
    //=========================================================================
    pub fn webkit_file_chooser_request_get_type() -> GType;
    pub fn webkit_file_chooser_request_cancel(request: *mut WebKitFileChooserRequest);
    pub fn webkit_file_chooser_request_get_mime_types(
        request: *mut WebKitFileChooserRequest,
    ) -> *const *const c_char;
    pub fn webkit_file_chooser_request_get_select_multiple(
        request: *mut WebKitFileChooserRequest,
    ) -> gboolean;
    pub fn webkit_file_chooser_request_get_selected_files(
        request: *mut WebKitFileChooserRequest,
    ) -> *const *const c_char;
    pub fn webkit_file_chooser_request_select_files(
        request: *mut WebKitFileChooserRequest,
        files: *const *const c_char,
    );

    //=========================================================================
    // WebKitFindController
    //=========================================================================
    pub fn webkit_find_controller_get_type() -> GType;
    pub fn webkit_find_controller_count_matches(
        find_controller: *mut WebKitFindController,
        search_text: *const c_char,
        find_options: u32,
        max_match_count: c_uint,
    );
    pub fn webkit_find_controller_get_max_match_count(
        find_controller: *mut WebKitFindController,
    ) -> c_uint;
    pub fn webkit_find_controller_get_options(find_controller: *mut WebKitFindController) -> u32;
    pub fn webkit_find_controller_get_search_text(
        find_controller: *mut WebKitFindController,
    ) -> *const c_char;
    pub fn webkit_find_controller_get_web_view(
        find_controller: *mut WebKitFindController,
    ) -> *mut WebKitWebView;
    pub fn webkit_find_controller_search(
        find_controller: *mut WebKitFindController,
        search_text: *const c_char,
        find_options: u32,
        max_match_count: c_uint,
    );
    pub fn webkit_find_controller_search_finish(find_controller: *mut WebKitFindController);
    pub fn webkit_find_controller_search_next(find_controller: *mut WebKitFindController);
    pub fn webkit_find_controller_search_previous(find_controller: *mut WebKitFindController);

    //=========================================================================
    // WebKitFormSubmissionRequest
    //=========================================================================
    pub fn webkit_form_submission_request_get_type() -> GType;
    pub fn webkit_form_submission_request_list_text_fields(
        request: *mut WebKitFormSubmissionRequest,
        field_names: *mut *mut glib::GPtrArray,
        field_values: *mut *mut glib::GPtrArray,
    ) -> gboolean;
    pub fn webkit_form_submission_request_submit(request: *mut WebKitFormSubmissionRequest);

    //=========================================================================
    // WebKitGeolocationManager
    //=========================================================================
    pub fn webkit_geolocation_manager_get_type() -> GType;
    pub fn webkit_geolocation_manager_failed(
        manager: *mut WebKitGeolocationManager,
        error_message: *const c_char,
    );
    pub fn webkit_geolocation_manager_get_enable_high_accuracy(
        manager: *mut WebKitGeolocationManager,
    ) -> gboolean;
    pub fn webkit_geolocation_manager_update_position(
        manager: *mut WebKitGeolocationManager,
        position: *mut WebKitGeolocationPosition,
    );

    //=========================================================================
    // WebKitGeolocationPermissionRequest
    //=========================================================================
    pub fn webkit_geolocation_permission_request_get_type() -> GType;

    //=========================================================================
    // WebKitHitTestResult
    //=========================================================================
    pub fn webkit_hit_test_result_get_type() -> GType;
    pub fn webkit_hit_test_result_context_is_editable(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_image(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_link(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_media(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_scrollbar(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_context_is_selection(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> gboolean;
    pub fn webkit_hit_test_result_get_context(hit_test_result: *mut WebKitHitTestResult) -> c_uint;
    pub fn webkit_hit_test_result_get_image_uri(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_link_label(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_link_title(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_link_uri(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;
    pub fn webkit_hit_test_result_get_media_uri(
        hit_test_result: *mut WebKitHitTestResult,
    ) -> *const c_char;

    //=========================================================================
    // WebKitInputMethodContext
    //=========================================================================
    pub fn webkit_input_method_context_get_type() -> GType;
    pub fn webkit_input_method_context_filter_key_event(
        context: *mut WebKitInputMethodContext,
        key_event: gpointer,
    ) -> gboolean;
    pub fn webkit_input_method_context_get_input_hints(
        context: *mut WebKitInputMethodContext,
    ) -> WebKitInputHints;
    pub fn webkit_input_method_context_get_input_purpose(
        context: *mut WebKitInputMethodContext,
    ) -> WebKitInputPurpose;
    pub fn webkit_input_method_context_get_preedit(
        context: *mut WebKitInputMethodContext,
        text: *mut *mut c_char,
        underlines: *mut *mut glib::GList,
        cursor_offset: *mut c_uint,
    );
    pub fn webkit_input_method_context_notify_cursor_area(
        context: *mut WebKitInputMethodContext,
        x: c_int,
        y: c_int,
        width: c_int,
        height: c_int,
    );
    pub fn webkit_input_method_context_notify_focus_in(context: *mut WebKitInputMethodContext);
    pub fn webkit_input_method_context_notify_focus_out(context: *mut WebKitInputMethodContext);
    pub fn webkit_input_method_context_notify_surrounding(
        context: *mut WebKitInputMethodContext,
        text: *const c_char,
        length: c_int,
        cursor_index: c_uint,
        selection_index: c_uint,
    );
    pub fn webkit_input_method_context_reset(context: *mut WebKitInputMethodContext);
    pub fn webkit_input_method_context_set_enable_preedit(
        context: *mut WebKitInputMethodContext,
        enabled: gboolean,
    );
    pub fn webkit_input_method_context_set_input_hints(
        context: *mut WebKitInputMethodContext,
        hints: WebKitInputHints,
    );
    pub fn webkit_input_method_context_set_input_purpose(
        context: *mut WebKitInputMethodContext,
        purpose: WebKitInputPurpose,
    );

    //=========================================================================
    // WebKitMediaKeySystemPermissionRequest
    //=========================================================================
    pub fn webkit_media_key_system_permission_request_get_type() -> GType;

    //=========================================================================
    // WebKitNavigationPolicyDecision
    //=========================================================================
    pub fn webkit_navigation_policy_decision_get_type() -> GType;
    pub fn webkit_navigation_policy_decision_get_navigation_action(
        decision: *mut WebKitNavigationPolicyDecision,
    ) -> *mut WebKitNavigationAction;

    //=========================================================================
    // WebKitNetworkSession
    //=========================================================================
    pub fn webkit_network_session_get_type() -> GType;
    pub fn webkit_network_session_new(
        data_directory: *const c_char,
        cache_directory: *const c_char,
    ) -> *mut WebKitNetworkSession;
    pub fn webkit_network_session_new_ephemeral() -> *mut WebKitNetworkSession;
    pub fn webkit_network_session_get_default() -> *mut WebKitNetworkSession;
    pub fn webkit_network_session_set_memory_pressure_settings(
        settings: *mut WebKitMemoryPressureSettings,
    );
    pub fn webkit_network_session_allow_tls_certificate_for_host(
        session: *mut WebKitNetworkSession,
        certificate: *mut gio::GTlsCertificate,
        host: *const c_char,
    );
    pub fn webkit_network_session_download_uri(
        session: *mut WebKitNetworkSession,
        uri: *const c_char,
    ) -> *mut WebKitDownload;
    pub fn webkit_network_session_get_cookie_manager(
        session: *mut WebKitNetworkSession,
    ) -> *mut WebKitCookieManager;
    pub fn webkit_network_session_get_itp_enabled(session: *mut WebKitNetworkSession) -> gboolean;
    pub fn webkit_network_session_get_itp_summary(
        session: *mut WebKitNetworkSession,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_network_session_get_itp_summary_finish(
        session: *mut WebKitNetworkSession,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut glib::GList;
    pub fn webkit_network_session_get_persistent_credential_storage_enabled(
        session: *mut WebKitNetworkSession,
    ) -> gboolean;
    pub fn webkit_network_session_get_tls_errors_policy(
        session: *mut WebKitNetworkSession,
    ) -> WebKitTLSErrorsPolicy;
    pub fn webkit_network_session_get_website_data_manager(
        session: *mut WebKitNetworkSession,
    ) -> *mut WebKitWebsiteDataManager;
    pub fn webkit_network_session_is_ephemeral(session: *mut WebKitNetworkSession) -> gboolean;
    pub fn webkit_network_session_prefetch_dns(
        session: *mut WebKitNetworkSession,
        hostname: *const c_char,
    );
    pub fn webkit_network_session_set_itp_enabled(
        session: *mut WebKitNetworkSession,
        enabled: gboolean,
    );
    pub fn webkit_network_session_set_persistent_credential_storage_enabled(
        session: *mut WebKitNetworkSession,
        enabled: gboolean,
    );
    pub fn webkit_network_session_set_proxy_settings(
        session: *mut WebKitNetworkSession,
        proxy_mode: WebKitNetworkProxyMode,
        proxy_settings: *mut WebKitNetworkProxySettings,
    );
    pub fn webkit_network_session_set_tls_errors_policy(
        session: *mut WebKitNetworkSession,
        policy: WebKitTLSErrorsPolicy,
    );

    //=========================================================================
    // WebKitNotification
    //=========================================================================
    pub fn webkit_notification_get_type() -> GType;
    pub fn webkit_notification_clicked(notification: *mut WebKitNotification);
    pub fn webkit_notification_close(notification: *mut WebKitNotification);
    pub fn webkit_notification_get_body(notification: *mut WebKitNotification) -> *const c_char;
    pub fn webkit_notification_get_id(notification: *mut WebKitNotification) -> u64;
    pub fn webkit_notification_get_tag(notification: *mut WebKitNotification) -> *const c_char;
    pub fn webkit_notification_get_title(notification: *mut WebKitNotification) -> *const c_char;

    //=========================================================================
    // WebKitNotificationPermissionRequest
    //=========================================================================
    pub fn webkit_notification_permission_request_get_type() -> GType;

    //=========================================================================
    // WebKitOptionMenu
    //=========================================================================
    pub fn webkit_option_menu_get_type() -> GType;
    pub fn webkit_option_menu_activate_item(menu: *mut WebKitOptionMenu, index: c_uint);
    pub fn webkit_option_menu_close(menu: *mut WebKitOptionMenu);
    pub fn webkit_option_menu_get_item(
        menu: *mut WebKitOptionMenu,
        index: c_uint,
    ) -> *mut WebKitOptionMenuItem;
    pub fn webkit_option_menu_get_n_items(menu: *mut WebKitOptionMenu) -> c_uint;
    pub fn webkit_option_menu_select_item(menu: *mut WebKitOptionMenu, index: c_uint);

    //=========================================================================
    // WebKitPolicyDecision
    //=========================================================================
    pub fn webkit_policy_decision_get_type() -> GType;
    pub fn webkit_policy_decision_download(decision: *mut WebKitPolicyDecision);
    pub fn webkit_policy_decision_ignore(decision: *mut WebKitPolicyDecision);
    pub fn webkit_policy_decision_use(decision: *mut WebKitPolicyDecision);
    pub fn webkit_policy_decision_use_with_policies(
        decision: *mut WebKitPolicyDecision,
        policies: *mut WebKitWebsitePolicies,
    );

    //=========================================================================
    // WebKitResponsePolicyDecision
    //=========================================================================
    pub fn webkit_response_policy_decision_get_type() -> GType;
    pub fn webkit_response_policy_decision_get_request(
        decision: *mut WebKitResponsePolicyDecision,
    ) -> *mut WebKitURIRequest;
    pub fn webkit_response_policy_decision_get_response(
        decision: *mut WebKitResponsePolicyDecision,
    ) -> *mut WebKitURIResponse;
    pub fn webkit_response_policy_decision_is_main_frame_main_resource(
        decision: *mut WebKitResponsePolicyDecision,
    ) -> gboolean;
    pub fn webkit_response_policy_decision_is_mime_type_supported(
        decision: *mut WebKitResponsePolicyDecision,
    ) -> gboolean;

    //=========================================================================
    // WebKitSecurityManager
    //=========================================================================
    pub fn webkit_security_manager_get_type() -> GType;
    pub fn webkit_security_manager_register_uri_scheme_as_cors_enabled(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    );
    pub fn webkit_security_manager_register_uri_scheme_as_display_isolated(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    );
    pub fn webkit_security_manager_register_uri_scheme_as_empty_document(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    );
    pub fn webkit_security_manager_register_uri_scheme_as_local(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    );
    pub fn webkit_security_manager_register_uri_scheme_as_no_access(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    );
    pub fn webkit_security_manager_register_uri_scheme_as_secure(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    );
    pub fn webkit_security_manager_uri_scheme_is_cors_enabled(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    ) -> gboolean;
    pub fn webkit_security_manager_uri_scheme_is_display_isolated(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    ) -> gboolean;
    pub fn webkit_security_manager_uri_scheme_is_empty_document(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    ) -> gboolean;
    pub fn webkit_security_manager_uri_scheme_is_local(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    ) -> gboolean;
    pub fn webkit_security_manager_uri_scheme_is_no_access(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    ) -> gboolean;
    pub fn webkit_security_manager_uri_scheme_is_secure(
        security_manager: *mut WebKitSecurityManager,
        scheme: *const c_char,
    ) -> gboolean;

    //=========================================================================
    // WebKitSettings
    //=========================================================================
    pub fn webkit_settings_get_type() -> GType;
    pub fn webkit_settings_new() -> *mut WebKitSettings;
    pub fn webkit_settings_new_with_settings(
        first_setting_name: *const c_char,
        ...
    ) -> *mut WebKitSettings;
    pub fn webkit_settings_get_all_features() -> *mut WebKitFeatureList;
    pub fn webkit_settings_get_development_features() -> *mut WebKitFeatureList;
    pub fn webkit_settings_get_experimental_features() -> *mut WebKitFeatureList;
    pub fn webkit_settings_apply_from_key_file(
        settings: *mut WebKitSettings,
        key_file: *mut glib::GKeyFile,
        group_name: *const c_char,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_settings_get_allow_file_access_from_file_urls(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_allow_modal_dialogs(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_allow_top_navigation_to_data_urls(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_allow_universal_access_from_file_urls(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_auto_load_images(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_cursive_font_family(settings: *mut WebKitSettings) -> *const c_char;
    pub fn webkit_settings_get_default_charset(settings: *mut WebKitSettings) -> *const c_char;
    pub fn webkit_settings_get_default_font_family(settings: *mut WebKitSettings) -> *const c_char;
    pub fn webkit_settings_get_default_font_size(settings: *mut WebKitSettings) -> u32;
    pub fn webkit_settings_get_default_monospace_font_size(settings: *mut WebKitSettings) -> u32;
    pub fn webkit_settings_get_disable_web_security(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_draw_compositing_indicators(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_2d_canvas_acceleration(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_caret_browsing(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_developer_extras(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_dns_prefetching(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_encrypted_media(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_fullscreen(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_html5_database(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_html5_local_storage(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_hyperlink_auditing(settings: *mut WebKitSettings)
        -> gboolean;
    pub fn webkit_settings_get_enable_javascript(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_javascript_markup(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_media(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_media_capabilities(settings: *mut WebKitSettings)
        -> gboolean;
    pub fn webkit_settings_get_enable_media_stream(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_mediasource(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_mock_capture_devices(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_offline_web_application_cache(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_page_cache(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_resizable_text_areas(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_site_specific_quirks(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_enable_smooth_scrolling(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_spatial_navigation(settings: *mut WebKitSettings)
        -> gboolean;
    pub fn webkit_settings_get_enable_tabs_to_links(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_webaudio(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_webgl(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_webrtc(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_enable_write_console_messages_to_stdout(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_fantasy_font_family(settings: *mut WebKitSettings) -> *const c_char;
    pub fn webkit_settings_get_feature_enabled(
        settings: *mut WebKitSettings,
        feature: *mut WebKitFeature,
    ) -> gboolean;
    pub fn webkit_settings_get_javascript_can_access_clipboard(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_javascript_can_open_windows_automatically(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_load_icons_ignoring_image_load_setting(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_media_content_types_requiring_hardware_support(
        settings: *mut WebKitSettings,
    ) -> *const c_char;
    pub fn webkit_settings_get_media_playback_allows_inline(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_media_playback_requires_user_gesture(
        settings: *mut WebKitSettings,
    ) -> gboolean;
    pub fn webkit_settings_get_minimum_font_size(settings: *mut WebKitSettings) -> u32;
    pub fn webkit_settings_get_monospace_font_family(
        settings: *mut WebKitSettings,
    ) -> *const c_char;
    pub fn webkit_settings_get_pictograph_font_family(
        settings: *mut WebKitSettings,
    ) -> *const c_char;
    pub fn webkit_settings_get_print_backgrounds(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_get_sans_serif_font_family(
        settings: *mut WebKitSettings,
    ) -> *const c_char;
    pub fn webkit_settings_get_serif_font_family(settings: *mut WebKitSettings) -> *const c_char;
    pub fn webkit_settings_get_user_agent(settings: *mut WebKitSettings) -> *const c_char;
    pub fn webkit_settings_get_zoom_text_only(settings: *mut WebKitSettings) -> gboolean;
    pub fn webkit_settings_set_allow_file_access_from_file_urls(
        settings: *mut WebKitSettings,
        allowed: gboolean,
    );
    pub fn webkit_settings_set_allow_modal_dialogs(
        settings: *mut WebKitSettings,
        allowed: gboolean,
    );
    pub fn webkit_settings_set_allow_top_navigation_to_data_urls(
        settings: *mut WebKitSettings,
        allowed: gboolean,
    );
    pub fn webkit_settings_set_allow_universal_access_from_file_urls(
        settings: *mut WebKitSettings,
        allowed: gboolean,
    );
    pub fn webkit_settings_set_auto_load_images(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_cursive_font_family(
        settings: *mut WebKitSettings,
        cursive_font_family: *const c_char,
    );
    pub fn webkit_settings_set_default_charset(
        settings: *mut WebKitSettings,
        default_charset: *const c_char,
    );
    pub fn webkit_settings_set_default_font_family(
        settings: *mut WebKitSettings,
        default_font_family: *const c_char,
    );
    pub fn webkit_settings_set_default_font_size(settings: *mut WebKitSettings, font_size: u32);
    pub fn webkit_settings_set_default_monospace_font_size(
        settings: *mut WebKitSettings,
        font_size: u32,
    );
    pub fn webkit_settings_set_disable_web_security(
        settings: *mut WebKitSettings,
        disabled: gboolean,
    );
    pub fn webkit_settings_set_draw_compositing_indicators(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_2d_canvas_acceleration(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_caret_browsing(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_developer_extras(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_dns_prefetching(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_encrypted_media(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_fullscreen(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_html5_database(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_html5_local_storage(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_hyperlink_auditing(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_javascript(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_javascript_markup(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_media(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_media_capabilities(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_media_stream(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_mediasource(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_mock_capture_devices(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_offline_web_application_cache(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_page_cache(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_resizable_text_areas(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_site_specific_quirks(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_smooth_scrolling(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_spatial_navigation(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_tabs_to_links(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_enable_webaudio(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_webgl(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_webrtc(settings: *mut WebKitSettings, enabled: gboolean);
    pub fn webkit_settings_set_enable_write_console_messages_to_stdout(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_fantasy_font_family(
        settings: *mut WebKitSettings,
        fantasy_font_family: *const c_char,
    );
    pub fn webkit_settings_set_feature_enabled(
        settings: *mut WebKitSettings,
        feature: *mut WebKitFeature,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_javascript_can_access_clipboard(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_javascript_can_open_windows_automatically(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_load_icons_ignoring_image_load_setting(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_media_content_types_requiring_hardware_support(
        settings: *mut WebKitSettings,
        content_types: *const c_char,
    );
    pub fn webkit_settings_set_media_playback_allows_inline(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_media_playback_requires_user_gesture(
        settings: *mut WebKitSettings,
        enabled: gboolean,
    );
    pub fn webkit_settings_set_minimum_font_size(settings: *mut WebKitSettings, font_size: u32);
    pub fn webkit_settings_set_monospace_font_family(
        settings: *mut WebKitSettings,
        monospace_font_family: *const c_char,
    );
    pub fn webkit_settings_set_pictograph_font_family(
        settings: *mut WebKitSettings,
        pictograph_font_family: *const c_char,
    );
    pub fn webkit_settings_set_print_backgrounds(
        settings: *mut WebKitSettings,
        print_backgrounds: gboolean,
    );
    pub fn webkit_settings_set_sans_serif_font_family(
        settings: *mut WebKitSettings,
        sans_serif_font_family: *const c_char,
    );
    pub fn webkit_settings_set_serif_font_family(
        settings: *mut WebKitSettings,
        serif_font_family: *const c_char,
    );
    pub fn webkit_settings_set_user_agent(settings: *mut WebKitSettings, user_agent: *const c_char);
    pub fn webkit_settings_set_user_agent_with_application_details(
        settings: *mut WebKitSettings,
        application_name: *const c_char,
        application_version: *const c_char,
    );
    pub fn webkit_settings_set_zoom_text_only(
        settings: *mut WebKitSettings,
        zoom_text_only: gboolean,
    );

    //=========================================================================
    // WebKitURIRequest
    //=========================================================================
    pub fn webkit_uri_request_get_type() -> GType;
    pub fn webkit_uri_request_new(uri: *const c_char) -> *mut WebKitURIRequest;
    pub fn webkit_uri_request_get_http_headers(
        request: *mut WebKitURIRequest,
    ) -> *mut soup::SoupMessageHeaders;
    pub fn webkit_uri_request_get_http_method(request: *mut WebKitURIRequest) -> *const c_char;
    pub fn webkit_uri_request_get_uri(request: *mut WebKitURIRequest) -> *const c_char;
    pub fn webkit_uri_request_set_uri(request: *mut WebKitURIRequest, uri: *const c_char);

    //=========================================================================
    // WebKitURIResponse
    //=========================================================================
    pub fn webkit_uri_response_get_type() -> GType;
    pub fn webkit_uri_response_get_content_length(response: *mut WebKitURIResponse) -> u64;
    pub fn webkit_uri_response_get_http_headers(
        response: *mut WebKitURIResponse,
    ) -> *mut soup::SoupMessageHeaders;
    pub fn webkit_uri_response_get_mime_type(response: *mut WebKitURIResponse) -> *const c_char;
    pub fn webkit_uri_response_get_status_code(response: *mut WebKitURIResponse) -> c_uint;
    pub fn webkit_uri_response_get_suggested_filename(
        response: *mut WebKitURIResponse,
    ) -> *const c_char;
    pub fn webkit_uri_response_get_uri(response: *mut WebKitURIResponse) -> *const c_char;

    //=========================================================================
    // WebKitURISchemeRequest
    //=========================================================================
    pub fn webkit_uri_scheme_request_get_type() -> GType;
    pub fn webkit_uri_scheme_request_finish(
        request: *mut WebKitURISchemeRequest,
        stream: *mut gio::GInputStream,
        stream_length: i64,
        content_type: *const c_char,
    );
    pub fn webkit_uri_scheme_request_finish_error(
        request: *mut WebKitURISchemeRequest,
        error: *mut glib::GError,
    );
    pub fn webkit_uri_scheme_request_finish_with_response(
        request: *mut WebKitURISchemeRequest,
        response: *mut WebKitURISchemeResponse,
    );
    pub fn webkit_uri_scheme_request_get_http_body(
        request: *mut WebKitURISchemeRequest,
    ) -> *mut gio::GInputStream;
    pub fn webkit_uri_scheme_request_get_http_headers(
        request: *mut WebKitURISchemeRequest,
    ) -> *mut soup::SoupMessageHeaders;
    pub fn webkit_uri_scheme_request_get_http_method(
        request: *mut WebKitURISchemeRequest,
    ) -> *const c_char;
    pub fn webkit_uri_scheme_request_get_path(
        request: *mut WebKitURISchemeRequest,
    ) -> *const c_char;
    pub fn webkit_uri_scheme_request_get_scheme(
        request: *mut WebKitURISchemeRequest,
    ) -> *const c_char;
    pub fn webkit_uri_scheme_request_get_uri(request: *mut WebKitURISchemeRequest)
        -> *const c_char;
    pub fn webkit_uri_scheme_request_get_web_view(
        request: *mut WebKitURISchemeRequest,
    ) -> *mut WebKitWebView;

    //=========================================================================
    // WebKitURISchemeResponse
    //=========================================================================
    pub fn webkit_uri_scheme_response_get_type() -> GType;
    pub fn webkit_uri_scheme_response_new(
        input_stream: *mut gio::GInputStream,
        stream_length: i64,
    ) -> *mut WebKitURISchemeResponse;
    pub fn webkit_uri_scheme_response_set_content_type(
        response: *mut WebKitURISchemeResponse,
        content_type: *const c_char,
    );
    pub fn webkit_uri_scheme_response_set_http_headers(
        response: *mut WebKitURISchemeResponse,
        headers: *mut soup::SoupMessageHeaders,
    );
    pub fn webkit_uri_scheme_response_set_status(
        response: *mut WebKitURISchemeResponse,
        status_code: c_uint,
        reason_phrase: *const c_char,
    );

    //=========================================================================
    // WebKitUserContentFilterStore
    //=========================================================================
    pub fn webkit_user_content_filter_store_get_type() -> GType;
    pub fn webkit_user_content_filter_store_new(
        storage_path: *const c_char,
    ) -> *mut WebKitUserContentFilterStore;
    pub fn webkit_user_content_filter_store_fetch_identifiers(
        store: *mut WebKitUserContentFilterStore,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_user_content_filter_store_fetch_identifiers_finish(
        store: *mut WebKitUserContentFilterStore,
        result: *mut gio::GAsyncResult,
    ) -> *mut *mut c_char;
    pub fn webkit_user_content_filter_store_get_path(
        store: *mut WebKitUserContentFilterStore,
    ) -> *const c_char;
    pub fn webkit_user_content_filter_store_load(
        store: *mut WebKitUserContentFilterStore,
        identifier: *const c_char,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_user_content_filter_store_load_finish(
        store: *mut WebKitUserContentFilterStore,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut WebKitUserContentFilter;
    pub fn webkit_user_content_filter_store_remove(
        store: *mut WebKitUserContentFilterStore,
        identifier: *const c_char,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_user_content_filter_store_remove_finish(
        store: *mut WebKitUserContentFilterStore,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_user_content_filter_store_save(
        store: *mut WebKitUserContentFilterStore,
        identifier: *const c_char,
        source: *mut glib::GBytes,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_user_content_filter_store_save_finish(
        store: *mut WebKitUserContentFilterStore,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut WebKitUserContentFilter;
    pub fn webkit_user_content_filter_store_save_from_file(
        store: *mut WebKitUserContentFilterStore,
        identifier: *const c_char,
        file: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_user_content_filter_store_save_from_file_finish(
        store: *mut WebKitUserContentFilterStore,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut WebKitUserContentFilter;

    //=========================================================================
    // WebKitUserContentManager
    //=========================================================================
    pub fn webkit_user_content_manager_get_type() -> GType;
    pub fn webkit_user_content_manager_new() -> *mut WebKitUserContentManager;
    pub fn webkit_user_content_manager_add_filter(
        manager: *mut WebKitUserContentManager,
        filter: *mut WebKitUserContentFilter,
    );
    pub fn webkit_user_content_manager_add_script(
        manager: *mut WebKitUserContentManager,
        script: *mut WebKitUserScript,
    );
    pub fn webkit_user_content_manager_add_style_sheet(
        manager: *mut WebKitUserContentManager,
        stylesheet: *mut WebKitUserStyleSheet,
    );
    pub fn webkit_user_content_manager_register_script_message_handler(
        manager: *mut WebKitUserContentManager,
        name: *const c_char,
        world_name: *const c_char,
    ) -> gboolean;
    pub fn webkit_user_content_manager_register_script_message_handler_with_reply(
        manager: *mut WebKitUserContentManager,
        name: *const c_char,
        world_name: *const c_char,
    ) -> gboolean;
    pub fn webkit_user_content_manager_remove_all_filters(manager: *mut WebKitUserContentManager);
    pub fn webkit_user_content_manager_remove_all_scripts(manager: *mut WebKitUserContentManager);
    pub fn webkit_user_content_manager_remove_all_style_sheets(
        manager: *mut WebKitUserContentManager,
    );
    pub fn webkit_user_content_manager_remove_filter(
        manager: *mut WebKitUserContentManager,
        filter: *mut WebKitUserContentFilter,
    );
    pub fn webkit_user_content_manager_remove_filter_by_id(
        manager: *mut WebKitUserContentManager,
        filter_id: *const c_char,
    );
    pub fn webkit_user_content_manager_remove_script(
        manager: *mut WebKitUserContentManager,
        script: *mut WebKitUserScript,
    );
    pub fn webkit_user_content_manager_remove_style_sheet(
        manager: *mut WebKitUserContentManager,
        stylesheet: *mut WebKitUserStyleSheet,
    );
    pub fn webkit_user_content_manager_unregister_script_message_handler(
        manager: *mut WebKitUserContentManager,
        name: *const c_char,
        world_name: *const c_char,
    );

    //=========================================================================
    // WebKitUserMediaPermissionRequest
    //=========================================================================
    pub fn webkit_user_media_permission_request_get_type() -> GType;

    //=========================================================================
    // WebKitUserMessage
    //=========================================================================
    pub fn webkit_user_message_get_type() -> GType;
    pub fn webkit_user_message_new(
        name: *const c_char,
        parameters: *mut glib::GVariant,
    ) -> *mut WebKitUserMessage;
    pub fn webkit_user_message_new_with_fd_list(
        name: *const c_char,
        parameters: *mut glib::GVariant,
        fd_list: *mut gio::GUnixFDList,
    ) -> *mut WebKitUserMessage;
    pub fn webkit_user_message_get_fd_list(
        message: *mut WebKitUserMessage,
    ) -> *mut gio::GUnixFDList;
    pub fn webkit_user_message_get_name(message: *mut WebKitUserMessage) -> *const c_char;
    pub fn webkit_user_message_get_parameters(
        message: *mut WebKitUserMessage,
    ) -> *mut glib::GVariant;
    pub fn webkit_user_message_send_reply(
        message: *mut WebKitUserMessage,
        reply: *mut WebKitUserMessage,
    );

    //=========================================================================
    // WebKitWebContext
    //=========================================================================
    pub fn webkit_web_context_get_type() -> GType;
    pub fn webkit_web_context_new() -> *mut WebKitWebContext;
    pub fn webkit_web_context_get_default() -> *mut WebKitWebContext;
    pub fn webkit_web_context_add_path_to_sandbox(
        context: *mut WebKitWebContext,
        path: *const c_char,
        read_only: gboolean,
    );
    pub fn webkit_web_context_get_cache_model(context: *mut WebKitWebContext) -> WebKitCacheModel;
    pub fn webkit_web_context_get_geolocation_manager(
        context: *mut WebKitWebContext,
    ) -> *mut WebKitGeolocationManager;
    pub fn webkit_web_context_get_network_session_for_automation(
        context: *mut WebKitWebContext,
    ) -> *mut WebKitNetworkSession;
    pub fn webkit_web_context_get_security_manager(
        context: *mut WebKitWebContext,
    ) -> *mut WebKitSecurityManager;
    pub fn webkit_web_context_get_spell_checking_enabled(
        context: *mut WebKitWebContext,
    ) -> gboolean;
    pub fn webkit_web_context_get_spell_checking_languages(
        context: *mut WebKitWebContext,
    ) -> *const *const c_char;
    pub fn webkit_web_context_get_time_zone_override(
        context: *mut WebKitWebContext,
    ) -> *const c_char;
    pub fn webkit_web_context_initialize_notification_permissions(
        context: *mut WebKitWebContext,
        allowed_origins: *mut glib::GList,
        disallowed_origins: *mut glib::GList,
    );
    pub fn webkit_web_context_is_automation_allowed(context: *mut WebKitWebContext) -> gboolean;
    pub fn webkit_web_context_register_uri_scheme(
        context: *mut WebKitWebContext,
        scheme: *const c_char,
        callback: WebKitURISchemeRequestCallback,
        user_data: gpointer,
        user_data_destroy_func: glib::GDestroyNotify,
    );
    pub fn webkit_web_context_send_message_to_all_extensions(
        context: *mut WebKitWebContext,
        message: *mut WebKitUserMessage,
    );
    pub fn webkit_web_context_set_automation_allowed(
        context: *mut WebKitWebContext,
        allowed: gboolean,
    );
    pub fn webkit_web_context_set_cache_model(
        context: *mut WebKitWebContext,
        cache_model: WebKitCacheModel,
    );
    pub fn webkit_web_context_set_preferred_languages(
        context: *mut WebKitWebContext,
        languages: *const *const c_char,
    );
    pub fn webkit_web_context_set_spell_checking_enabled(
        context: *mut WebKitWebContext,
        enabled: gboolean,
    );
    pub fn webkit_web_context_set_spell_checking_languages(
        context: *mut WebKitWebContext,
        languages: *const *const c_char,
    );
    pub fn webkit_web_context_set_web_process_extensions_directory(
        context: *mut WebKitWebContext,
        directory: *const c_char,
    );
    pub fn webkit_web_context_set_web_process_extensions_initialization_user_data(
        context: *mut WebKitWebContext,
        user_data: *mut glib::GVariant,
    );

    //=========================================================================
    // WebKitWebResource
    //=========================================================================
    pub fn webkit_web_resource_get_type() -> GType;
    pub fn webkit_web_resource_get_data(
        resource: *mut WebKitWebResource,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_resource_get_data_finish(
        resource: *mut WebKitWebResource,
        result: *mut gio::GAsyncResult,
        length: *mut size_t,
        error: *mut *mut glib::GError,
    ) -> *mut u8;
    pub fn webkit_web_resource_get_response(
        resource: *mut WebKitWebResource,
    ) -> *mut WebKitURIResponse;
    pub fn webkit_web_resource_get_uri(resource: *mut WebKitWebResource) -> *const c_char;

    //=========================================================================
    // WebKitWebView
    //=========================================================================
    pub fn webkit_web_view_get_type() -> GType;
    pub fn webkit_web_view_new(backend: *mut WebKitWebViewBackend) -> *mut WebKitWebView;
    pub fn webkit_web_view_add_frame_displayed_callback(
        web_view: *mut WebKitWebView,
        callback: WebKitFrameDisplayedCallback,
        user_data: gpointer,
        destroy_notify: glib::GDestroyNotify,
    ) -> c_uint;
    pub fn webkit_web_view_call_async_javascript_function(
        web_view: *mut WebKitWebView,
        body: *const c_char,
        length: ssize_t,
        arguments: *mut glib::GVariant,
        world_name: *const c_char,
        source_uri: *const c_char,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_view_call_async_javascript_function_finish(
        web_view: *mut WebKitWebView,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut wpe_java_script_core::JSCValue;
    pub fn webkit_web_view_can_execute_editing_command(
        web_view: *mut WebKitWebView,
        command: *const c_char,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_view_can_execute_editing_command_finish(
        web_view: *mut WebKitWebView,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_web_view_can_go_back(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_can_go_forward(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_can_show_mime_type(
        web_view: *mut WebKitWebView,
        mime_type: *const c_char,
    ) -> gboolean;
    pub fn webkit_web_view_download_uri(
        web_view: *mut WebKitWebView,
        uri: *const c_char,
    ) -> *mut WebKitDownload;
    pub fn webkit_web_view_evaluate_javascript(
        web_view: *mut WebKitWebView,
        script: *const c_char,
        length: ssize_t,
        world_name: *const c_char,
        source_uri: *const c_char,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_view_evaluate_javascript_finish(
        web_view: *mut WebKitWebView,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut wpe_java_script_core::JSCValue;
    pub fn webkit_web_view_execute_editing_command(
        web_view: *mut WebKitWebView,
        command: *const c_char,
    );
    pub fn webkit_web_view_execute_editing_command_with_argument(
        web_view: *mut WebKitWebView,
        command: *const c_char,
        argument: *const c_char,
    );
    pub fn webkit_web_view_get_automation_presentation_type(
        web_view: *mut WebKitWebView,
    ) -> WebKitAutomationBrowsingContextPresentation;
    pub fn webkit_web_view_get_back_forward_list(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitBackForwardList;
    pub fn webkit_web_view_get_backend(web_view: *mut WebKitWebView) -> *mut WebKitWebViewBackend;
    pub fn webkit_web_view_get_background_color(
        web_view: *mut WebKitWebView,
        color: *mut WebKitColor,
    );
    pub fn webkit_web_view_get_camera_capture_state(
        web_view: *mut WebKitWebView,
    ) -> WebKitMediaCaptureState;
    pub fn webkit_web_view_get_context(web_view: *mut WebKitWebView) -> *mut WebKitWebContext;
    pub fn webkit_web_view_get_custom_charset(web_view: *mut WebKitWebView) -> *const c_char;
    pub fn webkit_web_view_get_default_content_security_policy(
        web_view: *mut WebKitWebView,
    ) -> *const c_char;
    pub fn webkit_web_view_get_display(
        web_view: *mut WebKitWebView,
    ) -> *mut wpe_platform::WPEDisplay;
    pub fn webkit_web_view_get_display_capture_state(
        web_view: *mut WebKitWebView,
    ) -> WebKitMediaCaptureState;
    pub fn webkit_web_view_get_editor_state(web_view: *mut WebKitWebView)
        -> *mut WebKitEditorState;
    pub fn webkit_web_view_get_estimated_load_progress(web_view: *mut WebKitWebView) -> c_double;
    pub fn webkit_web_view_get_find_controller(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitFindController;
    pub fn webkit_web_view_get_input_method_context(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitInputMethodContext;
    pub fn webkit_web_view_get_is_muted(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_get_is_web_process_responsive(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_get_main_resource(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitWebResource;
    pub fn webkit_web_view_get_microphone_capture_state(
        web_view: *mut WebKitWebView,
    ) -> WebKitMediaCaptureState;
    pub fn webkit_web_view_get_network_session(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitNetworkSession;
    pub fn webkit_web_view_get_page_id(web_view: *mut WebKitWebView) -> u64;
    pub fn webkit_web_view_get_session_state(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitWebViewSessionState;
    pub fn webkit_web_view_get_settings(web_view: *mut WebKitWebView) -> *mut WebKitSettings;
    pub fn webkit_web_view_get_title(web_view: *mut WebKitWebView) -> *const c_char;
    pub fn webkit_web_view_get_tls_info(
        web_view: *mut WebKitWebView,
        certificate: *mut *mut gio::GTlsCertificate,
        errors: *mut gio::GTlsCertificateFlags,
    ) -> gboolean;
    pub fn webkit_web_view_get_uri(web_view: *mut WebKitWebView) -> *const c_char;
    pub fn webkit_web_view_get_user_content_manager(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitUserContentManager;
    pub fn webkit_web_view_get_web_extension_mode(
        web_view: *mut WebKitWebView,
    ) -> WebKitWebExtensionMode;
    pub fn webkit_web_view_get_website_policies(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitWebsitePolicies;
    pub fn webkit_web_view_get_window_properties(
        web_view: *mut WebKitWebView,
    ) -> *mut WebKitWindowProperties;
    pub fn webkit_web_view_get_wpe_view(web_view: *mut WebKitWebView)
        -> *mut wpe_platform::WPEView;
    pub fn webkit_web_view_get_zoom_level(web_view: *mut WebKitWebView) -> c_double;
    pub fn webkit_web_view_go_back(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_go_forward(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_go_to_back_forward_list_item(
        web_view: *mut WebKitWebView,
        list_item: *mut WebKitBackForwardListItem,
    );
    pub fn webkit_web_view_is_controlled_by_automation(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_is_editable(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_is_loading(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_is_playing_audio(web_view: *mut WebKitWebView) -> gboolean;
    pub fn webkit_web_view_load_alternate_html(
        web_view: *mut WebKitWebView,
        content: *const c_char,
        content_uri: *const c_char,
        base_uri: *const c_char,
    );
    pub fn webkit_web_view_load_bytes(
        web_view: *mut WebKitWebView,
        bytes: *mut glib::GBytes,
        mime_type: *const c_char,
        encoding: *const c_char,
        base_uri: *const c_char,
    );
    pub fn webkit_web_view_load_html(
        web_view: *mut WebKitWebView,
        content: *const c_char,
        base_uri: *const c_char,
    );
    pub fn webkit_web_view_load_plain_text(web_view: *mut WebKitWebView, plain_text: *const c_char);
    pub fn webkit_web_view_load_request(
        web_view: *mut WebKitWebView,
        request: *mut WebKitURIRequest,
    );
    pub fn webkit_web_view_load_uri(web_view: *mut WebKitWebView, uri: *const c_char);
    pub fn webkit_web_view_reload(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_reload_bypass_cache(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_remove_frame_displayed_callback(
        web_view: *mut WebKitWebView,
        id: c_uint,
    );
    pub fn webkit_web_view_restore_session_state(
        web_view: *mut WebKitWebView,
        state: *mut WebKitWebViewSessionState,
    );
    pub fn webkit_web_view_save(
        web_view: *mut WebKitWebView,
        save_mode: WebKitSaveMode,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_view_save_finish(
        web_view: *mut WebKitWebView,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GInputStream;
    pub fn webkit_web_view_save_to_file(
        web_view: *mut WebKitWebView,
        file: *mut gio::GFile,
        save_mode: WebKitSaveMode,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_view_save_to_file_finish(
        web_view: *mut WebKitWebView,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_web_view_send_message_to_page(
        web_view: *mut WebKitWebView,
        message: *mut WebKitUserMessage,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_web_view_send_message_to_page_finish(
        web_view: *mut WebKitWebView,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut WebKitUserMessage;
    pub fn webkit_web_view_set_background_color(
        web_view: *mut WebKitWebView,
        color: *mut WebKitColor,
    );
    pub fn webkit_web_view_set_camera_capture_state(
        web_view: *mut WebKitWebView,
        state: WebKitMediaCaptureState,
    );
    pub fn webkit_web_view_set_cors_allowlist(
        web_view: *mut WebKitWebView,
        allowlist: *const *const c_char,
    );
    pub fn webkit_web_view_set_custom_charset(web_view: *mut WebKitWebView, charset: *const c_char);
    pub fn webkit_web_view_set_display_capture_state(
        web_view: *mut WebKitWebView,
        state: WebKitMediaCaptureState,
    );
    pub fn webkit_web_view_set_editable(web_view: *mut WebKitWebView, editable: gboolean);
    pub fn webkit_web_view_set_input_method_context(
        web_view: *mut WebKitWebView,
        context: *mut WebKitInputMethodContext,
    );
    pub fn webkit_web_view_set_is_muted(web_view: *mut WebKitWebView, muted: gboolean);
    pub fn webkit_web_view_set_microphone_capture_state(
        web_view: *mut WebKitWebView,
        state: WebKitMediaCaptureState,
    );
    pub fn webkit_web_view_set_settings(
        web_view: *mut WebKitWebView,
        settings: *mut WebKitSettings,
    );
    pub fn webkit_web_view_set_zoom_level(web_view: *mut WebKitWebView, zoom_level: c_double);
    pub fn webkit_web_view_stop_loading(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_terminate_web_process(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_toggle_inspector(web_view: *mut WebKitWebView);
    pub fn webkit_web_view_try_close(web_view: *mut WebKitWebView);

    //=========================================================================
    // WebKitWebsiteDataAccessPermissionRequest
    //=========================================================================
    pub fn webkit_website_data_access_permission_request_get_type() -> GType;
    pub fn webkit_website_data_access_permission_request_get_current_domain(
        request: *mut WebKitWebsiteDataAccessPermissionRequest,
    ) -> *const c_char;
    pub fn webkit_website_data_access_permission_request_get_requesting_domain(
        request: *mut WebKitWebsiteDataAccessPermissionRequest,
    ) -> *const c_char;

    //=========================================================================
    // WebKitWebsiteDataManager
    //=========================================================================
    pub fn webkit_website_data_manager_get_type() -> GType;
    pub fn webkit_website_data_manager_clear(
        manager: *mut WebKitWebsiteDataManager,
        types: WebKitWebsiteDataTypes,
        timespan: glib::GTimeSpan,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_website_data_manager_clear_finish(
        manager: *mut WebKitWebsiteDataManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn webkit_website_data_manager_fetch(
        manager: *mut WebKitWebsiteDataManager,
        types: WebKitWebsiteDataTypes,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_website_data_manager_fetch_finish(
        manager: *mut WebKitWebsiteDataManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut glib::GList;
    pub fn webkit_website_data_manager_get_base_cache_directory(
        manager: *mut WebKitWebsiteDataManager,
    ) -> *const c_char;
    pub fn webkit_website_data_manager_get_base_data_directory(
        manager: *mut WebKitWebsiteDataManager,
    ) -> *const c_char;
    pub fn webkit_website_data_manager_get_itp_summary(
        manager: *mut WebKitWebsiteDataManager,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_website_data_manager_get_itp_summary_finish(
        manager: *mut WebKitWebsiteDataManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut glib::GList;
    pub fn webkit_website_data_manager_is_ephemeral(
        manager: *mut WebKitWebsiteDataManager,
    ) -> gboolean;
    pub fn webkit_website_data_manager_remove(
        manager: *mut WebKitWebsiteDataManager,
        types: WebKitWebsiteDataTypes,
        website_data: *mut glib::GList,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn webkit_website_data_manager_remove_finish(
        manager: *mut WebKitWebsiteDataManager,
        result: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;

    //=========================================================================
    // WebKitWebsitePolicies
    //=========================================================================
    pub fn webkit_website_policies_get_type() -> GType;
    pub fn webkit_website_policies_new() -> *mut WebKitWebsitePolicies;
    pub fn webkit_website_policies_new_with_policies(
        first_policy_name: *const c_char,
        ...
    ) -> *mut WebKitWebsitePolicies;
    pub fn webkit_website_policies_get_autoplay_policy(
        policies: *mut WebKitWebsitePolicies,
    ) -> WebKitAutoplayPolicy;

    //=========================================================================
    // WebKitWindowProperties
    //=========================================================================
    pub fn webkit_window_properties_get_type() -> GType;
    pub fn webkit_window_properties_get_fullscreen(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;
    pub fn webkit_window_properties_get_locationbar_visible(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;
    pub fn webkit_window_properties_get_menubar_visible(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;
    pub fn webkit_window_properties_get_resizable(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;
    pub fn webkit_window_properties_get_scrollbars_visible(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;
    pub fn webkit_window_properties_get_statusbar_visible(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;
    pub fn webkit_window_properties_get_toolbar_visible(
        window_properties: *mut WebKitWindowProperties,
    ) -> gboolean;

    //=========================================================================
    // WebKitPermissionRequest
    //=========================================================================
    pub fn webkit_permission_request_get_type() -> GType;
    pub fn webkit_permission_request_allow(request: *mut WebKitPermissionRequest);
    pub fn webkit_permission_request_deny(request: *mut WebKitPermissionRequest);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn webkit_get_major_version() -> c_uint;
    pub fn webkit_get_micro_version() -> c_uint;
    pub fn webkit_get_minor_version() -> c_uint;
    pub fn webkit_media_key_system_permission_get_name(
        request: *mut WebKitMediaKeySystemPermissionRequest,
    ) -> *const c_char;
    pub fn webkit_uri_for_display(uri: *const c_char) -> *mut c_char;
    pub fn webkit_user_media_permission_is_for_audio_device(
        request: *mut WebKitUserMediaPermissionRequest,
    ) -> gboolean;
    pub fn webkit_user_media_permission_is_for_display_device(
        request: *mut WebKitUserMediaPermissionRequest,
    ) -> gboolean;
    pub fn webkit_user_media_permission_is_for_video_device(
        request: *mut WebKitUserMediaPermissionRequest,
    ) -> gboolean;

}

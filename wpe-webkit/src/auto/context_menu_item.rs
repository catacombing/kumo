// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, ContextMenu, ContextMenuAction};

glib::wrapper! {
    #[doc(alias = "WebKitContextMenuItem")]
    pub struct ContextMenuItem(Object<ffi::WebKitContextMenuItem, ffi::WebKitContextMenuItemClass>);

    match fn {
        type_ => || ffi::webkit_context_menu_item_get_type(),
    }
}

impl ContextMenuItem {
    #[doc(alias = "webkit_context_menu_item_new_from_gaction")]
    #[doc(alias = "new_from_gaction")]
    pub fn from_gaction(
        action: &impl IsA<gio::Action>,
        label: &str,
        target: Option<&glib::Variant>,
    ) -> ContextMenuItem {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_item_new_from_gaction(
                action.as_ref().to_glib_none().0,
                label.to_glib_none().0,
                target.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_context_menu_item_new_from_stock_action")]
    #[doc(alias = "new_from_stock_action")]
    pub fn from_stock_action(action: ContextMenuAction) -> ContextMenuItem {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_item_new_from_stock_action(action.into_glib()))
        }
    }

    #[doc(alias = "webkit_context_menu_item_new_from_stock_action_with_label")]
    #[doc(alias = "new_from_stock_action_with_label")]
    pub fn from_stock_action_with_label(action: ContextMenuAction, label: &str) -> ContextMenuItem {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_item_new_from_stock_action_with_label(
                action.into_glib(),
                label.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_context_menu_item_new_separator")]
    pub fn new_separator() -> ContextMenuItem {
        unsafe { from_glib_none(ffi::webkit_context_menu_item_new_separator()) }
    }

    #[doc(alias = "webkit_context_menu_item_new_with_submenu")]
    #[doc(alias = "new_with_submenu")]
    pub fn with_submenu(label: &str, submenu: &ContextMenu) -> ContextMenuItem {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_item_new_with_submenu(
                label.to_glib_none().0,
                submenu.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_context_menu_item_get_gaction")]
    #[doc(alias = "get_gaction")]
    pub fn gaction(&self) -> Option<gio::Action> {
        unsafe { from_glib_none(ffi::webkit_context_menu_item_get_gaction(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_context_menu_item_get_stock_action")]
    #[doc(alias = "get_stock_action")]
    pub fn stock_action(&self) -> ContextMenuAction {
        unsafe { from_glib(ffi::webkit_context_menu_item_get_stock_action(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_context_menu_item_get_submenu")]
    #[doc(alias = "get_submenu")]
    pub fn submenu(&self) -> Option<ContextMenu> {
        unsafe { from_glib_none(ffi::webkit_context_menu_item_get_submenu(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_context_menu_item_get_title")]
    #[doc(alias = "get_title")]
    pub fn title(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_context_menu_item_get_title(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_context_menu_item_is_separator")]
    pub fn is_separator(&self) -> bool {
        unsafe { from_glib(ffi::webkit_context_menu_item_is_separator(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_context_menu_item_set_submenu")]
    pub fn set_submenu(&self, submenu: Option<&ContextMenu>) {
        unsafe {
            ffi::webkit_context_menu_item_set_submenu(
                self.to_glib_none().0,
                submenu.to_glib_none().0,
            );
        }
    }
}

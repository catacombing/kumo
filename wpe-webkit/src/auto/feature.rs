// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;

use crate::{ffi, FeatureStatus};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Feature(Shared<ffi::WebKitFeature>);

    match fn {
        ref => |ptr| ffi::webkit_feature_ref(ptr),
        unref => |ptr| ffi::webkit_feature_unref(ptr),
        type_ => || ffi::webkit_feature_get_type(),
    }
}

impl Feature {
    #[doc(alias = "webkit_feature_get_category")]
    #[doc(alias = "get_category")]
    pub fn category(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_feature_get_category(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_feature_get_default_value")]
    #[doc(alias = "get_default_value")]
    pub fn is_default_value(&self) -> bool {
        unsafe { from_glib(ffi::webkit_feature_get_default_value(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_feature_get_details")]
    #[doc(alias = "get_details")]
    pub fn details(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_feature_get_details(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_feature_get_identifier")]
    #[doc(alias = "get_identifier")]
    pub fn identifier(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_feature_get_identifier(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_feature_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_feature_get_name(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_feature_get_status")]
    #[doc(alias = "get_status")]
    pub fn status(&self) -> FeatureStatus {
        unsafe { from_glib(ffi::webkit_feature_get_status(self.to_glib_none().0)) }
    }
}

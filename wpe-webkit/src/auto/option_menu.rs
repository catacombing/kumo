// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::prelude::*;
use glib::signal::{connect_raw, SignalHandlerId};
use glib::translate::*;

use crate::{ffi, OptionMenuItem};

glib::wrapper! {
    #[doc(alias = "WebKitOptionMenu")]
    pub struct OptionMenu(Object<ffi::WebKitOptionMenu, ffi::WebKitOptionMenuClass>);

    match fn {
        type_ => || ffi::webkit_option_menu_get_type(),
    }
}

impl OptionMenu {
    #[doc(alias = "webkit_option_menu_activate_item")]
    pub fn activate_item(&self, index: u32) {
        unsafe {
            ffi::webkit_option_menu_activate_item(self.to_glib_none().0, index);
        }
    }

    #[doc(alias = "webkit_option_menu_close")]
    pub fn close(&self) {
        unsafe {
            ffi::webkit_option_menu_close(self.to_glib_none().0);
        }
    }

    #[doc(alias = "webkit_option_menu_get_item")]
    #[doc(alias = "get_item")]
    pub fn item(&self, index: u32) -> Option<OptionMenuItem> {
        unsafe { from_glib_none(ffi::webkit_option_menu_get_item(self.to_glib_none().0, index)) }
    }

    #[doc(alias = "webkit_option_menu_get_n_items")]
    #[doc(alias = "get_n_items")]
    pub fn n_items(&self) -> u32 {
        unsafe { ffi::webkit_option_menu_get_n_items(self.to_glib_none().0) }
    }

    #[doc(alias = "webkit_option_menu_select_item")]
    pub fn select_item(&self, index: u32) {
        unsafe {
            ffi::webkit_option_menu_select_item(self.to_glib_none().0, index);
        }
    }

    #[doc(alias = "close")]
    pub fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn close_trampoline<F: Fn(&OptionMenu) + 'static>(
            this: *mut ffi::WebKitOptionMenu,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"close\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    close_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

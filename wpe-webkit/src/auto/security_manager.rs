// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;

use crate::ffi;

glib::wrapper! {
    #[doc(alias = "WebKitSecurityManager")]
    pub struct SecurityManager(Object<ffi::WebKitSecurityManager, ffi::WebKitSecurityManagerClass>);

    match fn {
        type_ => || ffi::webkit_security_manager_get_type(),
    }
}

impl SecurityManager {
    #[doc(alias = "webkit_security_manager_register_uri_scheme_as_cors_enabled")]
    pub fn register_uri_scheme_as_cors_enabled(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_cors_enabled(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_security_manager_register_uri_scheme_as_display_isolated")]
    pub fn register_uri_scheme_as_display_isolated(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_display_isolated(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_security_manager_register_uri_scheme_as_empty_document")]
    pub fn register_uri_scheme_as_empty_document(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_empty_document(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_security_manager_register_uri_scheme_as_local")]
    pub fn register_uri_scheme_as_local(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_local(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_security_manager_register_uri_scheme_as_no_access")]
    pub fn register_uri_scheme_as_no_access(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_no_access(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_security_manager_register_uri_scheme_as_secure")]
    pub fn register_uri_scheme_as_secure(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_secure(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_security_manager_uri_scheme_is_cors_enabled")]
    pub fn uri_scheme_is_cors_enabled(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_cors_enabled(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_security_manager_uri_scheme_is_display_isolated")]
    pub fn uri_scheme_is_display_isolated(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_display_isolated(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_security_manager_uri_scheme_is_empty_document")]
    pub fn uri_scheme_is_empty_document(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_empty_document(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_security_manager_uri_scheme_is_local")]
    pub fn uri_scheme_is_local(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_local(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_security_manager_uri_scheme_is_no_access")]
    pub fn uri_scheme_is_no_access(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_no_access(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_security_manager_uri_scheme_is_secure")]
    pub fn uri_scheme_is_secure(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_secure(
                self.to_glib_none().0,
                scheme.to_glib_none().0,
            ))
        }
    }
}

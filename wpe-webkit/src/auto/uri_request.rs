// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use std::boxed::Box as Box_;

use glib::prelude::*;
use glib::signal::{connect_raw, SignalHandlerId};
use glib::translate::*;

use crate::ffi;

glib::wrapper! {
    #[doc(alias = "WebKitURIRequest")]
    pub struct URIRequest(Object<ffi::WebKitURIRequest, ffi::WebKitURIRequestClass>);

    match fn {
        type_ => || ffi::webkit_uri_request_get_type(),
    }
}

impl URIRequest {
    #[doc(alias = "webkit_uri_request_new")]
    pub fn new(uri: &str) -> URIRequest {
        unsafe { from_glib_full(ffi::webkit_uri_request_new(uri.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct
    /// [`URIRequest`] objects.
    ///
    /// This method returns an instance of
    /// [`URIRequestBuilder`](crate::builders::URIRequestBuilder) which can be
    /// used to create [`URIRequest`] objects.
    pub fn builder() -> URIRequestBuilder {
        URIRequestBuilder::new()
    }

    #[doc(alias = "webkit_uri_request_get_http_headers")]
    #[doc(alias = "get_http_headers")]
    pub fn http_headers(&self) -> Option<soup::MessageHeaders> {
        unsafe { from_glib_none(ffi::webkit_uri_request_get_http_headers(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_uri_request_get_http_method")]
    #[doc(alias = "get_http_method")]
    pub fn http_method(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_uri_request_get_http_method(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_uri_request_get_uri")]
    #[doc(alias = "get_uri")]
    pub fn uri(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_uri_request_get_uri(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_uri_request_set_uri")]
    #[doc(alias = "uri")]
    pub fn set_uri(&self, uri: &str) {
        unsafe {
            ffi::webkit_uri_request_set_uri(self.to_glib_none().0, uri.to_glib_none().0);
        }
    }

    #[doc(alias = "uri")]
    pub fn connect_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uri_trampoline<F: Fn(&URIRequest) + 'static>(
            this: *mut ffi::WebKitURIRequest,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::uri\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_uri_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for URIRequest {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`URIRequest`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct URIRequestBuilder {
    builder: glib::object::ObjectBuilder<'static, URIRequest>,
}

impl URIRequestBuilder {
    fn new() -> Self {
        Self { builder: glib::object::Object::builder() }
    }

    pub fn uri(self, uri: impl Into<glib::GString>) -> Self {
        Self { builder: self.builder.property("uri", uri.into()) }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`URIRequest`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to \
                  have side effects"]
    pub fn build(self) -> URIRequest {
        self.builder.build()
    }
}

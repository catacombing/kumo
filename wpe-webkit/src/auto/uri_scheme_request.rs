// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::{ffi, URISchemeResponse, WebView};

glib::wrapper! {
    #[doc(alias = "WebKitURISchemeRequest")]
    pub struct URISchemeRequest(Object<ffi::WebKitURISchemeRequest, ffi::WebKitURISchemeRequestClass>);

    match fn {
        type_ => || ffi::webkit_uri_scheme_request_get_type(),
    }
}

impl URISchemeRequest {
    #[doc(alias = "webkit_uri_scheme_request_finish")]
    pub fn finish(
        &self,
        stream: &impl IsA<gio::InputStream>,
        stream_length: i64,
        content_type: Option<&str>,
    ) {
        unsafe {
            ffi::webkit_uri_scheme_request_finish(
                self.to_glib_none().0,
                stream.as_ref().to_glib_none().0,
                stream_length,
                content_type.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_uri_scheme_request_finish_error")]
    pub fn finish_error(&self, error: &mut glib::Error) {
        unsafe {
            ffi::webkit_uri_scheme_request_finish_error(
                self.to_glib_none().0,
                error.to_glib_none_mut().0,
            );
        }
    }

    #[doc(alias = "webkit_uri_scheme_request_finish_with_response")]
    pub fn finish_with_response(&self, response: &URISchemeResponse) {
        unsafe {
            ffi::webkit_uri_scheme_request_finish_with_response(
                self.to_glib_none().0,
                response.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_http_body")]
    #[doc(alias = "get_http_body")]
    pub fn http_body(&self) -> Option<gio::InputStream> {
        unsafe {
            from_glib_full(ffi::webkit_uri_scheme_request_get_http_body(self.to_glib_none().0))
        }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_http_headers")]
    #[doc(alias = "get_http_headers")]
    pub fn http_headers(&self) -> Option<soup::MessageHeaders> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_http_headers(self.to_glib_none().0))
        }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_http_method")]
    #[doc(alias = "get_http_method")]
    pub fn http_method(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_http_method(self.to_glib_none().0))
        }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_path")]
    #[doc(alias = "get_path")]
    pub fn path(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_uri_scheme_request_get_path(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_scheme")]
    #[doc(alias = "get_scheme")]
    pub fn scheme(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_uri_scheme_request_get_scheme(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_uri")]
    #[doc(alias = "get_uri")]
    pub fn uri(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_uri_scheme_request_get_uri(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_uri_scheme_request_get_web_view")]
    #[doc(alias = "get_web_view")]
    pub fn web_view(&self) -> Option<WebView> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_web_view(self.to_glib_none().0))
        }
    }
}

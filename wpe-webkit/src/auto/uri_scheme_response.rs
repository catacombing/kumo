// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::ffi;

glib::wrapper! {
    #[doc(alias = "WebKitURISchemeResponse")]
    pub struct URISchemeResponse(Object<ffi::WebKitURISchemeResponse, ffi::WebKitURISchemeResponseClass>);

    match fn {
        type_ => || ffi::webkit_uri_scheme_response_get_type(),
    }
}

impl URISchemeResponse {
    #[doc(alias = "webkit_uri_scheme_response_new")]
    pub fn new(input_stream: &impl IsA<gio::InputStream>, stream_length: i64) -> URISchemeResponse {
        unsafe {
            from_glib_full(ffi::webkit_uri_scheme_response_new(
                input_stream.as_ref().to_glib_none().0,
                stream_length,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct
    /// [`URISchemeResponse`] objects.
    ///
    /// This method returns an instance of
    /// [`URISchemeResponseBuilder`](crate::builders::URISchemeResponseBuilder)
    /// which can be used to create [`URISchemeResponse`] objects.
    pub fn builder() -> URISchemeResponseBuilder {
        URISchemeResponseBuilder::new()
    }

    #[doc(alias = "webkit_uri_scheme_response_set_content_type")]
    pub fn set_content_type(&self, content_type: &str) {
        unsafe {
            ffi::webkit_uri_scheme_response_set_content_type(
                self.to_glib_none().0,
                content_type.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "webkit_uri_scheme_response_set_http_headers")]
    pub fn set_http_headers(&self, headers: soup::MessageHeaders) {
        unsafe {
            ffi::webkit_uri_scheme_response_set_http_headers(
                self.to_glib_none().0,
                headers.into_glib_ptr(),
            );
        }
    }

    #[doc(alias = "webkit_uri_scheme_response_set_status")]
    pub fn set_status(&self, status_code: u32, reason_phrase: Option<&str>) {
        unsafe {
            ffi::webkit_uri_scheme_response_set_status(
                self.to_glib_none().0,
                status_code,
                reason_phrase.to_glib_none().0,
            );
        }
    }
}

impl Default for URISchemeResponse {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`URISchemeResponse`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct URISchemeResponseBuilder {
    builder: glib::object::ObjectBuilder<'static, URISchemeResponse>,
}

impl URISchemeResponseBuilder {
    fn new() -> Self {
        Self { builder: glib::object::Object::builder() }
    }

    pub fn stream(self, stream: &impl IsA<gio::InputStream>) -> Self {
        Self { builder: self.builder.property("stream", stream.clone().upcast()) }
    }

    pub fn stream_length(self, stream_length: i64) -> Self {
        Self { builder: self.builder.property("stream-length", stream_length) }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`URISchemeResponse`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to \
                  have side effects"]
    pub fn build(self) -> URISchemeResponse {
        self.builder.build()
    }
}

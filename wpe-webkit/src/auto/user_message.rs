// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-files
// DO NOT EDIT

use glib::prelude::*;
use glib::translate::*;

use crate::ffi;

glib::wrapper! {
    #[doc(alias = "WebKitUserMessage")]
    pub struct UserMessage(Object<ffi::WebKitUserMessage, ffi::WebKitUserMessageClass>);

    match fn {
        type_ => || ffi::webkit_user_message_get_type(),
    }
}

impl UserMessage {
    #[doc(alias = "webkit_user_message_new")]
    pub fn new(name: &str, parameters: Option<&glib::Variant>) -> UserMessage {
        unsafe {
            from_glib_none(ffi::webkit_user_message_new(
                name.to_glib_none().0,
                parameters.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "webkit_user_message_new_with_fd_list")]
    #[doc(alias = "new_with_fd_list")]
    pub fn with_fd_list(
        name: &str,
        parameters: Option<&glib::Variant>,
        fd_list: Option<&impl IsA<gio::UnixFDList>>,
    ) -> UserMessage {
        unsafe {
            from_glib_none(ffi::webkit_user_message_new_with_fd_list(
                name.to_glib_none().0,
                parameters.to_glib_none().0,
                fd_list.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct
    /// [`UserMessage`] objects.
    ///
    /// This method returns an instance of
    /// [`UserMessageBuilder`](crate::builders::UserMessageBuilder) which can be
    /// used to create [`UserMessage`] objects.
    pub fn builder() -> UserMessageBuilder {
        UserMessageBuilder::new()
    }

    #[doc(alias = "webkit_user_message_get_fd_list")]
    #[doc(alias = "get_fd_list")]
    #[doc(alias = "fd-list")]
    pub fn fd_list(&self) -> Option<gio::UnixFDList> {
        unsafe { from_glib_none(ffi::webkit_user_message_get_fd_list(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_user_message_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::webkit_user_message_get_name(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_user_message_get_parameters")]
    #[doc(alias = "get_parameters")]
    pub fn parameters(&self) -> Option<glib::Variant> {
        unsafe { from_glib_none(ffi::webkit_user_message_get_parameters(self.to_glib_none().0)) }
    }

    #[doc(alias = "webkit_user_message_send_reply")]
    pub fn send_reply(&self, reply: &UserMessage) {
        unsafe {
            ffi::webkit_user_message_send_reply(self.to_glib_none().0, reply.to_glib_none().0);
        }
    }
}

impl Default for UserMessage {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`UserMessage`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct UserMessageBuilder {
    builder: glib::object::ObjectBuilder<'static, UserMessage>,
}

impl UserMessageBuilder {
    fn new() -> Self {
        Self { builder: glib::object::Object::builder() }
    }

    pub fn fd_list(self, fd_list: &impl IsA<gio::UnixFDList>) -> Self {
        Self { builder: self.builder.property("fd-list", fd_list.clone().upcast()) }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self { builder: self.builder.property("name", name.into()) }
    }

    pub fn parameters(self, parameters: &glib::Variant) -> Self {
        Self { builder: self.builder.property("parameters", parameters.clone()) }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`UserMessage`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to \
                  have side effects"]
    pub fn build(self) -> UserMessage {
        self.builder.build()
    }
}
